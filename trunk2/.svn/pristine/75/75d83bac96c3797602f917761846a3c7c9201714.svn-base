package operation.service.dynamic;

import java.util.List;

import operation.exception.XueWenServiceException;
import operation.pojo.dynamic.GroupDynamic;
import operation.pojo.topics.Images;
import operation.repo.dynamic.GroupDynamicRepository;
import operation.service.course.NewGroupCourseService;
import operation.service.drycargo.DrycargoService;
import operation.service.topics.TopicService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import tools.Config;
import tools.StringUtil;

@Service
@Component
public class GroupDynamicService {

	@Autowired
	private GroupDynamicRepository groupDynamicRepository;
	@Autowired
	private TopicService topicService;
	@Autowired
	private DrycargoService drycargoService;
	@Autowired
	private NewGroupCourseService newGroupCourseService;
	/**
	 * 保存动态
	 * @param groupId
	 * @param sourceId
	 * @param type
	 * @param time
	 * @throws XueWenServiceException
	 */
	public void addGroupDynamic(String groupId,String sourceId,String title,String content,String courseId,List<Images> images,
			String autherId,String autherNickName,String autherLogoUrl,String type,long ctime)throws XueWenServiceException{
		if(StringUtil.isBlank(groupId) || StringUtil.isBlank(type)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		groupDynamicRepository.save(new GroupDynamic(groupId,sourceId,title,content,courseId,images,
				autherId,autherNickName,autherLogoUrl,type,ctime));
	}
	/**
	 * 获取动态
	 * @param groupId
	 * @param pageable
	 * @param time
	 * @return
	 * @throws XueWenServiceException
	 */
	public 	Page<GroupDynamic> getDynamic(String groupId,Pageable pageable,long time,String dynamic)throws XueWenServiceException{
		if("1".equals(dynamic)){
			return groupDynamicRepository.findByGroupIdAndCtimeGreaterThan(groupId, time, pageable);
		}else{
			return groupDynamicRepository.findByGroupIdAndCtimeLessThan(groupId, time, pageable);
		}
	}
}
