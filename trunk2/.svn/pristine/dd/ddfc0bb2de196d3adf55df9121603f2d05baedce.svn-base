package operation.service.topics;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import net.sf.json.JSONObject;
import operation.exception.XueWenServiceException;
import operation.pojo.file.FileStoreInfo;
import operation.pojo.group.XueWenGroup;
import operation.pojo.praise.Praise;
import operation.pojo.praise.UserPraiseResponse;
import operation.pojo.tags.UserTagBean;
import operation.pojo.topics.Post;
import operation.pojo.topics.Topic;
import operation.pojo.topics.TopicResponse;
import operation.pojo.user.User;
import operation.repo.topics.TopicRepository;
import operation.repo.topics.TopicTemplate;
import operation.service.file.MyFileService;
import operation.service.group.GroupService;
import operation.service.praise.PraiseService;
import operation.service.praise.UnPraiseService;
import operation.service.share.ShareService;
import operation.service.tags.TagService;
import operation.service.user.UserService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.geo.Distance;
import org.springframework.data.geo.Point;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.index.GeospatialIndex;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import tools.Config;
import tools.JSON2ObjUtil;
import tools.StringUtil;

@Service
@Component
public class TopicService {

	@Autowired
	private TopicRepository topicRepository;
	@Autowired
	public GroupService groupService;
	@Autowired
	private MyFileService myFileService;
	@Autowired
	private PraiseService praiseService;
	@Autowired
	private UnPraiseService unPraiseService;
	@Autowired
	private PostService postService;
	@Autowired
	private ShareService shareService;
	@Autowired
	private MongoTemplate mongoTemplate;
	
	@Autowired
	private UserService userService;
	@Autowired
	private TagService tagService;
	@Autowired
	private TopicTemplate topicTemplate;
	@Value("${tag.service.url}")
	private String tagServiceUrl;

	public TopicService() {

	}
	
	/**
	 * 创建一个话题对象
	 * @param user  用户
	 * @param sourceId 来源ID
	 * @param sourceName 来源名称
	 * @param courseId 课程ID
	 * @param title  标题
	 * @param content 内容
	 * @param lat  经度
	 * @param lng 维度
	 * @param picUrl 图片地址
	 * @return
	 * @throws XueWenServiceException
	 */
	public Topic createTopic(User user,Topic topic,String tagName,String isGeoOpen)throws XueWenServiceException{
		topic.setAuthorId(user.getId());
		topic.setAuthorName(user.getNickName());
		topic.setAuthorLogoUrl(user.getLogoURL());
		long time=System.currentTimeMillis();
		topic.setCtime(time);
		topic.setUtime(time);
		topic.setViewCount(0);
		topic.setReplyCount(0);
		topic.setNewReplyCount(0);
		topic.setLikesCount(0);
		topic.setUnLikeCount(0);
		topic.setShareCount(0);
		topic.setShareCount(0);
		topic.setDisplayOrder(0);
		topic.setDigestLevel(1);
		topic.setDeleted(false);
		double[] position=new double[]{topic.getLng(),topic.getLat()};
		topic.setPosition(position);
		if(StringUtil.isBlank(topic.getPicUrl())){
			topic.setHasImage(false);
		}else{
			topic.setHasImage(true);
		}
		if("0".equals(isGeoOpen)){
			topic.setGeoOpen(false);
		}else{
			topic.setGeoOpen(true);
		}
		topic = topicRepository.save(topic);
		if(!StringUtil.isBlank(tagName)){
			tagName = JSON2ObjUtil.getArrayFromString(tagName);
			RestTemplate restTemplate=new RestTemplate();
			restTemplate.getForObject(tagServiceUrl+"tag/createTagBatch?domain="+"yxtapp"+"&itemId="+topic.getTopicId()+"&userId="+user.getId()+"&userName="+user.getNickName()+"&itemType="+4+"&tagNames="+tagName, String.class);
		}
		 
		return topic;
	}
	
//	/**
//	 * 
//	 * 创建一个话题对象
//	 * @param user  用户
//	 * @param sourceId 来源ID
//	 * @param sourceName 来源名称
//	 * @param courseId 课程ID
//	 * @param title  标题
//	 * @param content 内容
//	 * @param lat  经度
//	 * @param lng 维度
//	 * @param picUrl 图片地址
//	 * @param file  图片文件
//	 * @return
//	 * @throws XueWenServiceException
//	 */
//	public Topic createTopic(User user,Topic topic, MultipartFile file,String tagName)throws XueWenServiceException{
//		if(topic == null){
//			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_CREATEERROR_201,null);
//		}
//		FileStoreInfo fs =uploadFile(file);
//		return  createTopic(user,topic,fs,tagName);
//	}

	/**
	 * 上传主题文件，并返回主题文件的网络访问地址
	 * @param file
	 * @return
	 * @throws XueWenServiceException
	 */
	public String uploadTopicFile( MultipartFile file)throws XueWenServiceException{
		if (null != file && !file.isEmpty()) {
			String suffile=String.valueOf(System.currentTimeMillis());  //文件基础路径后缀（划分多文件目录，防止一个目录下有多个目录）
			String fileLocal=getTopicPicLocal(suffile);
			String fileUrl=getTopicPicUrl(suffile);
			FileStoreInfo fif=myFileService.uploadFile(file, fileLocal,fileUrl);
			if(fif !=null){
				return fif.getFileUrl();
			}
		}
		return null;
	}
	/**
	 * 得到主题文件服务器存储地址
	 * @return
	 * @throws XueWenServiceException
	 */
	private   String getTopicPicLocal(String suffix)throws XueWenServiceException{
		String str=myFileService.idSpilt(suffix, 5);
		return Config.TOPICFILELOCAL+str;
	}
	
	/**
	 * 得到主题文件的网络访问URL
	 * @return
	 * @throws XueWenServiceException
	 */
	private   String getTopicPicUrl(String suffix)throws XueWenServiceException{
		String str=myFileService.idSpilt(suffix, 5);
		return Config.TOPICFILEURL+str;
	}
	
	/**
	 * 主题点赞
	 * @param userId
	 * @param appKey
	 * @param sourceId
	 * @param type
	 * @throws XueWenServiceException
	 */
	public Topic topicAddParise(User user,String topicId)throws XueWenServiceException{
		Topic topic=findOneById(topicId);
		if(topic == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
		}
		praiseService.addPraise(user,topic.getAppKey(), topic.getTopicId(),topic.getType());
		topic.setLikesCount(topic.getLikesCount()+1);
		return topicRepository.save(topic);
	}
	/**
	 * 主题点不赞
	 * @param userId
	 * @param appKey
	 * @param sourceId
	 * @param type
	 * @throws XueWenServiceException
	 */
	public Topic topicAddUnParise(User user,String topicId)throws XueWenServiceException{
		Topic topic=findOneById(topicId);
		if(topic == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
		}
		unPraiseService.addUnPraise(user,topic.getAppKey(), topic.getTopicId(),topic.getType());
		topic.setUnLikeCount(topic.getUnLikeCount()+1);
		return topicRepository.save(topic);
	}
	
	/**
	 * 主题分享
	 * @param user
	 * @param topicId
	 * @return
	 * @throws XueWenServiceException
	 */
	public Topic topicAddShare(User user,String topicId,String toAddr,String appKey,String toType)throws XueWenServiceException{
		Topic topic=findOneById(topicId);
		if(topic == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
		}
		shareService.addShare(user,Config.YXTDOMAIN ,appKey,topic.getTopicId(),Config.TYPE_TOPIC, toType,toAddr);
		topic.setShareCount(topic.getShareCount()+1);
		return topicRepository.save(topic);
	}
	
	/**
	 * 查询一个topic
	 * @param topicId
	 * @return
	 * @throws XueWenServiceException
	 */
	public Topic findOneById(String topicId)throws XueWenServiceException{
		if(StringUtil.isBlank(topicId)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
		}
		return topicRepository.findByTopicIdAndIsDeleted(topicId,false);
	}
	
	/**
	 * 删除topic
	 * @param topicId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean deleteById(String topicId)throws XueWenServiceException{
		if(StringUtil.isBlank(topicId)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
		}
		/**
		 * TODO:这里应该加上删除话题的回复
		 */
		List<Post> PostList = postService.getAllTopicPost(topicId);
		// 课程下所有副楼回复

		for (Post post : PostList) {

			topicTemplate.deleteSubPost(post.getPostId());
		}
		topicTemplate.deletePost(topicId);
		topicRepository.delete(topicRepository.findOne(topicId));
		return true;
	}
	
	/**
	 * 查询话题详情
	 * @param userId
	 * @param topicId
	 * @return
	 * @throws XueWenServiceException
	 */
	public TopicResponse topicDetails(String userId,String topicId,String sourceId)throws XueWenServiceException{
		Topic topic=findOneById(topicId);
		if(topic !=null){
			TopicResponse topicRsp=new TopicResponse(topic);
			//该主题的赞用户列表
			Pageable pageable1 = new PageRequest(0,7);
			Page<Praise> praises=praiseService.findOnePraiseByAppKeyAndSourceIdAndType(topic.getAppKey(), topic.getTopicId(), topic.getType(), pageable1);
			Praise praise = null;
			List<UserPraiseResponse> list = new ArrayList<UserPraiseResponse>();
			if(praises != null){
				if(praises.getContent().size() > 0) {
					List<String> userIds = new ArrayList<String>();
					for(int i = 0 ; i < praises.getContent().size() ; i++){
						praise = praises.getContent().get(i);
						userIds.add(praise.getUserId());
					}
					List<User> users = userService.findByIdIn(userIds);
					for (User user : users) {
						UserPraiseResponse upr = new UserPraiseResponse(praise.getUserId(),user.getUserName(),user.getLogoURL());
						list.add(upr);
					}
					topicRsp.setPraiseResponse(list);
				}
			}
			
			//用户对此话题的态度 赞
			topicRsp.setLike(praiseService.isUserPraise(userId,topic.getAppKey(), topic.getTopicId(), topic.getType())?true:false);
			//不攒
			topicRsp.setUnlike(unPraiseService.isUserUnPraise(userId, topic.getAppKey(), topic.getTopicId(), topic.getType())?true:false);
			//判断该用户是否有回复权限（此人是否为该群）
			topicRsp.setAuthority(groupService.findMember(topic.getSourceId(),userId)?true:false);
			//获得该话题标签
			RestTemplate restTemplate=new RestTemplate();
			String tag = restTemplate.getForObject(tagServiceUrl+"tag/getTagsByIdAndType?domain="+"yxtapp"+"&itemId="+topic.getTopicId()+"&itemType="+4, String.class);
			JSONObject objj=JSONObject.fromObject(tag);
			JSONObject obss=objj.getJSONObject("data");
			net.sf.json.JSONArray childs= obss.getJSONArray("result"); 
			topicRsp.setTagName(childs);
//			//判断该用户是否有回复权限（此人是否为该群）
//			boolean result = groupService.findMember(sourceId,userId);
//			if(result == true){
//				topicRsp.setAuthority("1"); //有权限回复
//			}else{
//				topicRsp.setAuthority("0"); //无权限回复
//			}
			//
			//查找前10条主楼回复
//			Pageable pageable = new PageRequest(0,10,new Sort(Direction.DESC,"ctime"));
//			Page<Post> posts=postService.getTopicPost(topicId, pageable);
//			if(posts !=null){
//				topicRsp.setPost(posts.getContent());
//			}
			XueWenGroup group = groupService.findGroup(sourceId, userId);
			topicRsp.setGroup(group);
			//计算该主题查看数
			topic.setViewCount(topic.getViewCount()+1);
			topicRepository.save(topic);
			
			return topicRsp;
		}else{
			throw new XueWenServiceException(Config.STATUS_201,
					Config.MSG_NODATA_201, null);
		}
		
	}
	
	
	/**
	 * 查询话题详情
	 * @param userId
	 * @param topicId
	 * @return
	 * @throws XueWenServiceException
	 */
	public TopicResponse topicDetail(String userId,String topicId)throws XueWenServiceException{
		Topic topic=findOneById(topicId);
		if(topic !=null){
			TopicResponse topicRsp=new TopicResponse(topic);
			//该主题的赞用户列表
			Pageable pageable1 = new PageRequest(0,7);
			Page<Praise> praises=praiseService.findOnePraiseByAppKeyAndSourceIdAndType(topic.getAppKey(), topic.getTopicId(), topic.getType(), pageable1);
			Praise praise = null;
			List<UserPraiseResponse> list = new ArrayList<UserPraiseResponse>();
			if(praises != null){
				if(praises.getContent().size() > 0) {
					List<String> userIds = new ArrayList<String>();
					for(int i = 0 ; i < praises.getContent().size() ; i++){
						praise = praises.getContent().get(i);
						userIds.add(praise.getUserId());
					}
					List<User> users = userService.findByIdIn(userIds);
					for (User user : users) {
						UserPraiseResponse upr = new UserPraiseResponse(praise.getUserId(),user.getUserName(),user.getLogoURL());
						list.add(upr);
					}
					topicRsp.setPraiseResponse(list);
					
				}
			}
			
			//用户对此话题的态度 赞
			topicRsp.setLike(praiseService.isUserPraise(userId,topic.getAppKey(), topic.getTopicId(), topic.getType())?true:false);
			//不攒
			topicRsp.setUnlike(unPraiseService.isUserUnPraise(userId, topic.getAppKey(), topic.getTopicId(), topic.getType())?true:false);
			//判断该用户是否有回复权限（此人是否为该群）
			topicRsp.setAuthority(groupService.findMember(topic.getSourceId(),userId)?true:false);
			//获得该话题标签
			RestTemplate restTemplate=new RestTemplate();
			String tag = restTemplate.getForObject(tagServiceUrl+"tag/getTagsByIdAndType?domain="+"yxtapp"+"&itemId="+topic.getTopicId()+"&itemType="+4, String.class);
			JSONObject objj=JSONObject.fromObject(tag);
			JSONObject obss=objj.getJSONObject("data");
			net.sf.json.JSONArray childs= obss.getJSONArray("result"); 
			topicRsp.setTagName(childs);

			//计算该主题查看数
			topic.setViewCount(topic.getViewCount()+1);
			topicRepository.save(topic);
			
			return topicRsp;
		}else{
			throw new XueWenServiceException(Config.STATUS_201,
					Config.MSG_NODATA_201, null);
		}
		
	}
	
	/**
	 * 根据群组或者课程来查询主题列表
	 * @param groupId
	 * @param courseId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Topic> findTopicByGroupIdOrCourseId(String groupId, String appKey,String courseId,Pageable pageable)
			throws XueWenServiceException {
		
		//如果课程ID为空，则查询的为群话题
		if(StringUtil.isBlank(courseId)){
			//过滤掉需要申请加入群的话题
			//XueWenGroup group = groupService.findGroup(groupId);
			return topicRepository.findBySourceIdAndAppKeyAndIsDeleted(groupId,appKey, false,pageable);
		}else{ //如果课程ID不为空,则查询该课程的话题
			return topicRepository.findByCourseIdAndAppKeyAndIsDeleted(courseId,appKey,false, pageable);
		}
	}
	/**
	 * 通过主题ID查询主题详情
	 * @param topicId
	 * @return
	 * @throws XueWenServiceException
	 */
//	public Topic findTopicByTopicId(String topicId)
//			throws XueWenServiceException {
//		Topic topic = topicRepository.findByTopicId(topicId);
//		
//		return null;
//	}
	
	
	/**
	 * 将topic转成topicResponse
	 * @param subs
	 * @param userId
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<TopicResponse> toResponses(List<Topic> topic)throws XueWenServiceException{
	//	List<Topic> rspTopic=new ArrayList<Topic>();
		List<TopicResponse> topicRes = new ArrayList<TopicResponse>();
		if(topic==null || topic.size()<=0){
			//logger.info("=====无返回符合条件话题");
		}else{
			for(int i = 0; i < topic.size(); i++){
				
				topicRes.add(toResponse(topic.get(i)));
			}
		}
		return topicRes;
		
	}
	/**
	 * 单个对象转换成前端对象
	 * @param topic
	 * @return
	 * @throws XueWenServiceException
	 */
	public TopicResponse toResponse(Topic topic)throws XueWenServiceException{
		if (topic == null) {
			throw new XueWenServiceException(Config.STATUS_201,
					Config.MSG_NODATA_201, null);
		}
		RestTemplate restTemplate=new RestTemplate();
		String tag = restTemplate.getForObject(tagServiceUrl+"tag/getTagsByIdAndType?domain="+"yxtapp"+"&itemId="+topic.getTopicId()+"&itemType="+4, String.class);
		JSONObject objj=JSONObject.fromObject(tag);
		JSONObject obss=objj.getJSONObject("data");
		net.sf.json.JSONArray childs= obss.getJSONArray("result"); 
		TopicResponse topicRespone = new TopicResponse(topic);
		topicRespone.setTagName(childs);
		return topicRespone;
	}
	/**
	 * 获得该群组下的主题的数量
	 * @param sourceId
	 * @param appKey
	 * @return
	 */
	public int getTopicCount(String sourceId){
		return topicRepository.countBySourceIdAndIsDeleted(sourceId,false);
	}
	/**
	 * 发现话题（只查询6个）
	 * @param groupId
	 * @param courseId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Topic> findAll(String userId,Pageable pageable)throws XueWenServiceException {
		List<Object> groupIsOpen = groupService.findGroupByIsOpen(userId);
		Page<Topic>  topicSub = topicRepository.findBySourceIdInAndIsDeleted(groupIsOpen,false, pageable);
		return topicSub;
	}
	/**
	 * 发现话题（只查询6个）
	 * @param groupId
	 * @param courseId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Topic> findAllByUserID(String userId,Pageable pageable)throws XueWenServiceException {
		Page<Topic>  topicSub = topicRepository.findByAuthorIdAndIsDeleted(userId,false, pageable);
		return topicSub;
	}

	/**
	 * 发现话题（只查询6个，根据我所在的群组ID集合，过滤出本人不在的群组）
	 * @param userId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Topic> findAll(Pageable pageable)throws XueWenServiceException {
		//List<Object> groupIsOpen = groupService.findGroupByIsOpen(myGrouplist);
		Page<Topic>  topicSub = topicRepository.findByAppKeyAndTypeAndIsDeleted("yxtapp","0",false, pageable);
		return topicSub;
	}
	/**
	 * 查询所有话题列表
	 * 
	 * @param p
	 * @return
	 * @throws XueWenServiceException 
	 */
	public Page<Topic> all(Pageable pageable) throws XueWenServiceException {
		
		List<Object> groupIsOpen = groupService.findGroupByIsOpen();
		Page<Topic> topic = topicRepository.findBySourceIdInAndIsDeleted(groupIsOpen,false, pageable);
		return topic;
	}
	/**
	 * 计算主楼回复数
	 * @param topicId
	 */
	public void saveReplyCount(String topicId) throws XueWenServiceException{
		Topic topic = topicRepository.findByTopicIdAndIsDeleted(topicId,false);
		if(topic==null){
			throw new XueWenServiceException(Config.STATUS_201,
					Config.MSG_NODATA_201, null);
		}
		topic.setReplyCount(topic.getReplyCount()+1);
		topicRepository.save(topic);
	}
	
	/**
	 * 根据标题或者内容搜索匹配话题列表
	 * 
	 * @param p
	 * @return
	 * @throws XueWenServiceException 
	 */
	public Page<Topic> search(String titleOrContent,Pageable pageable) throws XueWenServiceException {
		List<Object> groupIsOpen = groupService.findGroupByIsOpen();
		Page<Topic> topic = null;
				
		if(StringUtil.isBlank(titleOrContent)){
			//如果titleOrContent为空，则搜索全部
			topic = topicRepository.findBySourceIdInAndIsDeleted(groupIsOpen,false, pageable);
		}else{
			//按条件搜索
//			Query query=new Query(Criteria.where("").is("").and("").is("").and("").);
			titleOrContent = ".*?(?i)"+titleOrContent+".*";
			topic = topicRepository.findBySourceIdInAndIsDeletedAndTitleRegexOrSourceIdInAndIsDeletedAndContentRegex(groupIsOpen, false,titleOrContent, groupIsOpen, false,titleOrContent, pageable);
		}
		return topic;
	}
	
	/**
	 * 根据标题或者内容搜索匹配话题列表(把没有关联群组的话题也全部查询出来）
	 * 
	 * @param p
	 * @return
	 * @throws XueWenServiceException 
	 */
	public Page<Topic> searchAll(String titleOrContent,Pageable pageable) throws XueWenServiceException {
		List<Object> groupIsOpen = groupService.findGroupByIsOpen();
		Page<Topic> topic = null;
				
		if(StringUtil.isBlank(titleOrContent)){
			//如果titleOrContent为空，则搜索全部
			topic = topicRepository.findAll(pageable);
		}else{
			//按条件搜索
//			Query query=new Query(Criteria.where("").is("").and("").is("").and("").);
			titleOrContent = ".*?(?i)"+titleOrContent+".*";
			topic = topicRepository.findByTitleRegexOrContentRegex(titleOrContent,titleOrContent, pageable);
		}
		return topic;
	}
	/**
	 * 初始化 建立2d位置索引
	 * @param racBeinfo
	 */
	public void creatTable() {		
		mongoTemplate.indexOps(Topic.class).ensureIndex( new GeospatialIndex("position") );
	}
	
	/**
	 * 上传主题文件，并返回主题文件的网络访问地址
	 * @param file
	 * @return
	 * @throws XueWenServiceException
	 */
	public FileStoreInfo uploadFile( MultipartFile file)throws XueWenServiceException{
		if (null != file && !file.isEmpty()) {
			String suffile=String.valueOf(System.currentTimeMillis());  //文件基础路径后缀（划分多文件目录，防止一个目录下有多个目录）
			String fileLocal=getTopicPicLocal(suffile);
			String fileUrl=getTopicPicUrl(suffile);
			FileStoreInfo fif=myFileService.uploadFile(file, fileLocal,fileUrl);
			return fif;
		}
		return null;
	}
	
	/**
	 * 查询所有话题列表
	 * 
	 * @param p
	 * @return
	 * @throws XueWenServiceException 
	 */
	public Page<Topic> findAlTopic(Pageable pageable) throws XueWenServiceException {
		
		//List<Object> groupIsAll = groupService.findAllGroups();//查询所有群的话题
		Page<Topic> topic = topicRepository.findByAppKeyAndTypeAndIsDeleted("yxtapp","0",false, pageable);
		return topic;
	}
	/**
	 * 创建话题标签
	 * @param tagName
	 * @return
	 */
	public UserTagBean createUserTag(User user,Topic topic,String tagName){
		UserTagBean utb = new UserTagBean();
		utb.setUserId(user.getId());
		utb.setUserName(user.getUserName());
		utb.setItemId(topic.getTopicId());
		utb.setItemType("4");
		utb.setCtime(String.valueOf(System.currentTimeMillis()));
		utb.setTagName(tagName);
		return utb;
		
	}
	
	public long getCountsByGroupId(String groupId){
		return topicTemplate.getCountsByGroupId(groupId);
	}
	
	/**
	 * 查询附近的话题
	 * 
	 * @param p
	 * @return
	 */
	public List<TopicResponse> findAllNearTopic(
			String userId,Point p,Distance dis) throws XueWenServiceException {
		if(null == p){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_POSITION_201,
					null);
		}
		List<Topic> topics = topicRepository.findByPositionNearAndAppKeyAndTypeAndIsDeletedAndIsGeoOpen(p,"yxtapp","0",false,true,dis);
		List<TopicResponse> topicRes = new ArrayList<TopicResponse>();
		for(int i = 0; i < topics.size(); i++){
			Topic topic = topics.get(i);
			String topicId = topic.getTopicId();
			Set<String> tagName = tagService.getTagsByItemIdItemType(topicId, "4");
			TopicResponse topicRespone = new TopicResponse(topic);
			topicRespone.setTagName(tagName);
			topicRespone.setDistance(StringUtil.Distance(p.getX(),p.getY(),topic.getLng(),topic.getLat()));
			topicRes.add(toResponse(topics.get(i)));
		}
		return topicRes;
		
	}
	/**
	 * 话题数量
	 * @return
	 */
	public long topicCount() {
		long topicCount = topicRepository.countByAppKeyAndTypeAndIsDeleted("yxtapp","0",false);
		return topicCount;
	}
	
	/**
	 * 小组解散后将小组下的话题调整成删除
	 * @param groupId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public void changeTopicByGroupId(String groupId) throws XueWenServiceException {
		List<Topic> topics = topicRepository.findBySourceIdAndAppKeyAndIsDeleted(groupId,"yxtapp", false);
		Topic topic = null;
		if(topics != null && topics.size() > 0){
			for(int i = 0; i < topics.size(); i++){
				topic = topics.get(i);
				topic.setDeleted(true);
				topicRepository.save(topic);
			}
			
		}
	}
	
	
	/**
	 * 
	 * @Title: setTopicBarCode
	 * @Description: 给话题添加二维码地址
	 * @param topicId
	 * @param url
	 * @throws XueWenServiceException void
	 * @throws
	 */
	public void setTopicBarCode(String topicId,String url) throws XueWenServiceException {
		if(StringUtil.isBlank(url)){
			throw new XueWenServiceException(Config.STATUS_201,
					Config.MSG_KNGMODIFY_201, null);
		}
		
	Topic topic=topicRepository.findOne(topicId);
	topic.setBarCode(url);
	topicRepository.save(topic);	
	}
	
	
	/**
	 * 
	 * @Title: setTopicBarCode
	 * @Description: 给话题添加二维码地址
	 * @param topicId
	 * @param url
	 * @throws XueWenServiceException void
	 * @throws
	 */
	public Topic updateTopic(Topic topic) throws XueWenServiceException {
		 
	 
	return topicRepository.save(topic);	
	}
	/**
	 * 
	 * @Title: addFal
	 * @Description: 收藏数量加1
	 * @param id void
	 * @throws
	 */
	public void addFal(String id){
		Topic topic=topicRepository.findOne(id);
		topic.setFavoritesCount(topic.getFavoritesCount()+1);
		topicRepository.save(topic);
	}
	
	
}
