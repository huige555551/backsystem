package operation.controller.oss;

import java.net.URLDecoder;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import operation.OssController;
import operation.exception.XueWenServiceException;
import operation.pojo.drycargo.Drycargo;
import operation.pojo.drycargo.DrycargoResponse;
import operation.pojo.user.User;
import operation.service.drycargo.DrycargoService;
import tools.Config;
import tools.ResponseContainer;

@RestController
@RequestMapping("/oss/dry")
@Configuration
public class OssDryController extends OssController {

	@Autowired
	public DrycargoService drycargoService;

	public OssDryController() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * 查询干货详情（从小组课堂查看干货详情）
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/getOneDry")
	public @ResponseBody ResponseContainer getOneDry(HttpServletRequest request)
			throws XueWenServiceException {
		try {
			String dryCargoId = request.getParameter("dryid");
			Drycargo db = drycargoService.findOneById(dryCargoId);

			return addResponse(Config.STATUS_200, Config.MSG_200, db,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询干货详情（从小组课堂查看干货详情）
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/updateOne")
	public @ResponseBody ResponseContainer updateOne(HttpServletRequest request)
			throws XueWenServiceException {
		try {
			String dryCargoId = request.getParameter("dryid");
			String fileUrl = request.getParameter("fileUrl");
			
			fileUrl = URLDecoder.decode(fileUrl,"utf-8");
			
			String message = request.getParameter("message");
			
			Drycargo db = drycargoService.findOneById(dryCargoId);
			
			db.setFileUrl(fileUrl);
			db.setMessage(message);
			
			drycargoService.saveDrycargo(db);

			return addResponse(Config.STATUS_200, Config.MSG_200, true,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}

}
