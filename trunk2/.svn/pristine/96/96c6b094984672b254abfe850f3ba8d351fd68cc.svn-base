package operation.controller.user;

import java.io.IOException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;
import operation.BaseController;
import operation.exception.XueWenServiceException;
import operation.pojo.course.UserCourse;
import operation.pojo.drycargo.UserDrycargoBean;
import operation.pojo.industry.IndustryBean;
import operation.pojo.pub.QueryModel;
import operation.pojo.user.ContactAdress;
import operation.pojo.user.OpenFireUser;
import operation.pojo.user.ResponsePcUser;
import operation.pojo.user.ResponseUser;
import operation.pojo.user.ResponseUserFriendShip;
import operation.pojo.user.User;
import operation.pojo.user.UserMessage;
import operation.pojo.user.UserName;
import operation.pojo.user.UserStudyResult;
import operation.service.course.UserCourseService;
import operation.service.drycargo.UserDrycargoService;
import operation.service.file.MyFileService;
import operation.service.group.GroupService;
import operation.service.jobs.IndustryService;
import operation.service.openfire.OpenFireUserService;
import operation.service.queue.QueueService;
import operation.service.sms.SmsService;
import operation.service.user.ContactUserService;
import operation.service.user.UserContactListService;
import operation.service.user.UserFriendShipService;
import operation.service.user.UserInviteService;
import operation.service.user.UserNameService;
import operation.service.user.UserNumService;
import operation.service.user.UserPcService;
import operation.service.user.UserService;
import operation.service.user.UserStudyResultService;
import operation.service.util.ObjCopyPropsService;
import operation.service.version.VersionService;

import org.apache.log4j.Logger;
import org.jivesoftware.smack.util.StringUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.geo.Distance;
import org.springframework.data.geo.Point;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import tools.Config;
import tools.JSON2ObjUtil;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;
import tools.StringUtil;

@RestController
@RequestMapping("/user")
@Configuration
/**
 * 用户信息Controller,用于接受客户端传递
 * 的数据，进行用户相关操作
 * @author nes
 *
 */
public class UserController extends BaseController {
	private static final Logger logger=Logger.getLogger(UserController.class);
	
	@Inject Environment env;
	
	@Autowired
	public UserService userService;
	
	@Autowired
	public UserPcService userPcService;

	@Autowired
	public OpenFireUserService openFireUserService;
	
	@Autowired
	public ObjCopyPropsService objCopyPropsService;
	
	@Autowired
	public QueueService queueService;
	
	@Autowired
	public UserNumService userNumService;   //20140911 新增创建用户时，创建用户号
	@Autowired
	public MyFileService myFileService;
	
	@Autowired
	public UserContactListService userContactListService;
	
	@Autowired
	public UserFriendShipService  userFriendShipService;
	
	@Autowired
	public IndustryService industryService;
	
	@Autowired
	public UserCourseService userCourseService;
	
	@Autowired
	public GroupService groupService;
	
	@Autowired
	public VersionService versionService;
	
	@Autowired
	public UserInviteService userInviteService;
	
	@Autowired
	public UserStudyResultService userStudyResultService;
	
	@Autowired
	public SmsService smsService;
	
	@Autowired
	private ContactUserService contactUserService;
	
	@Autowired
	private UserDrycargoService userDrycargoService;
	
	@Autowired
	private UserNameService userNameService;
	
	public UserController() {
		super();
	}
	@Value("${tag.service.url}")
	private String tagServiceUrl;
	/**
	 * 初始化用户map
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("initValidUser")
	public @ResponseBody ResponseContainer initValidUser() {
		List<User> onlineUser = userService.onlineUsers();

		for (int i = 0; i < onlineUser.size(); i++) {
			if (System.currentTimeMillis() < onlineUser.get(i).getExpireTime()) {
				Config.map.put(onlineUser.get(i).getToken(), onlineUser.get(i));
			}

		}

		return null;
	}
	/**
	 * 刷新用户map将过期用户过滤掉
	 * @return
	 */
	@RequestMapping("refreshValidUser")
	public @ResponseBody ResponseContainer refreshValidUser() {
		List<User> onlineUser = userService.onlineUsers();

		for (int i = 0; i < onlineUser.size(); i++) {
			if (System.currentTimeMillis() >= onlineUser.get(i).getExpireTime()) {
				Config.map.remove(onlineUser.get(i).getToken());
			}
		}

		return null;
	}
	/**
	 * 创建用户表，用于保存地理坐标二维数组
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/createtable")
	public  void createTable(){
		try {
			userService.creatTable();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	/**
	 * 用户注册
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="regist", method=RequestMethod.POST)
	public @ResponseBody ResponseContainer regist(HttpServletRequest request,User user) {
		try {
			//20140811,增加地理坐标
			String lat = request.getParameter("lat"); //维度
			String lng = request.getParameter("lng");//精度
			String robot = request.getParameter("robot");//机器人标志
			user=userService.regist(user,lat,lng,robot);// 调用service进行用户注册，并返回注册结果
			user.setLogintime(System.currentTimeMillis());// 获得登陆时间
			// 调用登录
			User loginUser = userService.login(user);
			return addResponse(Config.STATUS_200,Config.MSG_LOGIN_200,loginUser,Config.RESP_MODE_10,"");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("=========创建用户业务错误："+e);
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			logger.error("=========创建用户系统错误："+e);
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	/**
	 * 用户注册pc
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="registPc", method=RequestMethod.POST)
	public @ResponseBody ResponseContainer registPc(HttpServletRequest request,User user) {
		try {
			user=userPcService.registPc(user);// 调用service进行用户注册，并返回注册结果
			// 调用登录
			ResponsePcUser loginUser = userPcService.loginPc(user);
			return addResponse(Config.STATUS_200,Config.MSG_LOGIN_200,loginUser,Config.RESP_MODE_10,"");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	/**
	 * 与群组关联注册用户
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="registByGroup", method=RequestMethod.POST)
	public @ResponseBody ResponseContainer registByGroup(HttpServletRequest request,User user,String groupNumber) {
//		String groupId=request.getParameter("groupId");
		try {
			user=userPcService.registByGroupId(user,groupNumber);// 调用service进行用户注册，并返回注册结果
			user.setLogintime(System.currentTimeMillis());// 获得登陆时间
			// 调用登录
			ResponsePcUser loginUser = userPcService.loginPc(user);
			return addResponse(Config.STATUS_200,Config.MSG_LOGIN_200,loginUser,Config.RESP_MODE_10,"");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	/**
	 * 获取所有行业名称新版
	 * @param request
	 * @return
	 */
	@RequestMapping("industry")
	public  ResponseContainer getAllIndustry(HttpServletRequest request) {
			try {
				List<IndustryBean> list =industryService.getAllNewIndustry();
				return addResponse(Config.STATUS_200,Config.MSG_200,list,Config.RESP_MODE_10,"");
			} catch (XueWenServiceException ex) {
				ex.printStackTrace();
				return addResponse(ex.getCode(),ex.getMessage(),false,Config.RESP_MODE_10,"");
			}
			catch(Exception e)
			{
				e.printStackTrace();
				return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
			}		
	}
	
	/**
	 * 获取某个行业对应的行业方向新版
	 * @param request
	 * @return
	 */
	@RequestMapping("indirect")
	public  ResponseContainer getAllIndustDirectById(String directId,HttpServletRequest request) {
			try {
				if(!StringUtil.isBlank(directId))
				{
					IndustryBean bean =industryService.getInduDirect(directId);
					return addResponse(Config.STATUS_200,Config.MSG_200,bean.indDirectList,Config.RESP_MODE_10,"");
				}
				else
				{
					return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
				}
				
				
			} catch (XueWenServiceException ex) {
				ex.printStackTrace();
				return addResponse(ex.getCode(),ex.getMessage(),false,Config.RESP_MODE_10,"");
			}
			catch(Exception e)
			{
				e.printStackTrace();
				return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
			}		
	}
	
	
	/**
	 * 用户登录
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("login")
	public @ResponseBody ResponseContainer login(HttpServletRequest request,
			User user) {
		try {
			//20140811,增加地理坐标
			String lat = request.getParameter("lat"); //维度
			String lng = request.getParameter("lng");//精度
			if(null !=lat && null != lng){
				double [] position = new double[]{Double.parseDouble(lng),Double.parseDouble(lat)};
				user.setLng(Double.parseDouble(lng));
				user.setLat(Double.parseDouble(lat));
				user.setLocation(position);
			}
			long nowTime = System.currentTimeMillis();// 获取系统时间戳
			user.setLogintime(nowTime);
			User loginUser = userService.login(user);
			return addResponse(Config.STATUS_200,Config.MSG_LOGIN_200,loginUser,Config.RESP_MODE_10,"");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	/**
	 * 用户登录pc
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("loginPc")
	public @ResponseBody ResponseContainer loginPc(HttpServletRequest request,
			User user) {
		try {
			//20140811,增加地理坐标
			String lat = request.getParameter("lat"); //维度
			String lng = request.getParameter("lng");//精度
			if(null !=lat && null != lng){
				double [] position = new double[]{Double.parseDouble(lng),Double.parseDouble(lat)};
				user.setLng(Double.parseDouble(lng));
				user.setLat(Double.parseDouble(lat));
				user.setLocation(position);
			}
			long nowTime = System.currentTimeMillis();// 获取系统时间戳
			user.setLogintime(nowTime);
			ResponsePcUser loginUser = userPcService.loginPc(user);
			return addResponse(Config.STATUS_200,Config.MSG_LOGIN_200,loginUser,Config.RESP_MODE_10,"");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	/**
	 * 用户退出
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("loginOut")
	public @ResponseBody ResponseContainer loginOut(HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String lat = request.getParameter("lat"); //维度
			String lng = request.getParameter("lng");//精度
			if(null !=lat && null != lng){
				double [] position = new double[]{Double.parseDouble(lng),Double.parseDouble(lat)};
				
				currentUser.setLng(Double.parseDouble(lng));
				currentUser.setLat(Double.parseDouble(lat));
				
				currentUser.setLocation(position);
				}
			userService.loginOut(currentUser);
			return addResponse(Config.STATUS_200,Config.MSG_OUT_200,true,Config.RESP_MODE_10,"");
		} 
		catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	/**
	 * 获得当前登录用户
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("checkLogin")
	public @ResponseBody ResponseContainer checkLogin(
			HttpServletRequest request, User user) {
		try{
			User loginUser = userService.checkLogin(user);
		return addResponse(Config.STATUS_200,Config.MSG_CHECK_200,loginUser,Config.RESP_MODE_10,"");
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}

	/**
	 * 根据用户ID 查询用户信息
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/one/{id}")
	// @Cacheable()
	public @ResponseBody ResponseContainer findUser(HttpServletRequest request,@PathVariable("id") String id) {
		try{
			String token=request.getParameter("token");
			User currentUser=this.getCurrentUser(token);
			User user = userService.findUser(id);
			ResponseUser respUser = new ResponseUser(user);
			if(id.equals(currentUser.getId())){
				respUser.setContactStatus(10);
			}else{
				respUser.setContactStatus(contactUserService.contact(currentUser.getId(), id));
			}
			//获得该用户粉丝与关注人的数量
			respUser.setAttentionCount(contactUserService.getUserContact(currentUser.getId(), "1"));
			respUser.setFollowerCount(contactUserService.getUserContact(currentUser.getId(), "0"));
			return addResponse(Config.STATUS_200,Config.MSG_200,respUser,Config.RESP_MODE_10,"");
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
		
	}
	/**
	 * 根据用户ID 查询用户信息pc
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/onePc/{id}")
	// @Cacheable()
	public @ResponseBody ResponseContainer findUserPc(
			@PathVariable("id") String id) {
		try{
			ResponsePcUser respUser = userPcService.findUserPc(id);
			
		return addResponse(Config.STATUS_200,Config.MSG_200,respUser,Config.RESP_MODE_10,"");
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
		
	}
	/**
	 * 用户更新
	 * 
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping(value="/update/{id}",method=RequestMethod.POST)
	public @ResponseBody ResponseContainer updateUser(@PathVariable("id") String id, HttpServletRequest request,User user) {
		User oldUser = null;
		try{
			String token =  request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			if(!currentUser.getId().equals(id)){
				throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
			}
			oldUser = userService.findUser(id);
			user.setId(id);
			//将请求参数中USER的属性拷贝入OLDUSER
			oldUser=(User)objCopyPropsService.copyPropertiesExclude(user, oldUser, new String[]{"username","ctime","expiretime","logintime","usernumber","password"});
			String lat = request.getParameter("lat"); //维度
			String lng = request.getParameter("lng");//精度
			if(null !=lat && null != lng){
				double [] position = new double[]{Double.parseDouble(lng),Double.parseDouble(lat)};
				oldUser.setLng(Double.parseDouble(lng));
				oldUser.setLat(Double.parseDouble(lat));
				oldUser.setLocation(position);
			}
			//处理感兴趣字段
			String interest = request.getParameter("interest");
			//处理擅长字段
			String special = request.getParameter("special");
			//处理方向字段
			String industry = request.getParameter("industry");
			user = userService.updateUser(oldUser,interest,special,industry);
			ResponseUser ru=new ResponseUser(user);
			return addResponse(Config.STATUS_200,Config.MSG_UPDATE_200,ru,Config.RESP_MODE_10,"");
		}catch(XueWenServiceException e){
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		}catch(Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	/**
	 * 根据用户ID 查询用户推送列表信息
	 * 支持分页及排序
	 * @param id
	 * @return
	 */
	@RequestMapping("message")
	public @ResponseBody ResponseContainer findUserMessage(
			HttpServletRequest request) {
		try{
			String pageNumber = request.getParameter("n");
			String pageSize = request.getParameter("s");
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");		
			if (StringUtil.isEmpty(sort)) {
				sort = "stime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "DESC";
			}
			Direction d = Direction.DESC;
			if(mode.equalsIgnoreCase("ASC")){
				d = Direction.ASC;
			}
			Sort st = new Sort(d,sort);
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			
			Pageable pageable = null;
			if (!StringUtils.isNullOrEmpty(pageNumber)
					&& !StringUtils.isNullOrEmpty(pageSize)) {
				pageable = new PageRequest(Integer.parseInt(pageNumber),
						Integer.parseInt(pageSize),st);
			} else {
				pageable = new PageRequest(Integer.parseInt("0"),
						Integer.parseInt("10"),st);
			}
			Page<UserMessage> userMessagePage = userService.findUserMessage(currentUser, pageable);
			//将消息全部改为已读
			userService.updateAllRead(userMessagePage.getContent());
			if (userMessagePage.getTotalElements() == 0) {
				rsData.setCurr_page(userMessagePage.getNumber());
				int curr_rows=userMessagePage.getNumber()*userMessagePage.getSize();
				if(curr_rows>userMessagePage.getTotalElements()){
					curr_rows=new Long(userMessagePage.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(userMessagePage.getNumber() + 1);
				int curr_rows=(userMessagePage.getNumber()+1)*userMessagePage.getSize();
				if(curr_rows>userMessagePage.getTotalElements()){
					curr_rows=new Long(userMessagePage.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(userMessagePage.getTotalElements());
			rsData.setPage_rows(userMessagePage.getTotalPages());
			rsData.setResult(userMessagePage.getContent());
		   return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
			
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
		
	}
	
	/**
	 * 根据用户消息ID删除用户此条消息
	 * @param request
	 * @return
	 */
	@RequestMapping("/message/delete")
	public @ResponseBody ResponseContainer deleteUserMessage(HttpServletRequest request) {
		String userMessageId = request.getParameter("id");
		try {
			userService.deleteOneUserMessage(userMessageId);
			return addResponse(Config.STATUS_200, Config.MSG_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	 
	
	/**
	 * 根据用户消息ID 查询用户推送信息详情
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/message/{id}")
	public @ResponseBody ResponseContainer findOneUserMessage(
			HttpServletRequest request, @PathVariable("id") String id) {
		try {
			UserMessage userMessage = userService.findOneUserMessage(id);
			return addResponse(Config.STATUS_200, Config.MSG_200, userMessage,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 根据用户消息ID 查询用户推送信息详情
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("test")
	public @ResponseBody ResponseContainer test1(){
		try {
			queueService.getWork();
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			return null;
	}
	
	/**
	 * 查询附近的人
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("nearUser")
	public @ResponseBody ResponseContainer findAllNearGroup(
			HttpServletRequest request) {
		try {
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");	
			if (StringUtil.isEmpty(sort)) {
				sort = "ctime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "ASC";
			}
			Direction d = Direction.ASC;
			if(mode.equalsIgnoreCase("DESC")){
				d = Direction.DESC;
			}
			Sort st = new Sort(d,sort);
			
			String lat = request.getParameter("lat"); //维度
			String lng = request.getParameter("lng");//精度
			Point p = null;
			Distance distance = null;
			if(null!=lat && null!= lng){
			 p = new Point(Double.parseDouble(lng),Double.parseDouble(lat));
			 distance = new Distance(1);
			
			}
			List<ResponseUser> user = userService.findAllNearUser(st,p,distance);
			this.rsData.setResult(user);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，查询附近的人==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，查询附近的人==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 发送短信验证码
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("sendSms")
	public @ResponseBody ResponseContainer sendSms(HttpServletRequest request){
		try {
			String phoneNumber = request.getParameter("phoneNumber");
			String type=request.getParameter("type");
			smsService.sendSms(phoneNumber, type);
			return addResponse(Config.STATUS_200,Config.MSG_SENDSMSSUCCESS_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			logger.error("=========== 业务错误，发送短信验证码==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}catch (Exception e) {
			logger.error("===========未知错误，发送短信验证码==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 验证短信验证码
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("checkSms")
	public @ResponseBody ResponseContainer checkSms(HttpServletRequest request){
		String phoneNumber = request.getParameter("phoneNumber");
		String smsCode = request.getParameter("smsCode");
		String type=request.getParameter("type");
		try {
			if(StringUtil.isEmpty(phoneNumber) || !StringUtil.isMobileNO(phoneNumber)){
				throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NOTMOBILE_201,null);
			}
			if(StringUtil.isEmpty(smsCode) || !StringUtil.isMsgCode(smsCode)){
				throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NOMSGCODE_201,null);
			}
		//	userService.checkSms(phoneNumber,smsCode);
			smsService.checkSms(phoneNumber, type, smsCode);
			return addResponse(Config.STATUS_200, Config.MSG_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			logger.error("===========业务错误，验证短信验证码失败==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			logger.error("===========未知错误，验证短信验证码失败==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 重置密码
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("resetPassword")
	public @ResponseBody ResponseContainer resetPassword(HttpServletRequest request){
		String passWord = request.getParameter("passWord");
		//String confirmPassWrod = request.getParameter("confirmPassWrod");
		//String udid = request.getParameter("udid");
		String phoneNumber = request.getParameter("phoneNumber");
		try {
			if(StringUtil.isEmpty(phoneNumber) || !StringUtil.isMobileNO(phoneNumber)){
				throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NOTMOBILE_201,null);
			}
			boolean result = userService.resetPassword(passWord,phoneNumber);
			return addResponse(Config.STATUS_200, Config.MSG_RESTPASSWORD_200, result,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			logger.error("===========业务错误，找回密码失败==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			logger.error("===========未知错误，找回密码失败==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 用户通讯录上传
	 * @param request
	 * @return
	 */
	@RequestMapping("uploadContacts")
	public @ResponseBody ResponseContainer uploadContacts(HttpServletRequest request){
		String contacts=request.getParameter("contacts");
		String token = request.getParameter("token");
		try {
			User currentUser = this.getCurrentUser(token);
			userContactListService.getContacts(contacts,currentUser.getUserName(),currentUser.getId());
			return addResponse(Config.STATUS_200, Config.MSG_200, true,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			logger.error("===========未知错误，用户通讯录上传失败==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，用户通讯录上传失败==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 获取用户联系人列表
	 * @param request
	 * @return
	 */
	@RequestMapping("friendShip")
	public @ResponseBody ResponseContainer friendShip(HttpServletRequest request){
		String token = request.getParameter("token");
		try {
			User currentUser = this.getCurrentUser(token);
			ResponseUserFriendShip rspUserFriendShip=userFriendShipService.getResponseUserFriendShip(currentUser);
			return addResponse(Config.STATUS_200, Config.MSG_200, rspUserFriendShip,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			logger.error("===========业务错误，获取用户联系人失败==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，获取用户联系人失败==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	
	@RequestMapping("httpTest")
	public @ResponseBody ResponseContainer httpTest(HttpServletRequest request){
		try {
			try {
				userService.httpTest();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 用户号
	 * @param request
	 * @return
	 */
	@RequestMapping("userNumber")
	public @ResponseBody ResponseContainer userNumber(HttpServletRequest request){
		try {
			userNumService.setUserNumber();
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 修改密码
	 * @param request
	 * @return
	 */
	@RequestMapping("changePass")
	public @ResponseBody ResponseContainer changPass(HttpServletRequest request){
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String passWord = request.getParameter("passWord");
			userService.changePass(passWord, currentUser.getUdid());
			return addResponse(Config.STATUS_200, Config.MSG_TOADMIN_200, true,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			logger.error("=========== 修改失败==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 查询用户收藏且已经学完的课程
	 * @param request
	 * @return
	 */
	@RequestMapping("findCollectStudyed")
	public @ResponseBody ResponseContainer findCollect(HttpServletRequest request){
		try {
			String pageNumber = request.getParameter("n");
			String pageSize = request.getParameter("s");
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");		
			if (StringUtil.isEmpty(sort)) {
				sort = "utime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "DESC";
			}
			Direction d = Direction.DESC;
			if(mode.equalsIgnoreCase("ASC")){
				d = Direction.ASC;
			}
			Sort st = new Sort(d,sort);
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			
			Pageable pageable = null;
			if (!StringUtils.isNullOrEmpty(pageNumber)
					&& !StringUtils.isNullOrEmpty(pageSize)) {
				pageable = new PageRequest(Integer.parseInt(pageNumber),
						Integer.parseInt(pageSize),st);
			} else {
				pageable = new PageRequest(Integer.parseInt("0"),
						Integer.parseInt("10"),st);
			}
			
			Page<UserCourse> uc = 	userCourseService.findMyCollectStudyed(currentUser.getId(),pageable);
			if (uc.getTotalElements() == 0) {
				rsData.setCurr_page(uc.getNumber());
				int curr_rows=uc.getNumber()*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(uc.getNumber() + 1);
				int curr_rows=(uc.getNumber()+1)*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(uc.getTotalElements());
			rsData.setPage_rows(uc.getTotalPages());
			rsData.setResult(userCourseService.toResponseUserCourse(uc.getContent()));
		   return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
			
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	/**
	 * 查询我收藏的未学习课程
	 * @param request
	 * @return
	 */
	@RequestMapping("findCollectNoStudy")
	public @ResponseBody ResponseContainer findCollectNoStudy(HttpServletRequest request){
		try {
			String pageNumber = request.getParameter("n");
			String pageSize = request.getParameter("s");
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");		
			if (StringUtil.isEmpty(sort)) {
				sort = "utime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "DESC";
			}
			Direction d = Direction.DESC;
			if(mode.equalsIgnoreCase("ASC")){
				d = Direction.ASC;
			}
			Sort st = new Sort(d,sort);
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			
			Pageable pageable = null;
			if (!StringUtils.isNullOrEmpty(pageNumber)
					&& !StringUtils.isNullOrEmpty(pageSize)) {
				pageable = new PageRequest(Integer.parseInt(pageNumber),
						Integer.parseInt(pageSize),st);
			} else {
				pageable = new PageRequest(Integer.parseInt("0"),
						Integer.parseInt("10"),st);
			}
			
			Page<UserCourse> uc = 	userCourseService.findMyCollectNoStudy(currentUser.getId(),pageable);
			if (uc.getTotalElements() == 0) {
				rsData.setCurr_page(uc.getNumber());
				int curr_rows=uc.getNumber()*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(uc.getNumber() + 1);
				int curr_rows=(uc.getNumber()+1)*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(uc.getTotalElements());
			rsData.setPage_rows(uc.getTotalPages());
			rsData.setResult(userCourseService.toResponseUserCourse(uc.getContent()));
		   return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
			
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	/**
	 * 查询我收藏的正在学习中的课程
	 * @param request
	 * @return
	 */
	@RequestMapping("findCollectStudying")
	public @ResponseBody ResponseContainer findCollectStudying(HttpServletRequest request){
		try {
			String pageNumber = request.getParameter("n");
			String pageSize = request.getParameter("s");
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");		
			if (StringUtil.isEmpty(sort)) {
				sort = "utime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "DESC";
			}
			Direction d = Direction.DESC;
			if(mode.equalsIgnoreCase("ASC")){
				d = Direction.ASC;
			}
			Sort st = new Sort(d,sort);
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			
			Pageable pageable = null;
			if (!StringUtils.isNullOrEmpty(pageNumber)
					&& !StringUtils.isNullOrEmpty(pageSize)) {
				pageable = new PageRequest(Integer.parseInt(pageNumber),
						Integer.parseInt(pageSize),st);
			} else {
				pageable = new PageRequest(Integer.parseInt("0"),
						Integer.parseInt("10"),st);
			}
			
			Page<UserCourse> uc = 	userCourseService.findMyCollectStudying(currentUser.getId(),pageable);
			if (uc.getTotalElements() == 0) {
				rsData.setCurr_page(uc.getNumber());
				int curr_rows=uc.getNumber()*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(uc.getNumber() + 1);
				int curr_rows=(uc.getNumber()+1)*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(uc.getTotalElements());
			rsData.setPage_rows(uc.getTotalPages());
			rsData.setResult(userCourseService.toResponseUserCourse(uc.getContent()));
		   return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
			
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	/**
	 * 查询我的学习
	 * @param request
	 * @return
	 */
	@RequestMapping("findStudy")
	public @ResponseBody ResponseContainer findStudy(HttpServletRequest request){
		try {
			String pageNumber = request.getParameter("n");
			String pageSize = request.getParameter("s");
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");		
			if (StringUtil.isEmpty(sort)) {
				sort = "utime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "DESC";
			}
			Direction d = Direction.DESC;
			if(mode.equalsIgnoreCase("ASC")){
				d = Direction.ASC;
			}
			Sort st = new Sort(d,sort);
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			
			Pageable pageable = null;
			if (!StringUtils.isNullOrEmpty(pageNumber)
					&& !StringUtils.isNullOrEmpty(pageSize)) {
				pageable = new PageRequest(Integer.parseInt(pageNumber),
						Integer.parseInt(pageSize),st);
			} else {
				pageable = new PageRequest(Integer.parseInt("0"),
						Integer.parseInt("10"),st);
			}
			
			Page<UserCourse> uc = 	userCourseService.findMyStudy(currentUser.getId(),pageable);
			if (uc.getTotalElements() == 0) {
				rsData.setCurr_page(uc.getNumber());
				int curr_rows=uc.getNumber()*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(uc.getNumber() + 1);
				int curr_rows=(uc.getNumber()+1)*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(uc.getTotalElements());
			rsData.setPage_rows(uc.getTotalPages());
			rsData.setResult(uc.getContent());
		   return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
			
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}

	/**
	 * 查询我的学习中正在学习的技能
	 * @param request
	 * @return
	 */
	@RequestMapping("findStudying")
	public @ResponseBody ResponseContainer findStudying(HttpServletRequest request){
		try {
			String pageNumber = request.getParameter("n");
			String pageSize = request.getParameter("s");
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");		
			if (StringUtil.isEmpty(sort)) {
				sort = "utime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "DESC";
			}
			Direction d = Direction.DESC;
			if(mode.equalsIgnoreCase("ASC")){
				d = Direction.ASC;
			}
			Sort st = new Sort(d,sort);
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			
			Pageable pageable = null;
			if (!StringUtils.isNullOrEmpty(pageNumber)
					&& !StringUtils.isNullOrEmpty(pageSize)) {
				pageable = new PageRequest(Integer.parseInt(pageNumber),
						Integer.parseInt(pageSize),st);
			} else {
				pageable = new PageRequest(Integer.parseInt("0"),
						Integer.parseInt("10"),st);
			}
			
			Page<UserCourse> uc = 	userCourseService.findMyStudying(currentUser.getId(),pageable);
			if (uc.getTotalElements() == 0) {
				rsData.setCurr_page(uc.getNumber());
				int curr_rows=uc.getNumber()*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(uc.getNumber() + 1);
				int curr_rows=(uc.getNumber()+1)*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(uc.getTotalElements());
			rsData.setPage_rows(uc.getTotalPages());
			rsData.setResult(userCourseService.toResponseUserCourse(uc.getContent()));
		   return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	/**
	 * 查询我的学习中已经学完的课程
	 * @param request
	 * @return
	 */
	@RequestMapping("findStudyed")
	public @ResponseBody ResponseContainer findStudyed(HttpServletRequest request){
		try {
			String pageNumber = request.getParameter("n");
			String pageSize = request.getParameter("s");
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");		
			if (StringUtil.isEmpty(sort)) {
				sort = "utime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "DESC";
			}
			Direction d = Direction.DESC;
			if(mode.equalsIgnoreCase("ASC")){
				d = Direction.ASC;
			}
			Sort st = new Sort(d,sort);
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			
			Pageable pageable = null;
			if (!StringUtils.isNullOrEmpty(pageNumber)
					&& !StringUtils.isNullOrEmpty(pageSize)) {
				pageable = new PageRequest(Integer.parseInt(pageNumber),
						Integer.parseInt(pageSize),st);
			} else {
				pageable = new PageRequest(Integer.parseInt("0"),
						Integer.parseInt("10"),st);
			}
			
			Page<UserCourse> uc = 	userCourseService.findMyStudyed(currentUser.getId(),pageable);
			if (uc.getTotalElements() == 0) {
				rsData.setCurr_page(uc.getNumber());
				int curr_rows=uc.getNumber()*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(uc.getNumber() + 1);
				int curr_rows=(uc.getNumber()+1)*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(uc.getTotalElements());
			rsData.setPage_rows(uc.getTotalPages());
			rsData.setResult(userCourseService.toResponseUserCourse(uc.getContent()));
		   return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
			
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	/**
	 * 删除我的收藏
	 * @param request
	 * @return
	 */
	@RequestMapping("deleCollect")
	public @ResponseBody ResponseContainer deleCollect(HttpServletRequest request){
		try{
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		String courseId = request.getParameter("courseId");
		userCourseService.deleFav(courseId,currentUser.getId());
		return addResponse(Config.STATUS_200, Config.MSG_200, true,Config.RESP_MODE_10, "");
	} catch (XueWenServiceException e) {
		e.printStackTrace();
		logger.error("==========业务错误，根据群组ID查询群成员列表失败============"+e);
		return addResponse(e.getCode(), e.getMessage(), false,
				Config.RESP_MODE_10, "");
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("==========未知错误，根据群组ID查询群成员列表失败============"+e);
		return addResponse(Config.STATUS_505, Config.MSG_505, false,
				Config.RESP_MODE_10, "");
	}
	}
	
	/**
	 * 获取用户邀请列表
	 * @param request
	 * @return
	 */
	@RequestMapping("friend")
	public @ResponseBody ResponseContainer friend(HttpServletRequest request){
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String groupId=request.getParameter("groupId");
			List<ContactAdress> ucs=userContactListService.getUserContact(currentUser.getId(),groupId);
			return addResponse(Config.STATUS_200, Config.MSG_200, ucs,Config.RESP_MODE_10, "");
			}catch (XueWenServiceException e) {
					// TODO Auto-generated catch block
				e.printStackTrace();
				return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
			} catch (Exception e){
				e.printStackTrace();
				return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
			}
	}
	
	/**
	 * 邀请社交圈好友加入某一群
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/invite")
	public @ResponseBody ResponseContainer invite(HttpServletRequest request) {
		try {
			String groupId = request.getParameter("groupId");
			String invitedUserId=request.getParameter("invitedUserId");
			String token = request.getParameter("token");
			Map<String,String> extra=new HashMap<String, String>();
			extra.put("type","1001");
			User currentUser = this.getCurrentUser(token);
			//获得被邀请的用户
			groupService.invite(groupId,invitedUserId,currentUser,extra);
			return addResponse(Config.STATUS_200, Config.MSG_INVITEJOINGROUP_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，管理员同意加入群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，管理员同意加入群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 邀请通讯录已注册好友加入群组
	 * @author hjn
	 * 
	 */
	@RequestMapping("/inviteUserJoinGroup")
	public @ResponseBody ResponseContainer inviteUserJoinGroup(HttpServletRequest request) {
		try {
			String groupId = request.getParameter("groupId");
			String phoneNumber=request.getParameter("phoneNumber");
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			groupService.inviteUserJoinGroup(groupId, phoneNumber, currentUser);
			return addResponse(Config.STATUS_200, Config.MSG_INVITEJOINGROUP_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，管理员同意加入群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，管理员同意加入群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 邀请通讯录好友加入某一群/或注册使用APP(非注册用户)
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/inviteFriend")
	public @ResponseBody ResponseContainer inviteFriend(HttpServletRequest request) {
		try {
			String phoneNumber = request.getParameter("phoneNumber");
			String name = request.getParameter("name");
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String groupId = request.getParameter("groupId");
			//将该联系写入到邀请对象中
			userInviteService.saveUserInvite(currentUser,phoneNumber,name,groupId);
			return addResponse(Config.STATUS_200, Config.MSG_INVITE_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("=========== 业务错误，发送短信验证码==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，发送短信验证码==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	@RequestMapping("/studyResult")
	public @ResponseBody ResponseContainer studyResult(HttpServletRequest request) {
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		try {
			UserStudyResult userStudyResult=userStudyResultService.findByUserId(currentUser.getId());
			return addResponse(Config.STATUS_200, Config.MSG_200, userStudyResult,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("=========== 业务错误，发送短信验证码==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，发送短信验证码==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	
	
	
	/**
	 * 查询我的收藏
	 * @param request
	 * @return
	 */
	@RequestMapping("findCollect")
	public @ResponseBody ResponseContainer findMyCollect(HttpServletRequest request){
		try {
			String pageNumber = request.getParameter("n");
			String pageSize = request.getParameter("s");
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");		
			if (StringUtil.isEmpty(sort)) {
				sort = "utime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "DESC";
			}
			Direction d = Direction.DESC;
			if(mode.equalsIgnoreCase("ASC")){
				d = Direction.ASC;
			}
			Sort st = new Sort(d,sort);
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			
			Pageable pageable = null;
			if (!StringUtils.isNullOrEmpty(pageNumber)
					&& !StringUtils.isNullOrEmpty(pageSize)) {
				pageable = new PageRequest(Integer.parseInt(pageNumber),
						Integer.parseInt(pageSize),st);
			} else {
				pageable = new PageRequest(Integer.parseInt("0"),
						Integer.parseInt("10"),st);
			}
			
			Page<UserCourse> uc = 	userCourseService.findMyCollect(currentUser.getId(),pageable);
			if (uc.getTotalElements() == 0) {
				rsData.setCurr_page(uc.getNumber());
				int curr_rows=uc.getNumber()*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(uc.getNumber() + 1);
				int curr_rows=(uc.getNumber()+1)*uc.getSize();
				if(curr_rows>uc.getTotalElements()){
					curr_rows=new Long(uc.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(uc.getTotalElements());
			rsData.setPage_rows(uc.getTotalPages());
			rsData.setResult(uc.getContent());
		   return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
			
		}catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	/**
	 * 更新用户通讯录
	 * @param request
	 * @return
	 */
	@RequestMapping("updateContacts")
	public @ResponseBody ResponseContainer updateContacts(HttpServletRequest request){
		try {
			String contacts=request.getParameter("contacts");
			String token = request.getParameter("token");
			String groupId = request.getParameter("groupId");
			User currentUser = this.getCurrentUser(token);
			List<ContactAdress> ucs = userContactListService.updateUserContact(contacts,currentUser,groupId);
			//List<UserContact> uc=userContactListService.getUserContact(currentUser, groupId);
			return addResponse(Config.STATUS_200, Config.MSG_200, ucs,Config.RESP_MODE_10, "");
			}catch (XueWenServiceException e) {
					// TODO Auto-generated catch block
				e.printStackTrace();
				return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
			} catch (Exception e){
				e.printStackTrace();
				return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
			}
	}
	
	/**
	 * 给用户打标签
	 * @param request
	 * @return
	 */
	@RequestMapping("tagUser")
	public @ResponseBody ResponseContainer tagUser(HttpServletRequest request){
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		String userId = request.getParameter("userId");
		String tagName = request.getParameter("tagName");
		if(!StringUtil.isBlank(tagName)){
			tagName = JSON2ObjUtil.getArrayFromString(tagName);
			RestTemplate restTemplate=new RestTemplate();
			restTemplate.getForObject(tagServiceUrl+"tag/createTagBatch?domain="+"yxtapp"+"&itemId="+userId+"&userId="+currentUser.getId()+"&userName="+currentUser.getNickName()+"&itemType="+1+"&tagNames="+tagName, String.class);
		}
		return addResponse(Config.STATUS_200, Config.MSG_200, true,Config.RESP_MODE_10, "");
	}
	
	/**
	 * 查询我的干货收藏
	 * @param request
	 * @return
	 */
	@RequestMapping("findDryCollect")
	public @ResponseBody ResponseContainer findDryCollect(HttpServletRequest request,QueryModel dm){
		try {
            String token = request.getParameter("token");
            User currentUser = this.getCurrentUser(token);
			//根据请求参数封装一个分页信息对象
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<UserDrycargoBean> udb = userDrycargoService.findDryCollect(currentUser.getId(),pageable);
			ReponseDataTools.getClientReponseData(rsData, udb);
			this.rsData.setResult(udb.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 搜索用户
	 * @param request
	 * @return
	 */
	
	@RequestMapping("/search")
	public @ResponseBody ResponseContainer search(HttpServletRequest request,QueryModel dm) {
		
		try {
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			String keywords = request.getParameter("keywords");
			Page<User> users = userService.search(keywords,pageable);
			ReponseDataTools.getClientReponseData(rsData, users);
			this.rsData.setResult((userService.toResponseUser(users.getContent())));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @Title: findDryCollect
	 * @Description: 分页查询所有用户
	 * @param request
	 * @param dm
	 * @return ResponseContainer
	 * @throws 
	 */
	@RequestMapping("findUserPage")
	public @ResponseBody ResponseContainer findUserPage(HttpServletRequest request,QueryModel dm){
		try {
			//根据请求参数封装一个分页信息对象
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<User> users = userService.findUserPage(pageable);
			ReponseDataTools.getClientReponseData(rsData, users);
			//减少返回值
			List<User> userList = users.getContent();
			List<ResponsePcUser> responsePcUserList = new ArrayList<ResponsePcUser>();
			for (User user : userList) {
				ResponsePcUser responsePcUser = new ResponsePcUser(user.getId(), user.getUserName()
						, user.getToken(), user.getUdid(), user.getNickName(), user.getLogoURL());
				responsePcUserList.add(responsePcUser);
			}
			this.rsData.setResult(responsePcUserList);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 删除我的干货收藏
	 * @param request
	 * @return
	 */
	@RequestMapping("deleDryCollect")
	public @ResponseBody ResponseContainer deleDryCollect(HttpServletRequest request){
		try{
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		String drycargoId = request.getParameter("drycargoId");
		userDrycargoService.deleFav(drycargoId,currentUser.getId());
		return addResponse(Config.STATUS_200, Config.MSG_DELETE_200, true,Config.RESP_MODE_10, "");
	} catch (XueWenServiceException e) {
		e.printStackTrace();
		logger.error("==========业务错误，根据群组ID查询群成员列表失败============"+e);
		return addResponse(e.getCode(), e.getMessage(), false,
				Config.RESP_MODE_10, "");
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("==========未知错误，根据群组ID查询群成员列表失败============"+e);
		return addResponse(Config.STATUS_505, Config.MSG_505, false,
				Config.RESP_MODE_10, "");
	}
	}
	
	/**
	 * 获得感兴趣标签
	 * @param request
	 * @return
	 */
	@RequestMapping("interestTag")
	public @ResponseBody ResponseContainer interestTag(HttpServletRequest request){
		RestTemplate restTemplate=new RestTemplate();
		String tag = restTemplate.getForObject(tagServiceUrl+"tag/getHotBaseTags?count="+6, String.class); 
		JSONObject objj=JSONObject.fromObject(tag);
		JSONObject obss=objj.getJSONObject("data");
		net.sf.json.JSONArray childs= obss.getJSONArray("result"); 
		return addResponse(Config.STATUS_200, Config.MSG_200, childs,Config.RESP_MODE_10, "");
	}
	

}
