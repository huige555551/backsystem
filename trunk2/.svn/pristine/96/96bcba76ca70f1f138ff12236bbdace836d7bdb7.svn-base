package operation.controller.oss;

import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;

import org.jsoup.helper.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import operation.OssController;
import operation.exception.XueWenServiceException;
import operation.pojo.course.GroupCourse;
import operation.pojo.course.NewCourse;
import operation.pojo.course.NewGroupCourse;
import operation.pojo.course.UserGroupCourse;
import operation.pojo.drycargo.Drycargo;
import operation.pojo.drycargo.DrycargoBean;
import operation.pojo.drycargo.DrycargoResponse;
import operation.pojo.group.XueWenGroup;
import operation.pojo.pub.QueryModel;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.user.User;
import operation.service.course.NewCourseService;
import operation.service.course.NewGroupCourseService;
import operation.service.course.UserGroupCourseService;
import operation.service.drycargo.DrycargoBeanService;
import operation.service.drycargo.DrycargoService;
import operation.service.group.GroupService;
import operation.service.user.UserService;
import tools.Config;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;

@RestController
@RequestMapping("/oss/course")
@Configuration
public class OssCourseController extends OssController {


	@Autowired
	private NewCourseService newCourseService;
	
	@Autowired
	private NewGroupCourseService newGroupCourseService;
	
	@Autowired
	public UserGroupCourseService userGroupCourseService;
	
	@Autowired
	public UserService userService;
	
	@Autowired
	public GroupService groupService;
	
	
	
	
	/**
	 * 
	 * @Title: getCourses
	 * @Description: 分页获取课程 yj
	 * @param request
	 * @param dm
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("/courses")
	public @ResponseBody ResponseContainer getCourses(HttpServletRequest request, QueryModel dm) {
		try {
			dm.setSort("id");

			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<NewCourse> newCourses = newCourseService.getCourses(pageable);
			ReponseDataTools.getClientReponseData(rsData, newCourses);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
		
	
	
	/**
	 * 
	 * @Title: getCourses
	 * @Description: 分页获取未分享的课程 yj
	 * @param request
	 * @param dm
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("/coursesNoShare")
	public @ResponseBody ResponseContainer coursesNoShare(HttpServletRequest request, QueryModel dm) {
		try {
			dm.setSort("id");
			List l=new ArrayList();
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<NewCourse> newCourses = newCourseService.getCourses(pageable);
			for(NewCourse n:newCourses){
				if(newGroupCourseService.isExiseByCourseId(n.getId())){
					l.add(n.getId());
				}
				
			}
			Page<NewCourse> newCoursenoshare = newCourseService.getCourseNoShare(pageable,l);
			
			ReponseDataTools.getClientReponseData(rsData, newCoursenoshare);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	
	
	
	
		
		/**
		 * 分页获取小组课堂列表
		 * @author hjn
		 * @param request
		 * @return
		 */
		@RequestMapping("/groupCourses")
		public @ResponseBody ResponseContainer groupCourses(HttpServletRequest request,QueryModel dm) {
			try {
				String groupId = request.getParameter("groupId");
				
				Pageable pageable = PageRequestTools.pageRequesMake(dm);
				Page<NewGroupCourse> newGroupCourses=newGroupCourseService.findOpenPageGroupCourseByGroupId(groupId, pageable);
				ReponseDataTools.getClientReponseData(rsData, newGroupCourses);
				this.rsData.setResult(newGroupCourseService.formateGroupCourseList(newGroupCourses.getContent()));
				return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			} catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		/**
		 * 获得某一用户课程学习列表
		 * @param request
		 * @param dm
		 * @return
		 */
		@RequestMapping("/userCourseList")
		public @ResponseBody ResponseContainer userCourseList(HttpServletRequest request,QueryModel dm) {
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			 
			String userId = request.getParameter("userId");
			try {
				Page<UserGroupCourse> userGroupCourse = userGroupCourseService.userCourseList(userId,pageable);
				ReponseDataTools.getClientReponseData(rsData, userGroupCourse);
				this.rsData.setResult(userGroupCourseService.formateUserGroupCourseRspUserFavOrStudyList(userGroupCourse.getContent()));
				return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			}catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		/**
		 * 
		 * @Title: showChapters
		 * @Description: 查询课程详情 yj
		 * @param request
		 * @return ResponseContainer
		 * @throws
		 */
		@RequestMapping("/oneCourse")
		public @ResponseBody ResponseContainer showChapters(HttpServletRequest request) {
			try {
				String courseId = request.getParameter("courseId");
				//获取到课程的章节id（list）
				NewCourse course = newCourseService.getById(courseId);
				
				return addResponse(Config.STATUS_200, Config.MSG_200, course,Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			} catch (Exception e) {
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		
		/**
		 * 搜索课程
		 * @param request
		 * @return
		 */
		
		@RequestMapping("/search")
		public @ResponseBody ResponseContainer search(HttpServletRequest request,QueryModel dm) {
			
			try {
				Pageable pageable = PageRequestTools.pageRequesMake(dm);
				String keywords = request.getParameter("keywords");
				Page<NewCourse> courses = newCourseService.search(keywords,pageable);
				ReponseDataTools.getClientReponseData(rsData, courses);
				return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			} catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		
		/**
		 * 从课程池中将课程分享到小组课堂
		 * @author hjn
		 * @param request
		 * @return
		 */
		@RequestMapping("/shareToMyGroup")
		public @ResponseBody ResponseContainer shareToMyGroup(HttpServletRequest request) {
			try {
				String groupId = request.getParameter("groupId");
				String courseId = request.getParameter("courseId");
				String appKey = request.getParameter("appKey");
				XueWenGroup group = groupService.findGroup(groupId);
				List list=group.getOwner();
				String owenrid=(String) list.get(0);
				User currentUser = userService.findUser(owenrid);
				NewGroupCourse ngc=newGroupCourseService.share(groupId, courseId,currentUser.getId(),appKey);
				return addResponse(Config.STATUS_200, Config.MSG_SHARESUCESS_200, newGroupCourseService.formateGroupCourse(ngc),Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			} catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		
		/**
		 * 群组管理员删除群组课程
		 * @author hjn
		 * @param request
		 * @return
		 */
		@RequestMapping("/deleteGroupCourses")
		public @ResponseBody ResponseContainer deleteGroupCourses(HttpServletRequest request) {
			try {
				String groupId = request.getParameter("groupId");
				XueWenGroup group = groupService.findGroup(groupId);
				List list=group.getOwner();
				String owenrid=(String) list.get(0);
				String groupCourseId = request.getParameter("groupCourseId");
				User currentUser = userService.findUser(owenrid);
				newGroupCourseService.deleteGroupCourseList(groupId, groupCourseId,currentUser.getId());
				return addResponse(Config.STATUS_200, Config.MSG_DELETE_200, true,Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			} catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		
		/**
		 * 用户收藏界面获取用户已学完和未学完课程数目的统计
		 * @param request
		 * @param dm
		 * @return
		 */
		@RequestMapping("/countNum")
		public @ResponseBody ResponseContainer countNum(HttpServletRequest request) {
			try {
				String userid = request.getParameter("userid");
				User currentUser = userService.findUser(userid);
				JSONObject num = userGroupCourseService.userFavStudyCountNum(currentUser);
				return addResponse(Config.STATUS_200, Config.MSG_200, num,Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			}catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		/**
		 * 获得用户群组课程收藏学习完成列表
		 * @param request
		 * @param dm
		 * @return
		 */
		@RequestMapping("/favStudyed")
		public @ResponseBody ResponseContainer favStudyed(HttpServletRequest request,QueryModel dm) {
			try {
				Pageable pageable = PageRequestTools.pageRequesMake(dm);
				String userid = request.getParameter("userid");
				User currentUser = userService.findUser(userid);
				Page<UserGroupCourse> favStudeds = userGroupCourseService.findUserFavStudyed(currentUser.getId(), pageable);
				ReponseDataTools.getClientReponseData(rsData, favStudeds);
				this.rsData.setResult(userGroupCourseService.formateUserGroupCourseRspUserFavOrStudyList(favStudeds.getContent()));
				return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			}catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		/**
		 * 
		 * @Title: getCourseByTagPc
		 * @Description: 按标签查找课程（在群组中的课程）
		 * @param tagName
		 * @param dm
		 * @return ResponseContainer
		 * @throws
		 */
		@SuppressWarnings("unchecked")
		@RequestMapping("getCourseByTagPc")
		public @ResponseBody ResponseContainer getCourseByTagPc(String tagName,QueryModel dm){
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			try {
				Map<String,Object> newCourses=newCourseService.getCourseByTagPc(tagName, pageable);
				ReponseDataTools.getClientReponseData(rsData, (Page<GroupCourse>)newCourses.get("page"));
				rsData.setResult(newCourses.get("result"));
				return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
			} catch (Exception e) {
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		/**
		 * 
		 * @Title: getCourseByTagPc
		 * @Description: 按条件查找课程（在群组中的课程）
		 * @param tagName
		 * @param dm
		 * @return ResponseContainer
		 * @throws
		 */
		@SuppressWarnings("unchecked")
		@RequestMapping("getCourseByKeyWordsPc")
		public @ResponseBody ResponseContainer getCourseByKeyWordsPc(String keyWords,QueryModel dm){
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			try {
				Map<String,Object> newCourses=newCourseService.getCourseByKeyWordsPc(keyWords, pageable);
				ReponseDataTools.getClientReponseData(rsData, (Page<GroupCourse>)newCourses.get("page"));
				rsData.setResult(newCourses.get("result"));
				return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
			} catch (Exception e) {
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		/**
		 * 获得用户群组课程收藏学习未完成列表
		 * @param request
		 * @param dm
		 * @return
		 */
		@RequestMapping("/favStudying")
		public @ResponseBody ResponseContainer favStudying(HttpServletRequest request,QueryModel dm) {
			try {
				Pageable pageable = PageRequestTools.pageRequesMake(dm);
				String userid = request.getParameter("userid");
				User currentUser = userService.findUser(userid);
				Page<UserGroupCourse> favStudeds = userGroupCourseService.findUserFavStudying(currentUser.getId(), pageable);
				ReponseDataTools.getClientReponseData(rsData, favStudeds);
				this.rsData.setResult(userGroupCourseService.formateUserGroupCourseRspUserFavOrStudyList(favStudeds.getContent()));
				return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			}catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}

}
