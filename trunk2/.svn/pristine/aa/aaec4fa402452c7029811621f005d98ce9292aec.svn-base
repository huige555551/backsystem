package operation.service.course;

import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONObject;
import operation.exception.XueWenServiceException;
import operation.pojo.course.NewCourse;
import operation.pojo.course.NewGroupCourse;
import operation.pojo.user.User;
import operation.repo.course.NewGroupCourseRepository;
import operation.repo.course.NewGroupCourseTemplate;
import operation.service.fav.FavService;
import operation.service.group.GroupService;
import operation.service.user.UserService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import tools.Config;
import tools.StringUtil;
import tools.YXTJSONHelper;
/**
 * 按照最新群组课程业务需求，重写的groupCourseService
 * @author hjn
 * 
 *
 */
@Service
@Component
public class NewGroupCourseService {
	
	@Autowired
	private NewGroupCourseTemplate newGroupCourseTemplate;
	@Autowired
	private NewGroupCourseRepository newGroupCourseRepository;
	@Autowired
	private GroupService groupService;
	@Autowired
	private NewCourseService newCourseService;
	@Autowired
	private UserService userService;
	@Autowired
	private FavService favService;

	
	/**
	 * 根据群组ID和课程ID判断课程是否已经在小组课堂
	 * @author hjn
	 * @param groupId
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isExiseByGroupIdAndCourseId(String groupId,String courseId)throws XueWenServiceException{
		return newGroupCourseTemplate.isExiseByGroupIdAndCourseId(groupId, courseId);
	}
	
	/**
	 * 将课程分享到本人加入小组的小组课堂
	 * @author hjn
	 * @param groupId 群组ID
	 * @param courseId 课程ID
	 * @param userId 当前分享用户ID
	 * @throws XueWenServiceException
	 */
	public void share(String groupId,String courseId,String userId )throws XueWenServiceException{
		//参数判断
		if(StringUtil.isBlank(groupId) || StringUtil.isBlank(courseId) || StringUtil.isBlank(userId)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//判断当前用户是否为群组成员
		if(!groupService.isUserInGroupByGroupIdAndUserId(groupId,userId)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NOTINGROUP_201,null);
		}
		//判断此课程是否已经被分享到小组课堂
		if(isExiseByGroupIdAndCourseId(groupId, courseId)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_COURSEHADSHARE_201,null);
		}
		//分享此课程到小组课堂
		NewGroupCourse gc=new NewGroupCourse(groupId,courseId,userId);
		gc.setDisPlay(0);
		newGroupCourseRepository.save(gc);
		//课程上增加分享次数,后续添加
	}
	
	/**
	 * 根据群组ID获取小组课堂公开课程
	 * @param groupId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewGroupCourse> findOpenPageGroupCourseByGroupId(String groupId,Pageable pageable)throws XueWenServiceException{
		//参数判断
		if(StringUtil.isBlank(groupId)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		return newGroupCourseRepository.findByGroupAndDisPlay(groupId,0,pageable);
	}
	
	/**
	 * 格式化groupCourse List
	 * @author hjn
	 * @param newGroupCourses
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> formateGroupCourseList(List<NewGroupCourse> newGroupCourses)throws XueWenServiceException{
		if(newGroupCourses != null && newGroupCourses.size()>0){
			List<Object> objs=new ArrayList<Object>();
			for(NewGroupCourse newGroupCourse:newGroupCourses){
				objs.add(formateGroupCourse(newGroupCourse));
			}
			return objs;
		}else{
			return null;
		}
	}
	
	/**
	 * 格式化groupCourse对象，返回前端前组装相关的course信息
	 * @author hjn
	 * @param groupCourse
	 * @return
	 * @throws XueWenServiceException
	 */
	public Object formateGroupCourse(NewGroupCourse newGroupCourse)throws XueWenServiceException{
		//参数判断
		if(newGroupCourse == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//组装course的基本信息,其他字段删除
		NewCourse course=newCourseService.findOneNewCourseByIdBasicInfo(newGroupCourse.getCourse().toString());
		newGroupCourse.setCourse(formateCourse(course));
		//组装用户信息，包括ID，userName,nickName,sex,phoneNumber,email,intro等，其他字段为空,并去掉
		User user=userService.getContactOfRspUserById(newGroupCourse.getWhoImport().toString());
		newGroupCourse.setWhoImport(formateUser(user));
		return formateNewGroupCourse(newGroupCourse);
	}
	
	/**
	 * 格式化newCourse对象，只包含返回前端需要属性,去掉列表中不需要的whoFav,whoStudy,whoShare字段
	 * @author hjn
	 * @param lesson
	 * @return
	 * @throws XueWenServiceException
	 */
	public JSONObject formateNewGroupCourse(NewGroupCourse newCourse)throws XueWenServiceException{
		//参数校验
		if(newCourse == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//去掉无需返回前端的属性,只包含以下属性
		String[] exclude = {"whoFav","whoStudy","whoShare"};
		return  YXTJSONHelper.excludeAttrJsonObject(newCourse, exclude);
				
	} 
	/**
	 * 格式化newCourse对象，只包含返回前端需要属性
	 * @author hjn
	 * @param lesson
	 * @return
	 * @throws XueWenServiceException
	 */
	public JSONObject formateCourse(NewCourse newCourse)throws XueWenServiceException{
		//参数校验
		if(newCourse == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//去掉无需返回前端的属性,只包含以下属性
		String[] include = {"id","title","intro","tags","logoUrl"};
		return  YXTJSONHelper.includeAttrJsonObject(newCourse, include);
		
	} 
	/**
	 * 格式化User对象，只包含返回前端需要属性
	 * @author hjn
	 * @param lesson
	 * @return
	 * @throws XueWenServiceException
	 */
	public JSONObject formateUser(User user)throws XueWenServiceException{
		//参数校验
		if(user == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//去掉无需返回前端的属性,只包含以下属性
		String[] include = {"id","userName","nickName"};
		return  YXTJSONHelper.includeAttrJsonObject(user, include);
		
	} 
	
	/**
	 * 判断群组课程是否被用户收藏
	 * @param courseId
	 * @param userId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isGroupCourseFavByUser(String groupCourseId,String userId)throws XueWenServiceException{
		return favService.isUserFav(userId, Config.YXTDOMAIN, groupCourseId, Config.GROUPCOURSE);
	}
	
	/**
	 * 添加用户收藏课程记录
	 * @param courseId
	 * @param userId
	 * @return
	 * @throws XueWenServiceException
	 */
	public void groupCourseFav(String groupCourseId,String userId,String appkey)throws XueWenServiceException{
		favService.addFavNotCheck(Config.YXTDOMAIN, appkey, groupCourseId, Config.GROUPCOURSE, userId);
	}
	
	
	/**
	 * 增加课程收藏数量
	 * @throws XueWenServiceException
	 */
	public void increaseFavCount(String groupCourseId,int increaseNum)throws XueWenServiceException{
		newGroupCourseTemplate.increaseFavCount(groupCourseId, increaseNum);
	}
}
