package operation.service.my;


import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONObject;
import operation.exception.XueWenServiceException;
import operation.pojo.course.NewCourse;
import operation.pojo.course.NewGroupCourse;
import operation.pojo.drycargo.Drycargo;
import operation.pojo.topics.Topic;
import operation.service.course.NewCourseService;
import operation.service.drycargo.DrycargoService;
import operation.service.topics.TopicService;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import tools.Config;
import tools.YXTJSONHelper;

@Service
@Component
public class MyService {
	private static final Logger logger = Logger.getLogger(MyService.class);
	@Autowired
	private TopicService topicService;
	@Autowired
	private DrycargoService drycargoService;
	@Autowired
	private NewCourseService newCourseService;
	
	/**
	 * 获得我创建的话题
	 * @param userId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Topic> myCreatedTopic(String userId, Pageable pageable) throws XueWenServiceException {
		Page<Topic> topics = topicService.myCreatedTopic(userId,pageable);
		return topics;
	}
	/**
	 * 获得我创建的干货
	 * @param userId
	 * @param dryFlag
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Drycargo> myCreatedDrycargo(String userId, int dryFlag,Pageable pageable) throws XueWenServiceException {
		Page<Drycargo> drycargos = drycargoService.getUserCreateDrycargoByDryFlag(userId,dryFlag,pageable);
		return drycargos;
	}
	/**
	 * 获得我创建的课程
	 * @param userId
	 * @param dryFlag
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewCourse> myCreatedCourse(String userId, Pageable pageable) throws XueWenServiceException {
		Page<NewCourse> newCourse = newCourseService.getMyCourses(userId,pageable);
		return newCourse;
	}
	
	/**
	 * 格式化newCourse对象，只包含返回前端需要属性
	 * @author hjn
	 * @param lesson
	 * @return
	 * @throws XueWenServiceException
	 */
	public JSONObject formateCourse(NewCourse newCourse)throws XueWenServiceException{
		//参数校验
		if(newCourse == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//去掉无需返回前端的属性,只包含以下属性
		String[] include = {"id","title","intro","tags","logoUrl","price","createUser","pricemodel","favProp","buyCount"};
		return  YXTJSONHelper.includeAttrJsonObject(newCourse, include);
		
	} 
	/**
	 * 解析多条课程
	 * @param newCourses
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> formateCourseList(List<NewCourse> newCourses)throws XueWenServiceException{
		if(newCourses != null && newCourses.size()>0){
			List<Object> objs=new ArrayList<Object>();
			for(NewCourse newCourse:newCourses){
				objs.add(formateCourse(newCourse));
			}
			return objs;
		}else{
			return null;
		}
	}
	
	
	
}
