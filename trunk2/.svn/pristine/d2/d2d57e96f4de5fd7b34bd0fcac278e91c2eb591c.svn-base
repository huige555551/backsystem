package operation.controller.oss;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import operation.OssController;
import operation.exception.XueWenServiceException;
import operation.pojo.group.XueWenGroup;
import operation.pojo.pub.QueryModel;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.topics.Post;
import operation.pojo.topics.SubPost;
import operation.pojo.topics.Topic;
import operation.pojo.user.ResponseUser;
import operation.pojo.user.User;
import operation.service.group.GroupService;
import operation.service.topics.PostService;
import operation.service.topics.TopicService;
import operation.service.user.UserService;
import operation.service.util.ObjCopyPropsService;
import tools.Config;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;

@RestController
@RequestMapping("/oss/topic")
@Configuration
public class OssTopicController extends OssController {

	@Autowired
	private TopicService topicService;
	@Autowired
	public GroupService groupService;
	
	@Autowired
	public UserService userService;
	@Autowired
	private PostService postService;
	
	@Autowired
	private MongoTemplate mongoTemplate;
	
	@Autowired
	public ObjCopyPropsService objCopyPropsService;

	public OssTopicController() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * 删除
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/delete")
	public @ResponseBody ResponseContainer create(HttpServletRequest request) {
		try {
			String topicid = request.getParameter("topicid");
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, topicService.deleteById(topicid), Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询所有主楼回复
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/searchAllPost")
	public @ResponseBody ResponseContainer searchAllSubPost(HttpServletRequest request) {
		try {
			// String topicid = request.getParameter("topicid");

			// List<Post> PostList = postService.getAllTopicPost(topicid);

			String topicid = request.getParameter("topicid");
			// 课程下所有主楼回复
			List l = new ArrayList();
			// List ll=new ArrayList();
			List<Post> PostList = postService.getAllTopicPost(topicid);
			// 课程下所有副楼回复
			for (Post post : PostList) {
				List<SubPost> subPostList = postService.getAllSubPost(post.getPostId());
				if (subPostList.isEmpty()) {
					l.addAll(subPostList);
				}

			}

			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, PostList, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询所有副楼回复
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/searchAllSubPost")
	public @ResponseBody ResponseContainer searchAllPost(HttpServletRequest request) {
		try {
			String postid = request.getParameter("postid");

			List<SubPost> subPostList = postService.getAllSubPost(postid);

			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, subPostList, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 根据群组id或者课程Id查询话题列表
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="findByGroupId")
	public @ResponseBody ResponseContainer findByGroupId(HttpServletRequest request, Topic topic,QueryModel dm) {
		//根据请求参数封装一个分页信息对象
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		// 通过房间id获取话题列表
		String groupId = request.getParameter("sourceId");
		String courseId = request.getParameter("courseId");
		String appKey = request.getParameter("appKey");
		Page<Topic> topicResult;
		try {
			topicResult = topicService.findTopicByGroupIdOrCourseId(groupId,appKey,courseId, pageable);
			ReponseDataTools.getClientReponseData(rsData, topicResult);
			this.rsData.setResult(topicService.toResponses(topicResult.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	
	/**
	 * 创建主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="create", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer create(HttpServletRequest request,Topic topic,String  tagName,String isGeoOpen) {
		try {
			String uid = request.getParameter("uid");
			User currentUser = userService.findUser(uid);
			Topic topicResult = topicService.createTopic(currentUser,topic,tagName,isGeoOpen);
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, topicResult,Config.RESP_MODE_10, "");
		}catch (XueWenServiceException e) {
//			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}catch (Exception e) {
//			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 更新主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="updateTopicByGroup", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer updateTopicByGroup(HttpServletRequest request,Topic topic) {
		try {
			
			String topicId = request.getParameter("topicId");
			String groupid = request.getParameter("groupid");
			String title = request.getParameter("title");
			String content = request.getParameter("content");
			String picUrl = request.getParameter("picUrl");
			
			Topic topicResult =topicService.findOneById(topicId);
			
			if(groupid==null){
				topicResult = (Topic) objCopyPropsService.copyPropertiesInclude(topic, topicResult, new String[] { "title","content","picUrl"});
			}
			else{
				//关联群组
				XueWenGroup rg = groupService.findGroup(groupid);
				topic.setSourceId(rg.getId());
				topic.setSourceName(rg.getGroupName());
				topicResult = (Topic) objCopyPropsService.copyPropertiesInclude(topic, topicResult, new String[] { "sourceId","sourceName"});
			}
			
			
			topicService.updateTopic(topicResult);
			//Topic topicResult = topicService.createTopic(currentUser,topic,tagName,isGeoOpen);
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, topicResult,Config.RESP_MODE_10, "");
		}catch (XueWenServiceException e) {
//			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}catch (Exception e) {
//			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 课程Id查询话题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("one")
	public @ResponseBody ResponseContainer one(HttpServletRequest request, Topic topic,QueryModel dm) {
		//根据请求参数封装一个分页信息对象
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		// 通过房间id获取话题列表
		String topicid = request.getParameter("topicid");
		 
		Topic topicResult;
		try {
			topicResult = topicService.findOneById(topicid);
			if(topicResult==null){
				 topicResult = new Topic();
			}
			this.rsData.setResult(topicResult.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	 
	
	/**
	 * 按照名称或者描述搜索主题 包括没有关联课程的
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("search")
	public @ResponseBody ResponseContainer searchAll(HttpServletRequest request, Topic topic,QueryModelMul dm) {
		//根据请求参数封装一个分页信息对象
		List<String> sort = new ArrayList<String>();
		sort.add("displayOrder");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		
		Page<Topic> topicResult;
		try {
			String keyword = request.getParameter("keyword");
//			User currentUser = this.getCurrentUser(token);
			topicResult = topicService.searchAll(keyword,pageable);
			ReponseDataTools.getClientReponseData(rsData, topicResult);
			this.rsData.setResult(topicService.toResponses(topicResult.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	

}
