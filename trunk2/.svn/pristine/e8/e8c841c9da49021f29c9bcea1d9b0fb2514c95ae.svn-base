package operation.controller.my;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import operation.BaseController;
import operation.exception.XueWenServiceException;
import operation.pojo.course.NewCourse;
import operation.pojo.drycargo.Drycargo;
import operation.pojo.dynamic.GroupDynamic;
import operation.pojo.fav.Fav;
import operation.pojo.group.XueWenGroup;
import operation.pojo.pub.QueryModel;
import operation.pojo.topics.Topic;
import operation.pojo.user.User;
import operation.service.course.NewGroupCourseService;
import operation.service.drycargo.DrycargoService;
import operation.service.group.GroupService;
import operation.service.my.MyService;
import operation.service.topics.TopicService;
import operation.service.user.UserService;

import org.jsoup.helper.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import tools.Config;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;

@RestController
@RequestMapping("/my")
@Configuration
public class MyController extends BaseController {
	@Autowired
	private MyService myService;
	@Autowired
	private TopicService topicService;
	@Autowired
	private DrycargoService drycargoService;
	
	@Autowired
	private GroupService groupService;
	
	@Autowired
	private UserService userService;
	
	@Autowired
	private NewGroupCourseService newGroupCourseService;
	
	

	/**
	 * 获得我创建的话题
	 * @param request
	 * @param dm
	 * @return
	 */
	@RequestMapping("findMyTopic")
	public @ResponseBody ResponseContainer findMyTopic(HttpServletRequest request, QueryModel dm) {
//		try {
//			String token = request.getParameter("token");	
//			User currentUser = this.getCurrentUser(token);
//			Pageable pageable = PageRequestTools.pageRequesMake(dm);
//			Page<Topic> topicResult = myService.myCreatedTopic(currentUser.getId(), pageable);
//			ReponseDataTools.getClientReponseData(getReponseData(), topicResult);
//			this.getReponseData().setResult(topicService.toJSONHelper(topicResult.getContent(),currentUser));
//			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
//			} 
//			catch (Exception e) {
//				e.printStackTrace();
//				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
//			}
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<GroupDynamic> groupDynamic = myService.findMyCreatedCourse(currentUser.getId(),Config.TYPE_TOPIC_GROUP, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), groupDynamic);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 获得我创建的干货
	 * @param request
	 * @param dm
	 * @return
	 */
	@RequestMapping("findMyDrycargo")
	public @ResponseBody ResponseContainer userDrycargo(HttpServletRequest request,QueryModel dm) {
//		Pageable pageable = PageRequestTools.pageRequesMake(dm);
//		Page<Drycargo> dryCargoResult;
//		try {
//			String token = request.getParameter("token");
//			User currentUser = this.getCurrentUser(token);
//			String dryFlag = request.getParameter("dryFlag");//0干货1炫页
//			if(StringUtil.isBlank(dryFlag)){
//				dryFlag = "0";
//			}
//			dryCargoResult = myService.myCreatedDrycargo(currentUser.getId(),Integer.parseInt(dryFlag), pageable);
//			ReponseDataTools.getClientReponseData(getReponseData(), dryCargoResult);
//			this.getReponseData().setResult((drycargoService.toResponeses(dryCargoResult.getContent(),currentUser.getId())));
//			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
//		} catch (XueWenServiceException e) {
//			e.printStackTrace();
//			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
//		} catch (Exception e) {
//			e.printStackTrace();
//			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
//		}
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<GroupDynamic> groupDynamic = myService.findMyCreatedDrycargo(currentUser.getId(),Config.TYPE_DRYCARGO_GROUP,Config.TYPE_XUANYE_GROUP, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), groupDynamic);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 获得我创建的课程
	 * @param request
	 * @param dm
	 * @return
	 */
//	@RequestMapping("findMyCourse")
//	public @ResponseBody ResponseContainer findMyCourse(HttpServletRequest request,QueryModel dm) {
//		Pageable pageable = PageRequestTools.pageRequesMake(dm);
//		Page<NewCourse> newCourse;
//		try {
//			String token = request.getParameter("token");
//			User currentUser = this.getCurrentUser(token);
//			newCourse = myService.myCreatedCourse(currentUser.getId(), pageable);
//			ReponseDataTools.getClientReponseData(getReponseData(), newCourse);
//			this.getReponseData().setResult((myService.formateCourseList(newCourse.getContent())));
//			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
//		} catch (XueWenServiceException e) {
//			e.printStackTrace();
//			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
//		} catch (Exception e) {
//			e.printStackTrace();
//			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
//		}
//	}
	
	/**
	 * 我的所有收藏
	 * @param request
	 * @param dm
	 * @return
	 */
	@RequestMapping("findMyCollect")
	public @ResponseBody ResponseContainer findMyCollect(HttpServletRequest request,QueryModel dm) {
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		Page<NewCourse> newCourse;
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			//newCourse = myService.myCollect(currentUser.getId(), pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), null);
			//this.getReponseData().setResult((myService.formateCourseList(newCourse.getContent())));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 我发布的
	 * @param request
	 * @param dm
	 * @return
	 */
	@RequestMapping("findMyCreated")
	public @ResponseBody ResponseContainer findMyCreated(HttpServletRequest request,QueryModel dm) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<GroupDynamic> groupDynamic = myService.findMyCreated(currentUser.getId(), pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), groupDynamic);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 我发布的新版本接口
	 * @param request
	 * @param dm
	 * @return
	 */
	@RequestMapping("findMyCreated/v1.3.7")
	public @ResponseBody ResponseContainer findMyCreated137(HttpServletRequest request,QueryModel dm) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<GroupDynamic> groupDynamic = myService.findMyCreated137(currentUser.getId(), pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), groupDynamic);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 我发布的课程
	 * @param request
	 * @param dm
	 * @return
	 */
	@RequestMapping("findMyCourse")
	public @ResponseBody ResponseContainer findMyCourse(HttpServletRequest request,QueryModel dm) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<GroupDynamic> groupDynamic = myService.findMyCreatedCourse(currentUser.getId(),Config.TYPE_COURSE_GROUP, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), groupDynamic);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	

	/**
	 * 删除干货
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/deleteDry")
	public @ResponseBody ResponseContainer deleteDry(HttpServletRequest request) {
		try {
			String dryCargoId = request.getParameter("dryCargoId");
			return addResponse(Config.STATUS_200, Config.MSG_DELETE_200, drycargoService.deleteById(dryCargoId), Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 群组管理员删除群组课程
	 * @author hjn
	 * @param request
	 * @return
	 */
	@RequestMapping("/deleteGroupCourses")
	public @ResponseBody ResponseContainer deleteGroupCourses(HttpServletRequest request) {
		try {
			String groupId = request.getParameter("groupId");
			XueWenGroup group = groupService.findGroup(groupId);
			List list=group.getOwner();
			String owenrid=(String) list.get(0);
			String groupCourseId = request.getParameter("groupCourseId");
			User currentUser = userService.getOneNomailUserById(owenrid);
			newGroupCourseService.deleteGroupCourseList(groupId, groupCourseId,currentUser.getId());
			return addResponse(Config.STATUS_200, Config.MSG_DELETE_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * @throws XueWenServiceException 
	 * 
	 * @Title: getMyFavs
	 * @Description: 获取收藏
	 * @param request
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getMyFavs")
	public @ResponseBody ResponseContainer getMyFavs(HttpServletRequest request,String token,QueryModel dm) throws XueWenServiceException{
		User user=getCurrentUser(token);
		Pageable pageable=PageRequestTools.pageRequesMake(dm);
		Map<String, Object> res=myService.getMyFav(user.getId(),pageable);
		@SuppressWarnings("unchecked")
		Page<Fav>favs=(Page<Fav>) res.get("page");
		ReponseDataTools.getClientReponseData(getReponseData(), favs);
		getReponseData().setResult(res.get("items"));
		if(getReponseData().getTotal_rows()==0){
			getReponseData().setResult(null);
		}
		return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
	}
	
	
}
