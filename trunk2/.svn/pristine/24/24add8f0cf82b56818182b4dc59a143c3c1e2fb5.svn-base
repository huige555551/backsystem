package operation.repo.course;

import java.util.List;

import operation.exception.XueWenServiceException;
import operation.pojo.course.Knowledge;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;


@Service
@Component
public class KnowledgeTemplate {

	@Autowired
	private MongoTemplate mongoTemplate;
	
	public KnowledgeTemplate(){
		
	}
	/**
	 * 根据知识Id查询出来知识ID和appItems节点
	 * @param knowledge
	 * @return
	 * @throws XueWenServiceException
	 */
	public Knowledge findByIdRspIdAndappItems(String knowledge)throws XueWenServiceException{
		Query query=new Query(Criteria.where("id").is(knowledge));
		query.fields().include("id").include("appItems").include("furl");
		return mongoTemplate.findOne(query, Knowledge.class);
	}
	
	/**
	 * 根据知识Id集合查询出来的所有的知识Id和appItems节点与下载地址节点
	 * @param kids
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Knowledge> findByIdRspAppItemsAndDownloadUlr(List<Object> kids)throws XueWenServiceException{
		Query query=new Query(Criteria.where("id").in(kids));
		query.fields().include("id").include("appItems").include("furl");
		return mongoTemplate.find(query, Knowledge.class);
	}
	
	/**
	 * 根据知识Id集合删除所有知识记录
	 * @param knowledge
	 * @return
	 * @throws XueWenServiceException
	 */
	public void deleteByIds(List<Object> knowledgeIds)throws XueWenServiceException{
		Query query=new Query(Criteria.where("id").in(knowledgeIds));
		mongoTemplate.remove(query, Knowledge.class);
	}
	/**
	 * 
	 * @Title: addViewCount
	 * @Description: 浏览次数加1
	 * @param id void
	 * @throws
	 */
	public void addViewCount(String id){
		Query query=new Query(Criteria.where("id").is(id));
		Update update = new Update().inc("viewCount", 1).set("utime", System.currentTimeMillis());
		mongoTemplate.updateFirst(query, update, Knowledge.class);
	}
	/**
	 * 合并用户，将fromUser 创建的知识 合并给toUser
	 * @param fromUserId
	 * @param toUserId
	 */
	public void mergeKnowledge(String fromUserId,String toUserId){
		Query query=new Query(Criteria.where("cuser").is(fromUserId));
		Update update=new Update();
		update.set("cuser", toUserId);
		mongoTemplate.updateMulti(query,update,Knowledge.class);
	}
	
	/**
	 * 
	 * @Title: addfavCount
	 * @auther tangli
	 * @Description: 更新收藏数量
	 * @param sourceId
	 * @param i void
	 * @throws
	 */
	public void addfavCount(String sourceId, int i) {
		Update update=new Update();
		update.inc("favCount", i);
		Query query=new Query(Criteria.where("id").is(sourceId));
		mongoTemplate.updateFirst(query, update, Knowledge.class);	
	}
	
	public void updateAllRealTime(){
		Query q=new Query(Criteria.where("isdelete").is(false));
		Update u=new Update();
		u.set("realTime",false);
		mongoTemplate.updateMulti(q, u, Knowledge.class);	
	}
	
}
