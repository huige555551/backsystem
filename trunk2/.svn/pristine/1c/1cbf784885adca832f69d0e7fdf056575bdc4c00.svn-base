package operation.service.praise;


import java.util.ArrayList;
import java.util.List;

import operation.exception.XueWenServiceException;
import operation.pojo.praise.Praise;
import operation.pojo.praise.UserPraiseResponse;
import operation.pojo.user.User;
import operation.repo.praise.PraiseMongoTemplate;
import operation.repo.praise.PraiseRepository;
import operation.service.user.ContactUserService;
import operation.service.user.UserService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import tools.Config;
import tools.StringUtil;

@Service
@Component
public class PraiseService {

	@Autowired
	private PraiseRepository praiseRepository;
	@Autowired
	private PraiseMongoTemplate  praiseMongoTemplate;
	@Autowired
	private ContactUserService contactUserService;
	@Autowired
	private UserService userService;

	public PraiseService() {

	}
	
	/**
	 * 用户点赞,不进行是否点赞判断
	 * @param praise
	 * @param user
	 * @throws XueWenServiceException
	 */
	public void addPraiseNotCheck(String domain,String appkey,String sourceId,String type ,String userId)throws XueWenServiceException{
		if(StringUtil.isBlank(userId) || StringUtil.isBlank(domain) || StringUtil.isBlank(appkey) || StringUtil.isBlank(sourceId)){
			throw new  XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}
		Praise praise=new Praise();
		praise.setDomain(domain);
		praise.setAppKey(appkey);
		praise.setSourceId(sourceId);
		praise.setType(type);
		praise.setUserId(userId);
		long time=System.currentTimeMillis();
		praise.setCtime(time);
		praise.setUtime(time);
		praiseRepository.save(praise);
	}

	/**
	 * 用户点赞
	 * @param userId
	 * @param appKey
	 * @param sourceId
	 * @param type
	 * @throws XueWenServiceException
	 */
	public void addPraise(User user,String domain ,String appKey,String sourceId,String type)throws XueWenServiceException{
		Praise praise=findOnePraiseByUserIdAndDomainAndSourceIdAndType(user.getId(),domain,sourceId,type);
		if(praise == null){
			praise=new Praise();
			praise.setAppKey(appKey);
			praise.setDomain(domain);
			praise.setSourceId(sourceId);
			praise.setType(type);
			praise.setUserId(user.getId());
			praiseRepository.save(praise);
		}
	}
	/**
	 * 用户点赞
	 * @param praise
	 * @param user
	 * @throws XueWenServiceException
	 */
	public void addPraise(Praise praise,String userId)throws XueWenServiceException{
		if(praise == null || StringUtil.isBlank(praise.getDomain()) || StringUtil.isBlank(praise.getAppKey()) || StringUtil.isBlank(praise.getSourceId()) || StringUtil.isBlank(praise.getType())){
			throw new  XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}
		if(!isUserPraise(userId,praise.getDomain(),praise.getSourceId(),praise.getType())){
			praise.setUserId(userId);
			long time=System.currentTimeMillis();
			praise.setCtime(time);
			praise.setUtime(time);
			praiseRepository.save(praise);
		}
	}
	
	/**
	 * 用户点赞
	 * @param praise
	 * @param user
	 * @throws XueWenServiceException
	 */
	public void addPraiseTip(String domain,String appKey,String sourceId,String type,String userId)throws XueWenServiceException{
		if(StringUtil.isBlank(domain) || StringUtil.isBlank(appKey) || StringUtil.isBlank(sourceId) || StringUtil.isBlank(type)){
			throw new  XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}
		if(!isUserPraise(userId,domain,sourceId,type)){
			Praise praise = new Praise();
			praise.setUserId(userId);
			praise.setDomain(domain);
			praise.setSourceId(sourceId);
			praise.setType(type);
			praise.setAppKey(appKey);
			long time=System.currentTimeMillis();
			praise.setCtime(time);
			praise.setUtime(time);
			praiseRepository.save(praise);
		} else {
			throw new  XueWenServiceException(Config.STATUS_206,Config.MSG_ALREADY_206,null);
		}
	}
	
	/**
	 * 用户是否点赞
	 * @param userId
	 * @param appKey
	 * @param sourceId
	 * @param type
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isUserPraise(String userId,String domain,String sourceId,String type)throws XueWenServiceException{
		if(StringUtil.isBlank(userId) || StringUtil.isBlank(domain) || StringUtil.isBlank(sourceId) || StringUtil.isBlank(type) ){
			throw new  XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}
		return praiseMongoTemplate.existsByUserIdAndDomainAndSourceIdAndType(userId,domain,sourceId,type);
	}
	
	/**
	 * 根据用户ID和域Id和来源ID和类型，查找用户点赞对象,可为空
	 * @param userId
	 * @param appKey
	 * @param sourceId
	 * @param type
	 * @return
	 * @throws XueWenServiceException
	 */
	public Praise findOnePraiseByUserIdAndDomainAndSourceIdAndType(String userId,String domain,String sourceId,String type)throws XueWenServiceException{
//		praiseRepository.exists(id)
		if(StringUtil.isBlank(userId) || StringUtil.isBlank(domain) || StringUtil.isBlank(sourceId) || StringUtil.isBlank(type) ){
			throw new  XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}
		return praiseRepository.findByUserIdAndDomainAndSourceIdAndType(userId, domain, sourceId, type);
	}
	/**
	 * 根据域Id和来源ID和类型，查找用户点赞对象,可为空
	 * @param appkey
	 * @param sourceId
	 * @param type
	 * @return
	 */
	public Page<Praise> findOnePraiseByDomainAndSourceId(String domain,String sourceId,Pageable pageable)throws XueWenServiceException{
		if( StringUtil.isBlank(domain) || StringUtil.isBlank(sourceId)){
			throw new  XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}
		return praiseRepository.findByDomainAndSourceId(domain, sourceId,pageable);
	}
	
	/**
	 * 统计一个项目的点赞数量
	 * @param appKey
	 * @param sourceId
	 * @param type
	 * @return
	 * @throws XueWenServiceException
	 */
	public int countByDomainAndSourceIdAndType(String domain,String sourceId,String type)throws XueWenServiceException{
		if(StringUtil.isBlank(domain) || StringUtil.isBlank(sourceId) || StringUtil.isBlank(type) ){
			throw new  XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}
		return praiseRepository.countByDomainAndSourceIdAndType(domain, sourceId, type);
	}
	/**
	 * 
	 * @Title: findListByUserIdAndAppkeyAndType
	 * @Description: 查找用户对某一类型的点过的赞
	 * @param userId
	 * @param appKey
	 * @param type
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException Page<Praise>
	 * @throws
	 */
	public Page<Praise> findListByUserIdAndDomainAndType(String userId,String domain,String type,Pageable pageable)throws XueWenServiceException{
		if(StringUtil.isBlank(domain) || StringUtil.isBlank(userId) ){
			throw new  XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}
		return praiseRepository.findByUserIdAndDomainAndType(userId, domain, type, pageable);
	}
	
	public List<UserPraiseResponse> toResponeses(List<Praise> praises,String userId) throws XueWenServiceException{
		List<UserPraiseResponse> uprs = new ArrayList<UserPraiseResponse>();
		if(praises==null || praises.size()<=0){
		}else{
			for(int i = 0; i < praises.size(); i++){
				uprs.add(toResponse(praises.get(i),userId));
			}
		}
		return uprs;
		
	}
	
	public UserPraiseResponse toResponse(Praise praise,String userId)throws XueWenServiceException{
		if (praise == null) {
			throw new XueWenServiceException(Config.STATUS_201,
					Config.MSG_NODATA_201, null);
		}
		User praiseUser = userService.findUser(praise.getUserId());
		UserPraiseResponse upr = new UserPraiseResponse(praise.getUserId(),praiseUser.getUserName(),praiseUser.getLogoURL(),praiseUser.getNickName());
		if(praise.getUserId().equals(userId)){
			upr.setContactStatus(10);
		}else{
			upr.setContactStatus(contactUserService.contact(userId, praise.getUserId()));
		}
		return upr;
	}
	
	/**
	 * 根据来源ID删除点赞记录
	 * @param sourceId
	 * @throws XueWenServiceException
	 */
	public void deleteBySourceId(String sourceId)throws XueWenServiceException{
		praiseMongoTemplate.deleteBySourceId(sourceId);
	}
	/**
	 * 根据来源ID集合删除点赞记录
	 * @param sourceId
	 * @throws XueWenServiceException
	 */
	public void deleteBySourceIds(List<Object> sourceIds)throws XueWenServiceException{
		praiseMongoTemplate.deleteBySourceIds(sourceIds);
	}
	
	/**
	 * 
	 * @Title: findOneByUserIdAndSourceId
	 * @auther Tangli
	 * @Description: 课程是否被当前用户赞过
	 * @param courseId
	 * @param id
	 * @return boolean
	 * @throws
	 */
	public boolean existByUserIdAndSourceId(String courseId, String id) {
		Praise praise=praiseRepository.findOneByUserIdAndSourceId( id, courseId);
		return praise==null?false:true;
	}
	
}
