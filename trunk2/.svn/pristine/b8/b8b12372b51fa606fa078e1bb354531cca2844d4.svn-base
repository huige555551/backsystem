package operation.repo.course;

import operation.exception.XueWenServiceException;
import operation.pojo.course.NewCourse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;


/**
 * 课程实例 template 操作 
 * @author hjn
 *
 */
@Service
@Component
public class NewCourseTemplate {

	@Autowired
	private MongoTemplate mongoTemplate;
	
	public NewCourseTemplate(){
		super();
	}
	
	/**
	 * 根据课程ID返回课程基本信息（只有，ID，title，intro,tags，logoUrl）
	 * @author hjn
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public NewCourse findOneCourseBasicInfo(String courseId)throws XueWenServiceException{
		Query query=new Query(Criteria.where("id").is(courseId));
		query.fields().include("id").include("title").include("intro").include("tags").include("logoUrl");
		return mongoTemplate.findOne(query, NewCourse.class);
	}
	/**
	 * 根据课程ID返回课程基本信息包括chapter集合（只有，ID，title，intro,tags，logoUrl,chapter）
	 * @author hjn
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public NewCourse findOneCourseBasicInfoIncludeChapter(String courseId)throws XueWenServiceException{
		Query query=new Query(Criteria.where("id").is(courseId));
		query.fields().include("id").include("title").include("intro").include("tags").include("logoUrl").include("chapters");
		return mongoTemplate.findOne(query, NewCourse.class);
	}
	/**
	 * 根据课程ID返回课程ID和chapters节点（只有，ID，chapters）
	 * @author hjn
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public NewCourse findOneNewCourseByIdRspOnlyIdAndChapters(String courseId)throws XueWenServiceException{
		Query query=new Query(Criteria.where("id").is(courseId));
		query.fields().include("id").include("chapters");
		return mongoTemplate.findOne(query, NewCourse.class);
	}
	
	/**
	 * 增加课程收藏统计数量
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public void increaseFavCount(String courseId,int increaseNum)throws XueWenServiceException{
		Query query=new Query(Criteria.where("id").is(courseId));
		Update update=new Update();
		update.inc("favCount", increaseNum);
		mongoTemplate.updateMulti(query, update, NewCourse.class);
	}
	
	
}
