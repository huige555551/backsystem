package operation.controller.oss;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Page;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import operation.OssController;
import operation.exception.XueWenServiceException;
import operation.pojo.group.XueWenGroup;
import operation.pojo.topics.Post;
import operation.pojo.topics.SubPost;
import operation.pojo.user.ResponseUser;
import operation.pojo.user.User;
import operation.service.topics.PostService;
import operation.service.topics.TopicService;
import tools.Config;
import tools.ResponseContainer;

@RestController
@RequestMapping("/oss/topic")
@Configuration
public class OssTopicController extends OssController {

	@Autowired
	private TopicService topicService;

	@Autowired
	private PostService postService;
	
	@Autowired
	private MongoTemplate mongoTemplate;

	public OssTopicController() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * 删除群组
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/delete")
	public @ResponseBody ResponseContainer create(HttpServletRequest request) {
		try {
			String topicid = request.getParameter("topicid");
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, topicService.deleteById(topicid), Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询所有主楼回复
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/searchAllPost")
	public @ResponseBody ResponseContainer searchAllSubPost(HttpServletRequest request) {
		try {
			// String topicid = request.getParameter("topicid");

			// List<Post> PostList = postService.getAllTopicPost(topicid);

			String topicid = request.getParameter("topicid");
			// 课程下所有主楼回复
			List l = new ArrayList();
			// List ll=new ArrayList();
			List<Post> PostList = postService.getAllTopicPost(topicid);
			// 课程下所有副楼回复
			for (Post post : PostList) {
				List<SubPost> subPostList = postService.getAllSubPost(post.getPostId());
				if (subPostList.isEmpty()) {
					l.addAll(subPostList);
				}

			}

			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, PostList, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询所有副楼回复
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/searchAllSubPost")
	public @ResponseBody ResponseContainer searchAllPost(HttpServletRequest request) {
		try {
			String postid = request.getParameter("postid");

			List<SubPost> subPostList = postService.getAllSubPost(postid);

			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, subPostList, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

}
