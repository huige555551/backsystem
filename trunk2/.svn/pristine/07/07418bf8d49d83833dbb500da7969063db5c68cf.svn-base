package operation.service.course;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import net.sf.json.JSONObject;
import operation.exception.XueWenServiceException;
import operation.pojo.box.Box;
import operation.pojo.course.NewCourse;
import operation.pojo.course.NewGroupCourse;
import operation.pojo.drycargo.Drycargo;
import operation.pojo.group.XueWenGroup;
import operation.pojo.topics.Images;
import operation.pojo.user.User;
import operation.repo.course.NewGroupCourseRepository;
import operation.repo.course.NewGroupCourseTemplate;
import operation.repo.dynamic.GroupDynamicTemplate;
import operation.service.box.BoxService;
import operation.service.dynamic.GroupDynamicService;
import operation.service.fav.FavService;
import operation.service.group.GroupService;
import operation.service.praise.PraiseService;
import operation.service.share.ShareService;
import operation.service.study.StudyService;
import operation.service.user.UserService;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import tools.Config;
import tools.JSON2ObjUtil;
import tools.StringToList;
import tools.StringUtil;
import tools.YXTJSONHelper;
/**
 * 按照最新群组课程业务需求，重写的groupCourseService
 * @author hjn
 * 
 *
 */
@Service
@Component
public class NewGroupCourseService {
	private static final Logger logger=Logger.getLogger(NewGroupCourseService.class);
	@Autowired
	private NewGroupCourseTemplate newGroupCourseTemplate;
	@Autowired
	private NewGroupCourseRepository newGroupCourseRepository;
	@Autowired
	private GroupService groupService;
	@Autowired
	private NewCourseService newCourseService;
	@Autowired
	private UserService userService;
	@Autowired
	private FavService favService;
	@Autowired
	private ShareService shareService;
	@Autowired
	private StudyService studyService;
	@Autowired
	private UserGroupCourseService userGroupCourseService;
	@Autowired
	public BoxService boxService;
	@Autowired
	private GroupDynamicService groupDynamicService;
	@Autowired
	public GroupDynamicTemplate groupDynamicTemplate;
	@Autowired
	private PraiseService praiseService;

	
	/**
	 * 根据群组ID和课程ID判断课程是否已经在小组课堂
	 * @author hjn
	 * @param groupId
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isExiseByGroupIdAndCourseId(String groupId,String courseId)throws XueWenServiceException{
		return newGroupCourseTemplate.isExiseByGroupIdAndCourseId(groupId, courseId);
	}
	
	/**
	 * 根据群组ID和课程ID判断课程是否已经在小组课堂
	 * @author hjn
	 * @param groupId
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isExiseByIdAndGroupIdAndCourseId(String id,String groupId,String courseId)throws XueWenServiceException{
		return newGroupCourseTemplate.isExiseByIdAndGroupIdAndCourseId(id,groupId, courseId);
	}
	/**
	 * 根据群组课程ID判断此群组课程是否存在
	 * @author hjn
	 * @param groupId
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isExiseById(String groupCourseId)throws XueWenServiceException{
		return newGroupCourseRepository.exists(groupCourseId);
	}
	
	/**
	 * 根据课程ID判断此群组课程是否存在
	 * @author hjn
	 * @param groupId
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isExiseByCourseId(String CourseId)throws XueWenServiceException{
		return newGroupCourseTemplate.isExiseByCourseId(CourseId);
	}
	
	
	
	/**
	 * 将课程分享到本人加入小组的小组课堂
	 * @author hjn
	 * @param groupId 群组ID
	 * @param courseId 课程ID
	 * @param userId 当前分享用户ID
	 * @throws XueWenServiceException
	 */
	public NewGroupCourse share(String groupId,String courseId,User user ,String appKey)throws XueWenServiceException{
		//参数判断
		if(StringUtil.isBlank(groupId) || StringUtil.isBlank(courseId) || user == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//判断当前用户是否为群组成员
		if(!groupService.isUserInGroupByGroupIdAndUserId(groupId,user.getId())){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NOTINGROUP_201,null);
		}
		//判断此课程是否已经被分享到小组课堂
		if(isExiseByGroupIdAndCourseId(groupId, courseId)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_COURSEHADSHARE_201,null);
		}
		//分享此课程到小组课堂
		NewGroupCourse gc=new NewGroupCourse(groupId,courseId,user.getId());
		gc.setDisPlay(0);
		gc=setCategoryByCourseId(gc,courseId);
		//获得群组对象
		XueWenGroup group = groupService.findById(groupId);
		gc.setGroupName(group.getGroupName());
		gc.setLogoUrl(group.getLogoUrl());
		//分享到群里后将审核标示修改为审核通过
		if(Config.APPKEY_PC.equals(appKey)){
			gc.setReview(false);
		}else{
			gc.setReview(true);
		}
		
		gc=newGroupCourseRepository.save(gc);
		//增加课程池课程分享记录
		newCourseService.courseShare(courseId, user.getId(), appKey ,Config.TOTYPE_INAPP_GROUP, groupId);
		//增加课程池课程分享统计数目
		newCourseService.increaseShareCount(courseId, 1);
		//创建群组动态
		creatGroupNewGroupCourseDynamic(gc, user);
		return gc;
	}
	/**
	 * 将课程分享到本人加入小组的小组课堂
	 * @author hjn
	 * @param groupId 群组ID
	 * @param courseId 课程ID
	 * @param userId 当前分享用户ID
	 * @throws XueWenServiceException
	 */
	public List<NewGroupCourse> shareList(String groupId,String courseId,User user ,String appKey)throws XueWenServiceException{
		//参数判断
		if(StringUtil.isBlank(groupId) || StringUtil.isBlank(courseId) || user ==null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//判断当前用户是否为群组成员
		if(!groupService.isUserInGroupByGroupIdAndUserId(groupId,user.getId())){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NOTINGROUP_201,null);
		}
		//前端传值的courseID JSON数组转换为Object对象
		List<Object> courseIds=StringToList.tranfer(JSON2ObjUtil.getArrayFromString(courseId));
		//判断此课程是否已经被分享到小组课堂
		List<NewGroupCourse> newGroupCourses=new ArrayList<NewGroupCourse>();
		for(Object obj:courseIds){
			if(obj != null && !StringUtil.isBlank( obj.toString()) &&!isExiseByGroupIdAndCourseId(groupId, obj.toString())){
				//分享此课程到小组课堂
				NewGroupCourse gc=new NewGroupCourse(groupId,obj.toString(),user.getId());
				gc.setDisPlay(0);
				gc=setCategoryByCourseId(gc,obj.toString());
				//获得群组对象
				XueWenGroup group = groupService.findById(groupId);
				gc.setGroupName(group.getGroupName());
				gc.setLogoUrl(group.getLogoUrl());
				//分享到群里后将审核标示修改为审核通过
				gc.setReview(true);
				gc=newGroupCourseRepository.save(gc);
				newGroupCourses.add(gc);
				//增加课程池课程分享记录
				newCourseService.courseShare(obj.toString(), user.getId(), appKey ,Config.TOTYPE_INAPP_GROUP, groupId);
				//增加课程池课程分享统计数目
				newCourseService.increaseShareCount(obj.toString(), 1);
				//创建群组动态
				creatGroupNewGroupCourseDynamic(gc, user);
			}
		}
		if(newGroupCourses == null || newGroupCourses.size() == 0){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_COURSEHADSHARE_201,null);
		}
		return newGroupCourses;
	}
	
	/**
	 * 
	 * @param courseId
	 * @throws XueWenServiceException
	 */
	public NewGroupCourse setCategoryByCourseId(NewGroupCourse newGroupCourse,String courseId)throws XueWenServiceException{
		NewCourse newCourse=newCourseService.findOneNewCourseByIdRspCategoryInfo(courseId);
		if(newCourse !=null){
			newGroupCourse.setCategoryId(newCourse.getCategoryId());
			newGroupCourse.setChildCategoryId(newCourse.getChildCategoryId());
			return newGroupCourse;
		}else{
			throw new  XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
	}
	
	/**
	 * 根据群组ID获取小组课堂公开课程
	 * @param groupId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewGroupCourse> findOpenPageGroupCourseByGroupId(String groupId,Pageable pageable)throws XueWenServiceException{
		//参数判断
		if(StringUtil.isBlank(groupId)){
			throw new XueWenServiceException(Config.STATUS_601, Config.MSG_NOGROUP_601,null);
		}
		return newGroupCourseRepository.findByGroupAndDisPlayAndReview(groupId,0,true,pageable);
	}
	/**
	 * 首页获取小组课堂公开课程
	 * @param groupId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewGroupCourse> findOpenPageGroupCourse(Pageable pageable)throws XueWenServiceException{
		return newGroupCourseRepository.findByDisPlayAndReview(0,true,pageable);
	}
	
	/**
	 * 格式化groupCourse List
	 * @author hjn
	 * @param newGroupCourses
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> formateGroupCourseList(List<NewGroupCourse> newGroupCourses)throws XueWenServiceException{
		if(newGroupCourses != null && newGroupCourses.size()>0){
			List<Object> objs=new ArrayList<Object>();
			for(NewGroupCourse newGroupCourse:newGroupCourses){
				objs.add(formateGroupCourse(newGroupCourse,"",""));
			}
			return objs;
		}else{
			return null;
		}
	}
	
	/**
	 * 格式化groupCourse对象，返回前端前组装相关的course信息
	 * @author hjn
	 * @param groupCourse
	 * @return
	 * @throws XueWenServiceException
	 */
	public Object formateGroupCourse(NewGroupCourse newGroupCourse,String type,String userId)throws XueWenServiceException{
		//参数判断
		if(newGroupCourse == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//组装course的基本信息,其他字段删除
		NewCourse course=newCourseService.findOneNewCourseByIdBasicInfo(newGroupCourse.getCourse().toString());
		logger.info("课程Id："+newGroupCourse.getCourse().toString()  +"======课程对象"+course);
		newGroupCourse.setCourse(formateCourse(course));
		//组装用户信息，包括ID，userName,nickName,sex,phoneNumber,email,intro等，其他字段为空,并去掉
		User user=userService.getContactOfRspUserById(newGroupCourse.getWhoImport().toString());
		newGroupCourse.setWhoImport(formateUser(user));
		return formateNewGroupCourse(newGroupCourse,type,userId);
	}
	
	/**
	 * 格式化newCourse对象，只包含返回前端需要属性,去掉列表中不需要的whoFav,whoStudy,whoShare字段
	 * @author hjn
	 * @param lesson
	 * @return
	 * @throws XueWenServiceException
	 */
	public JSONObject formateNewGroupCourse(NewGroupCourse newCourse,String type,String userId)throws XueWenServiceException{
		//参数校验
		if(newCourse == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//去掉无需返回前端的属性,只包含以下属性
		String[] exclude = {"whoFav","whoStudy","whoShare"};
		
		Map<String,Object> addAndModifyMap=new HashMap<String, Object>();
//		if("index".equals(type)){//首页列表需要判断是否收藏过
//			addAndModifyMap.put("isLike", praiseService.isUserPraise(userId, Config.YXTDOMAIN, newCourse.getId(), Config.TYPE_COURSE_GROUP));
//		}
//		XueWenGroup group = groupService.findById(newCourse.getGroup().toString());
//		if(group!=null){
//			if(group.getGroupName()!=null){
//			addAndModifyMap.put("groupName", group.getGroupName());
//			}
//			if(group.getLogoUrl()!=null){
//				addAndModifyMap.put("groupLogoUrl", group.getLogoUrl());
//			}
//		}
		return  YXTJSONHelper.getExObjectAttrJsonObject(newCourse, addAndModifyMap,exclude);
				
	} 
	/**
	 * 格式化newCourse对象，只包含返回前端需要属性
	 * @author hjn
	 * @param lesson
	 * @return
	 * @throws XueWenServiceException
	 */
	public JSONObject formateCourse(NewCourse newCourse)throws XueWenServiceException{
		//参数校验
		if(newCourse == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//去掉无需返回前端的属性,只包含以下属性
		String[] include = {"id","title","intro","tags","logoUrl","price","createUser","pricemodel","favProp","buyCount"};
		return  YXTJSONHelper.includeAttrJsonObject(newCourse, include);
		
	} 
	/**
	 * 格式化User对象，只包含返回前端需要属性
	 * @author hjn
	 * @param lesson
	 * @return
	 * @throws XueWenServiceException
	 */
	public JSONObject formateUser(User user)throws XueWenServiceException{
		//参数校验
		if(user == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//去掉无需返回前端的属性,只包含以下属性
		String[] include = {"id","userName","nickName"};
		return  YXTJSONHelper.includeAttrJsonObject(user, include);
		
	} 
	
	/**
	 * 判断群组课程是否被用户收藏
	 * @param courseId
	 * @param userId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isGroupCourseFavByUser(String groupCourseId,String userId)throws XueWenServiceException{
		return favService.isUserFav(userId, Config.YXTDOMAIN, groupCourseId, Config.TYPE_COURSE_GROUP);
	}
	
	/**
	 * 添加用户收藏群组课程记录
	 * @param courseId
	 * @param userId
	 * @return
	 * @throws XueWenServiceException
	 */
	public void groupCourseFav(String groupCourseId,String userId,String appkey)throws XueWenServiceException{
		favService.addFavNotCheck(Config.YXTDOMAIN, appkey, groupCourseId, Config.TYPE_COURSE_GROUP, userId);
	}
	
	
	/**
	 * 增加群组课程收藏数量
	 * @throws XueWenServiceException
	 */
	public void increaseFavCount(String groupCourseId,int increaseNum)throws XueWenServiceException{
		newGroupCourseTemplate.increaseFavCount(groupCourseId, increaseNum);
	}
	/**
	 * 判断群组课程是否被用户学习
	 * @param courseId
	 * @param userId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isGroupCourseStudyByUser(String groupCourseId,String userId)throws XueWenServiceException{
		return studyService.isUserFav(userId, Config.YXTDOMAIN, groupCourseId, Config.TYPE_COURSE_GROUP);
	}
	/**
	 * 添加用户学习群组课程记录
	 * @param courseId
	 * @param userId
	 * @return
	 * @throws XueWenServiceException
	 */
	public void groupCourseStudy(String groupCourseId,String userId,String appkey)throws XueWenServiceException{
		studyService.addStudyNotCheck(Config.YXTDOMAIN, appkey, groupCourseId, Config.TYPE_COURSE_GROUP, userId);
	}
	
	
	/**
	 * 增加群组课程学习数量
	 * @throws XueWenServiceException
	 */
	public void increaseStudyCount(String groupCourseId,int increaseNum)throws XueWenServiceException{
		newGroupCourseTemplate.increaseStudyCount(groupCourseId, increaseNum);
	}
	/**
	 * 添加用户分享群组课程记录
	 * @param courseId
	 * @param userId
	 * @return
	 * @throws XueWenServiceException
	 */
	public void groupCourseShare(String groupCourseId,String userId,String appkey,String toType,String toAddr)throws XueWenServiceException{
		shareService.addShare(userId,Config.YXTDOMAIN, appkey, groupCourseId, Config.TYPE_COURSE_GROUP, toType, toAddr);
	}
	
	
	/**
	 * 增加群组课程分享数量
	 * @throws XueWenServiceException
	 */
	public void increaseShareCount(String groupCourseId,int increaseNum)throws XueWenServiceException{
		newGroupCourseTemplate.increaseShareCount(groupCourseId, increaseNum);
	}
	
	/**
	 * 查询某一小组下的课程数量
	 * @param groupId
	 * @return
	 */
	public int getCourseCountByGroup(String groupId){
		return newGroupCourseRepository.countByGroupAndDisPlay(groupId,0);
	}
	
	/**
	 * 查询分享到群租的课程
	 * @param groupId
	 * @return
	 */
	public Page<NewGroupCourse> getGroupCourseList(Pageable page){
		return newGroupCourseRepository.findAll(page);
	}
	
	/**
	 * 格式化groupCourse对象，返回前端前组装相关的course信息
	 * @author hjn
	 * @param groupCourse
	 * @return
	 * @throws XueWenServiceException
	 */
	public Object formateGroupCourse(String newGroupCourseId)throws XueWenServiceException{
		//参数判断
		if(newGroupCourseId == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		NewGroupCourse newGroupCourse = newGroupCourseRepository.findOne(newGroupCourseId);
		//组装course的基本信息,其他字段删除
		NewCourse course=newCourseService.findOneNewCourseByIdBasicInfo(newGroupCourse.getCourse().toString());
		newGroupCourse.setCourse(formateCourse(course));
		//组装用户信息，包括ID，userName,nickName,sex,phoneNumber,email,intro等，其他字段为空,并去掉
		User user=userService.getContactOfRspUserById(newGroupCourse.getWhoImport().toString());
		newGroupCourse.setWhoImport(formateUser(user));
		return formateNewGroupCourse(newGroupCourse,"","");
	}
	
	
	/**
	 * 群组管理员删除群组课程
	 * @author hjn
	 * @param groupId 群组ID
	 * @param courseId 课程ID
	 * @param userId 当前分享用户ID
	 * @throws XueWenServiceException
	 */
	public void deleteGroupCourseList(String groupId,String groupCourseId,String userId)throws XueWenServiceException{
		//参数判断
		if(StringUtil.isBlank(groupId) || StringUtil.isBlank(groupCourseId) || StringUtil.isBlank(userId)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//判断当前用户是否为群管理员或者创建者
		if(groupService.isGroupAdmin(groupId, userId) || newGroupCourseTemplate.isExiseByWhoImport(groupCourseId, userId)){
			//前端传值的courseID JSON数组转换为Object对象
			List<Object> groupCourseIds=StringToList.tranfer(JSON2ObjUtil.getArrayFromString(groupCourseId));
			//删除群组课程
			newGroupCourseTemplate.deleteByIds(groupCourseIds);
			//删除用户群组关系
			userGroupCourseService.deleteByGroupCourseIds(groupCourseIds);
			//删除收藏
			favService.deleteBySourceIds(groupCourseIds);
			//删除分享
			shareService.deleteBySourceIds(groupCourseIds);
			//删除学习
			studyService.deleteBySourceIds(groupCourseIds);
			//删除群组课程动态
			groupDynamicService.deleteGroupDynamics(groupCourseIds);
		}else{
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NOTINGROUP_201,null);
		}
		
	}
	
	/**
	 * 根据群组ID和用户ID删除群课程相关数据（群管理员解散群组）
	 * @param groupId
	 * @param userId
	 * @throws XueWenServiceException
	 */
	public void deleteGroupCourseList(String groupId,String userId)throws XueWenServiceException{
		//参数判断
		if(StringUtil.isBlank(groupId) || StringUtil.isBlank(userId)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_PROPERTIESERROR_201,null);
		}
		//判断当前用户是否为群组成员
//		if(!groupService.isGroupOwner(userId, groupId)){
//			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NOTINGROUP_201,null);
//		}
		List<Object> groupCourseIds=findGroupCourseIdsListByGroupId(groupId);
		//删除收藏
		favService.deleteBySourceIds(groupCourseIds);
		//删除分享
		shareService.deleteBySourceIds(groupCourseIds);
		//删除学习
		studyService.deleteBySourceIds(groupCourseIds);
		//删除群组课程
		newGroupCourseTemplate.deleteByGroupId(groupId);
		//删除用户群组关系
		userGroupCourseService.deleteByGroupId(groupId);
		//删除分享（删除分享目的地址为群组的分享记录）
		shareService.deleteByToAddrAndToType(groupId, Config.TOTYPE_INAPP_GROUP);
		//删除群组课程动态
		groupDynamicService.deleteGroupDynamics(groupCourseIds);
	}
	
	/**
	 * 根据课程Id删除群组课程相关
	 * @param courseId
	 * @throws XueWenServiceException
	 */
	public void deleteGroupCourseListByCourseId(String courseId)throws XueWenServiceException{
		//根据课程Id查找群组课程ID集合
		List<Object> groupCourseIds=findGroupCourseIdsListByCourseId(courseId);
		//删除收藏
		favService.deleteBySourceIds(groupCourseIds);
		//删除分享
		shareService.deleteBySourceIds(groupCourseIds);
		//删除学习
		studyService.deleteBySourceIds(groupCourseIds);
		//删除用户群组课程
		userGroupCourseService.deleteUserGroupCourseByCourseId(courseId);
		//删除群组课程记录
		newGroupCourseTemplate.deleteByCourseId(courseId);
		//删除群组课程动态
		groupDynamicService.deleteGroupDynamics(groupCourseIds);
	}
	
	/**
	 * 根据群组Id获取群组课程Id集合
	 * @param groupId
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> findGroupCourseIdsListByGroupId(String groupId)throws XueWenServiceException{
		//根据群组Id获取群组课程集合（只有Id节点）
		List<NewGroupCourse> newGroupCourses=newGroupCourseTemplate.findGroupCourseIdsListByGroupId(groupId);
		return getGroupCourseIdsListByGroupCourseList(newGroupCourses);
	}
	/**
	 * 根据课程Id获取群组课程Id集合
	 * @param groupId
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> findGroupCourseIdsListByCourseId(String courseId)throws XueWenServiceException{
		//根据群组Id获取群组课程集合（只有Id节点）
		List<NewGroupCourse> newGroupCourses=newGroupCourseTemplate.findGroupCourseIdsListByCourseId(courseId);
		return getGroupCourseIdsListByGroupCourseList(newGroupCourses);
	}
	
	
	
	/**
	 * 根据群组课程列表返回群组课程ID列表,可能返回null
	 * @param newGroupCourses
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> getGroupCourseIdsListByGroupCourseList(List<NewGroupCourse> newGroupCourses)throws XueWenServiceException{
		if(newGroupCourses != null){
			List<Object> groupCourseIds=new ArrayList<Object>();
			for(NewGroupCourse newGroupCourse:newGroupCourses){
				groupCourseIds.add(newGroupCourse.getId());
			}
			return groupCourseIds;
		}else{
			return null;
		}
	}
	
	/**
	 * 根据群组ID获取群组课程的课程ID集合
	 * @param groupId
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> findGroupCourseCourseIdsByGroupId(String groupId)throws XueWenServiceException{
		//根据群组Id获取群组课程集合（只有Id节点）
		List<NewGroupCourse> newGroupCourses=newGroupCourseTemplate.findGroupCourseCourseIdsByGroupId(groupId);
		return getGroupCourseCourseIdsByGroupCourseList(newGroupCourses);
	}
	
	/**
	 * 根据群组课程集合获取群组课程的课程Id集合
	 * @param newGroupCourses
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> getGroupCourseCourseIdsByGroupCourseList(List<NewGroupCourse> newGroupCourses)throws XueWenServiceException{
		if(newGroupCourses != null){
			List<Object> courseIds=new ArrayList<Object>();
			for(NewGroupCourse newGroupCourse:newGroupCourses){
				courseIds.add(newGroupCourse.getCourse());
			}
			return courseIds;
		}else{
			return null;
		}
	}
	
	
	/**
	 * 根据关键字搜索课程
	 * @param keyWord
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewGroupCourse> search(String keywords,Pageable pageable)throws XueWenServiceException{
		List<Object> newCourseIdsList=newCourseService.searchByKeywordsRspIdsList(keywords);
		if(newCourseIdsList != null){
			return  newGroupCourseRepository.findByCourseInAndReview(newCourseIdsList,true, pageable);
		}else{
			return null;
		}
	}
	
	/**
	 * 根据群组课程Id返回收藏统计和学习统计
	 * @param groupCourseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public NewGroupCourse findOneRspStudyCountAndFavCount(String groupCourseId)throws XueWenServiceException{
		return newGroupCourseTemplate.findOneRspStudyCountAndFavCount(groupCourseId);
	}

	/**
	 * @throws XueWenServiceException 
	 * Jack Tang
	 * 
	 * @Title: findOneByCourseId
	 * @Description: 通过一个课程id推荐一个群
	 * @param courseId
	 *            void
	 * @throws
	 */
	public JSONObject findOneByCourseId(String courseId) throws XueWenServiceException {
		// TODO 推荐的规则暂未定 这里只是随意取了一个
		if(StringUtil.isBlank(courseId)){
			throw new XueWenServiceException(Config.STATUS_201,"课程id不能为空",null);
		}
		NewGroupCourse course = newGroupCourseRepository
				.findOneByCourse(courseId);
		if (course == null) {
			return null;
		} else {
			String groupId = (String) course.getGroup();
			XueWenGroup group = groupService.findById(groupId);
			String[] includeKey = new String[] { "id","groupName", "title", "intro",
					"utime", "logoUrl", "studyCount" };
			
			if (group != null) {
				return YXTJSONHelper.includeAttrJsonObject(group, includeKey);
			} else {
				return null;
			}
		}
	}
	
	/**
	 * 
	 * @auther tangli
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException NewGroupCourse
	 * @Date:2015年4月30日
	 * @throws
	 */
	public NewGroupCourse findNewGroupCourseByCourseId(String courseId)
			throws XueWenServiceException {
		if (StringUtil.isBlank(courseId)) {
			throw new XueWenServiceException(Config.STATUS_201, "课程id不能为空",
					null);
		}
		NewGroupCourse course = newGroupCourseRepository
				.findOneByCourse(courseId);
		if (course == null) {
			return null;
		} else {
			return course;
		}
	}
	
	
	/**
	 * 
	 * @auther tangli
	 * @param courseId
	 * @return
	 * @throws XueWenServiceException NewGroupCourse
	 * @Date:2015年4月30日
	 * @throws
	 */
	public NewGroupCourse findNewGroupCourseByCourseIdAndGroupId(String courseId,String groupid)
			throws XueWenServiceException {
		if (StringUtil.isBlank(courseId)) {
			throw new XueWenServiceException(Config.STATUS_201, "课程id不能为空",
					null);
		}
		NewGroupCourse course = newGroupCourseRepository
				.findByGroupAndCourse(groupid,courseId);
		if (course == null) {
			return null;
		} else {
			return course;
		}
	}
	
	
    
	/**
	 * 
	 * @Title: findByGroupId
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @param groupId
	 * @return List<NewGroupCourse>
	 * @throws
	 */
	public List<NewGroupCourse> findByGroupId(String groupId) {
		return newGroupCourseRepository.findByGroupAndReview(groupId,true);
	}
	/**
	 * 
	 * @param groupId
	 * @return
	 */
	public List<NewGroupCourse> findByGroupIdPC(String groupId) {
		return newGroupCourseRepository.findByGroup(groupId);
	}
	
	/**
	 * 
	 * @Title: findByGroupId
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @param groupId
	 * @return List<NewGroupCourse>
	 * @throws
	 */
	public List<NewGroupCourse> findBycourseId(String courseid) {
		return newGroupCourseRepository.findByCourse(courseid);
	}
	
	/**
	 * 根据一级分类查询群组课程
	 * @param categoryId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewGroupCourse> findByCategoryId(String categoryId,Pageable pageable)throws XueWenServiceException{
		return newGroupCourseRepository.findByCategoryIdAndReview(categoryId,true, pageable);
	}
	/**
	 * 根据一级分类Id统计群组课程数目
	 * @param categoryId
	 * @return
	 * @throws XueWenServiceException
	 */
	public int countByCategoryId(String categoryId)throws XueWenServiceException{
		return newGroupCourseRepository.countByCategoryId(categoryId);
	}
	/**
	 * 根据二级分类查询群组课程
	 * @param childCategoryId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewGroupCourse> findByChildCategoryId(String childCategoryId,Pageable pageable)throws XueWenServiceException{
		return newGroupCourseRepository.findByChildCategoryIdAndReview(childCategoryId,true, pageable);
	}
	/**
	 * 根据二级分类统计群组课程数量
	 * @param childCategoryId
	 * @return
	 * @throws XueWenServiceException
	 */
	public int countByChildCategoryId(String childCategoryId)throws XueWenServiceException{
		return newGroupCourseRepository.countByChildCategoryId(childCategoryId);
	}
	/**
	 * 根据分类查询群组课程，优先级  二级分类---》一级分类----》所有
	 * @param categoryId
	 * @param childCategoryId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewGroupCourse> findByCategory(String categoryId,String childCategoryId,Pageable pageable)throws XueWenServiceException{
		if(!StringUtil.isBlank(childCategoryId)){
			return findByChildCategoryId(childCategoryId,pageable);
		}else if(!StringUtil.isBlank(categoryId)){
			return findByCategoryId(categoryId,pageable);
		}else{
			return findOpenPageGroupCourse(pageable);
		}
	}
	
	/**
	 * 为所有课程池课程的老数据添加分类，分类桶课程池课程
	 * @throws XueWenServiceException
	 */
	public void addCategoryForAllGroupCourse()throws XueWenServiceException{
		List<NewGroupCourse> gcs=newGroupCourseRepository.findAll();
		for(NewGroupCourse gc:gcs){
			NewCourse c=newCourseService.findOneNewCourseByIdRspCategoryInfo(gc.getCourse().toString());
			gc.setCategoryId(c.getCategoryId());
			gc.setChildCategoryId(c.getChildCategoryId());
			newGroupCourseRepository.save(gc);
		}
	}
	
	/**
	 * 
	 * @Title: findByIdIn
	 * @auther Tangli
	 * @Description: 通过ids取
	 * @param ids
	 * @return List<NewGroupCourse>
	 * @throws
	 */
	public List<NewGroupCourse> findByIdIn(List<Object> ids) {
		return newGroupCourseRepository.findByIdInAndReview(ids,true);		
	}
	
	/**
	 * 
	 * @Title: findByIdIn
	 * @auther Tangli
	 * @Description: 通过ids取
	 * @param ids
	 * @return List<NewGroupCourse>
	 * @throws
	 */
	public Page<NewGroupCourse> findByIdIn(List<Object> ids,Pageable pageable) {
		return newGroupCourseRepository.findByIdInAndReview(ids ,true,pageable);		
	}
	/**
	 * 小组课程排行版
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewGroupCourse> findCourseByReview(Pageable pageable)throws XueWenServiceException{
		return newGroupCourseRepository.findByDisPlayAndReview(0,true,pageable);
	}
	
	/**
	 * 存储课程
	 * @throws XueWenServiceException
	 */
	public void saveGroupCourse(NewGroupCourse n)throws XueWenServiceException{
		newGroupCourseRepository.save(n);
	}
	/**
	 * 格式化groupCourse List
	 * @author hjn
	 * @param newGroupCourses
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> toBoxResponses(List<Box> boxs,String type,String userId)throws XueWenServiceException{
		List<Object> objs=new ArrayList<Object>();
		if(boxs !=null && boxs.size()>0){
			for(Box box:boxs){
				NewGroupCourse newGroupCourse=newGroupCourseRepository.findOne(box.getSourceId().toString());
				objs.add(formateGroupCourse(newGroupCourse,type,userId));
			}
			return objs;
		}
		return null;
	}
	/**
	 * 小组课程排行版
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewGroupCourse> findGroupCourseNotInBox(String boxPostId,Pageable pageable)throws XueWenServiceException{
		
		List<Object> l=boxService.getSourceIdsByBoxPostId(boxPostId);
		Page<NewGroupCourse> ll=newGroupCourseRepository.findByCourseNotInAndReview(l,true,pageable);
//		List<Object> lll=new ArrayList<Object>();
//		for(NewGroupCourse n:ll){
//			lll.add(n.getCourse());
//		}
//		
		return ll;
	}
	
	
	/**
	 * 
	 * 根据位置中的群组列表返回群组列表
	 * 
	 * @param boxs
	 * 
	 * @return
	 * 
	 * @throws XueWenServiceException
	 */

	public List<NewGroupCourse> toBoxResponsesTonewgroupcourse(List<Box> boxs) throws XueWenServiceException {

		List<NewGroupCourse> courseRes = new ArrayList<NewGroupCourse>();
		if (boxs != null && boxs.size() > 0) {
			for (Box box : boxs) {
				NewGroupCourse newcourse = newGroupCourseRepository.findOne(box.getSourceId().toString());
				if (newcourse != null) {
					// Map<String,Object> addAndModifyMap=new HashMap<String,
					// Object>();
					// addAndModifyMap.put("boxId", box.getId());
					// String[] exclude =
					// {"post","praiseResponse","position","tagName","group","categoryId","childCategoryId"};
					courseRes.add(newcourse);
				}
			}
		}
		return courseRes;

	}
	
	/**
	 * 合并用户，将fromUser分享到群组的课程变为toUser分享
	 * @param fromUser
	 * @param toUser
	 * @throws XueWenServiceException
	 */
	public void mergeNewGroupCourse(String fromUser,String toUser)throws XueWenServiceException{
		List<NewGroupCourse> newGroupCourses=newGroupCourseRepository.findByWhoImportAndReview(fromUser,true);
		if(newGroupCourses !=null && newGroupCourses.size() >0){
			for(NewGroupCourse ngc:newGroupCourses){
				if(!newGroupCourseTemplate.isExiseByUserIdAndGroupIdAndCourseId(toUser, ngc.getGroup().toString(), ngc.getCourse().toString())){
					ngc.setWhoImport(toUser);
				}
			}
			newGroupCourseRepository.save(newGroupCourses);
		}
	}
	/**
	 * 查询出所有群组课程数据
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<NewGroupCourse> findAll()throws XueWenServiceException{
		return newGroupCourseRepository.findAll();
	}
	
	/**
	 * 查询出所有群组课程数据
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<NewGroupCourse> findbychildCategoryId(String id)throws XueWenServiceException{
		return newGroupCourseRepository.findByChildCategoryIdAndReview(id,true);
	}
	
	/**
	 * 创建群组课程动态
	 * @param newGroupCorse
	 * @param user
	 * @throws XueWenServiceException
	 */
	public void creatGroupNewGroupCourseDynamic(NewGroupCourse newGroupCorse,User user)throws XueWenServiceException{
		//获取课程信息
		NewCourse course=newCourseService.findOneNewCourseByIdBasicInfo(newGroupCorse.getCourse().toString());
		//创建图片集合
		List<Images> images=creatImagesList(course);
		groupDynamicService.addGroupDynamic(newGroupCorse.getGroup().toString(),"","", newGroupCorse.getId(), course.getTitle(), 
				course.getIntro(),newGroupCorse.getCourse().toString() , images, 
				user.getId(), user.getNickName(), user.getLogoURL(), Config.TYPE_COURSE_GROUP, newGroupCorse.getCtime());
	}
	
	/**
	 * 创建关键图片集合
	 * @param drycargo
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Images> creatImagesList(NewCourse course)throws XueWenServiceException{
		Images image=new Images();
		image.setPicUrl(course.getLogoUrl());
		List<Images> images=new ArrayList<Images>();
		images.add(image);
		return images;
	}
	/**
	 * 老数据创建群组动态
	 * @throws XueWenServiceException
	 */
//	public void creatOldGroupNewGroupCourseDynamic()throws XueWenServiceException{
//		List<NewGroupCourse> newGroupCourses=findAll();
//		for(NewGroupCourse newGroupCourse:newGroupCourses){
//			User user=userService.findOne(newGroupCourse.getWhoImport().toString());
//			creatGroupNewGroupCourseDynamic(newGroupCourse,user);
//		}
//	}
	
	/**
	 * 根据群组课程Id返回收藏统计和学习统计
	 * @param groupCourseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public NewGroupCourse findOneByid(String groupCourseId)throws XueWenServiceException{
		return newGroupCourseRepository.findOne(groupCourseId);
	}
	
	/**
	 * 获得分享数最高的课程
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<NewCourse> findCourse(Pageable pageable)throws XueWenServiceException{
		return newCourseService.getCheckedCourses(pageable);
	}
	
	/**
	 * 格式化groupCourse List
	 * @author hjn
	 * @param newGroupCourses
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<Object> courseToGroupCourse(List<NewCourse> newCourses)throws XueWenServiceException{
		NewCourse one = null;
		List<NewGroupCourse> result = new ArrayList<NewGroupCourse>();
		if(newCourses!=null && newCourses.size() > 0){
			for(int i = 0; i < newCourses.size(); i++){
				one = newCourses.get(i);
				List<NewGroupCourse> newGroupCourse = newGroupCourseRepository.findByCourseAndDisPlayAndReview(one.getId(), 0,true);
				if(newGroupCourse!=null && newGroupCourse.size() > 0){
					NewGroupCourse un = newGroupCourse.get(StringUtil.getOneInt(newGroupCourse.size()));
					result.add(un);
				}
			}
		}
		return this.formateGroupCourseList(result);
		
	}
	
	/**
	 * 根据群组课程Id获取群组课程统计数据
	 * @param newGroupCourseId
	 * @return
	 * @throws XueWenServiceException
	 */
	public NewGroupCourse getNewGroupCourseCountInfo(String newGroupCourseId)throws XueWenServiceException{
		return newGroupCourseTemplate.getNewGroupCourseCountInfo(newGroupCourseId);
	}
	/**
	 * 增加群组课程（群名称及群logo）
	 * @param request
	 * @return
	 */
	public void updateGroupCourse() throws XueWenServiceException{
		List<NewGroupCourse> newCourse = newGroupCourseRepository.findAll();
		for(int i = 0 ; i < newCourse.size() ; i++){
			if(StringUtil.isBlank(newCourse.get(i).getGroupName())){
				XueWenGroup group = groupService.findByid(newCourse.get(i).getGroup().toString());
				if(group != null){
					if(StringUtil.isBlank(newCourse.get(i).getGroupName())){
					newCourse.get(i).setGroupName(group.getGroupName());
					newCourse.get(i).setLogoUrl(group.getLogoUrl());
					newGroupCourseRepository.save(newCourse.get(i));
					}
				}
			}
		}
		
	}
	
	/**
	 * 存储课程
	 * @throws XueWenServiceException
	 */
	public NewGroupCourse saveCourse(NewGroupCourse n)throws XueWenServiceException{
	 return newGroupCourseRepository.save(n);
	}

	public Page<NewGroupCourse> findByBoxPostIdNotInBoxAndNotInCategory(String boxPostId, String type, String category, Pageable pageable) throws XueWenServiceException{
		List<Object> ids=boxService.getSourceIdsByBoxPostIdAndNotInCagetory(boxPostId,type);
		return newGroupCourseRepository.findByIdNotIn(ids, pageable);
	}
	
}
