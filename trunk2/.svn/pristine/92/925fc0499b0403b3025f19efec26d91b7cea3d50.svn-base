package operation.controller.oss;

import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.jsoup.helper.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import operation.OssController;
import operation.exception.XueWenServiceException;
import operation.pojo.course.NewCourse;
import operation.pojo.course.NewGroupCourse;
import operation.pojo.drycargo.Drycargo;
import operation.pojo.drycargo.DrycargoBean;
import operation.pojo.drycargo.DrycargoResponse;
import operation.pojo.pub.QueryModel;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.user.User;
import operation.service.course.NewCourseService;
import operation.service.course.NewGroupCourseService;
import operation.service.drycargo.DrycargoBeanService;
import operation.service.drycargo.DrycargoService;
import operation.service.user.UserService;
import tools.Config;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;

@RestController
@RequestMapping("/oss/course")
@Configuration
public class OssCourseController extends OssController {


	@Autowired
	private NewCourseService newCourseService;
	
	@Autowired
	private NewGroupCourseService newGroupCourseService;
	
	
	/**
		 * 
		 * @Title: getCourses
		 * @Description: 分页获取课程 yj
		 * @param request
		 * @param dm
		 * @return ResponseContainer
		 * @throws
		 */
		@RequestMapping("/courses")
		public @ResponseBody ResponseContainer getCourses(HttpServletRequest request,QueryModel dm){
			try {
				dm.setSort("id");
				Pageable pageable = PageRequestTools.pageRequesMake(dm);
				Page<NewCourse> newCourses = newCourseService.getCourses(pageable);
				ReponseDataTools.getClientReponseData(rsData, newCourses);
				return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
			} catch (Exception e) {
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		
		
		/**
		 * 分页获取小组课堂列表
		 * @author hjn
		 * @param request
		 * @return
		 */
		@RequestMapping("/groupCourses")
		public @ResponseBody ResponseContainer groupCourses(HttpServletRequest request,QueryModel dm) {
			try {
				String groupId = request.getParameter("groupId");
				
				Pageable pageable = PageRequestTools.pageRequesMake(dm);
				Page<NewGroupCourse> newGroupCourses=newGroupCourseService.findOpenPageGroupCourseByGroupId(groupId, pageable);
				ReponseDataTools.getClientReponseData(rsData, newGroupCourses);
				this.rsData.setResult(newGroupCourseService.formateGroupCourseList(newGroupCourses.getContent()));
				return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
			} catch (XueWenServiceException e) {
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
			} catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
			}
		}
		

	

}
