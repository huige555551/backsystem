package operation.service.live;

import java.util.ArrayList;
import java.util.List;

import love.cq.util.StringUtil;
import net.sf.json.JSONObject;
import operation.exception.XueWenServiceException;
import operation.pojo.live.Live;
import operation.pojo.topics.Images;
import operation.pojo.user.User;
import operation.repo.live.LiveRepo;
import operation.repo.live.LiveTemplate;
import operation.service.activity.NewActivityService;
import operation.service.dynamic.GroupDynamicService;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import tools.Config;
import tools.JSON2ObjUtil;

/**
 * 直播
 * 
 * @author nes
 *
 */
@Service
public class LiveService {
	private static final Logger l=Logger.getLogger(NewActivityService.class);
	@Autowired
	private LiveRepo liveRepo;
	@Autowired
	private LiveTemplate liveTemplate;
	@Autowired
	private GroupDynamicService groupDynamicService;
	
	/**
	 * 创建直播
	 * @param url
	 * @param currUser
	 * @param sourceId
	 * @param groupName
	 * @param groupLogoUrl
	 * @return
	 * @throws XueWenServiceException
	 */
	public Live create(String url, User currUser, String sourceId,String groupName, String groupLogoUrl) throws XueWenServiceException{
		return null;
	}
	/**
	 * 查询群组直播课
	 * @param groupId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Live> findByGroupId(String groupId, Pageable pageable) throws XueWenServiceException{
		return liveTemplate.findByGroupId(pageable, groupId);
	}
	/**
	 * 修改直播课
	 * @param activityId
	 * @param currUser
	 * @param live
	 * @return
	 */
	public boolean update(String liveId, User currUser, Live live,String image,String group) throws XueWenServiceException{
		Live liveResult = liveRepo.findOne(liveId);
		if(liveResult == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NODATA_201,null);
		}
		if (!StringUtil.isBlank(image)) { //如果图片不为空
			List<Images> imageList = JSON2ObjUtil.getDTOList(image,Images.class);
			liveResult.setImages(imageList);
		}
		//去掉的群组
		List<JSONObject> removeGroup=new ArrayList<JSONObject>();//去掉的群组列表
		List<JSONObject> addGroup=new ArrayList<JSONObject>();//新增的群组列表
		
		if(!StringUtil.isBlank(group)){ //如果分享的群不为空
			List<JSONObject> groupList = JSON2ObjUtil.getDTOList(group,JSONObject.class);
			List<JSONObject> oldGroupList=liveResult.getGroup();//原有的群组列表
			
			addGroup.addAll(groupList);//修改后的群组列表
			addGroup.removeAll(oldGroupList);//新增的群组
			removeGroup.addAll(oldGroupList);//以前有的群组列表
			removeGroup.removeAll(groupList);//删除的群组列表
			
			liveResult.setGroup(groupList);
		}
		if(!StringUtil.isBlank(live.getIntro())){
			liveResult.setIntro(live.getIntro());
		}
		if(!StringUtil.isBlank(live.getTitle())){
			liveResult.setTitle(live.getTitle());
		}
		if(live.getLiveEndTime()!=0){
			liveResult.setLiveEndTime(live.getLiveEndTime());
		}
		if(live.getLiveStartTime()!=0){
			liveResult.setLiveStartTime(live.getLiveStartTime());
		}
		liveRepo.save(liveResult);
		/**
		 * 新增的群组添加动态
		 */
		for(JSONObject obj:addGroup){
    		try {
    			//创建群组动态
    			this.createGroupDynamic(liveResult, obj.getString("groupId"));
    		} catch (Exception e) {
    			l.error("======创建活动群组动态失败：========"+e);
    		}
    	}
		//删除去掉的群组动态
		for(JSONObject obj:removeGroup){
			try {
				//创建群组动态
				this.deleteByGroupIdAndSourceId( obj.getString("groupId"),liveResult.getId());
			} catch (Exception e) {
				l.error("======创建活动群组动态失败：========"+e);
			}
		}
		return true;
	}
	/**
	 * 分享直播
	 * @param liveId
	 * @param group
	 * @param currUser
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean share(String liveId, String source, User currUser) throws XueWenServiceException{
		Live liveResult = liveRepo.findOne(liveId);
		if(liveResult == null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_NODATA_201,null);
		}
		List<JSONObject> newAddGroups=new ArrayList<JSONObject>();
		if(!StringUtil.isBlank(source)){
			List<JSONObject> groupList = JSON2ObjUtil.getDTOList(source,JSONObject.class);
			newAddGroups.addAll(groupList);
			List<JSONObject> oldGroup=liveResult.getGroup();
			//取新增的群组
			newAddGroups.removeAll(oldGroup); 
			liveResult.getGroup().addAll(newAddGroups);
		}

    	liveRepo.save(liveResult);
    	for(JSONObject obj:newAddGroups){
    		try {
    			//创建群组动态
    			this.createGroupDynamic(liveResult, obj.getString("groupId"));
    		} catch (Exception e) {
    			l.error("======创建活动群组动态失败：========"+e);
    		}
    	}
    	return true;
	}
	/**
	 * 创建动态
	 * @param a
	 * @param groupId
	 * @throws XueWenServiceException
	 */
	private void createGroupDynamic(Live a, String groupId) throws XueWenServiceException{
		if(a !=null && !StringUtil.isBlank(groupId) ){
			groupDynamicService.addGroupDynamic(groupId, "","",a.getId(), a.getTitle(), a.getIntro(),
			"", a.getImages(),"", "", "", Config.TYPE_ACTIVITY_GROUP,a.getCtime());
		}
	}
	/**
	 * 根据sourceId和群组Id删除相关动态
	 * @param groupId
	 * @param sourceId
	 * @throws XueWenServiceException
	 */
	public void deleteByGroupIdAndSourceId(String groupId,String sourceId)throws XueWenServiceException{
		if(!StringUtil.isBlank(groupId) && !StringUtil.isBlank(sourceId)){
			groupDynamicService.deleteByGroupIdAndSourceId(groupId, sourceId);
		}
	}

}
