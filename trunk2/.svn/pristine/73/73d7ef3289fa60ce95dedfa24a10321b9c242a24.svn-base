package operation.controller.topics;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;
import operation.BaseController;
import operation.exception.XueWenServiceException;
import operation.pojo.pub.QueryModel;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.topics.Topic;
import operation.pojo.topics.TopicNearResponse;
import operation.pojo.topics.TopicResponse;
import operation.pojo.user.User;
import operation.service.topics.PostService;
import operation.service.topics.TopicService;
import operation.service.user.UserService;

import org.jsoup.helper.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.geo.Distance;
import org.springframework.data.geo.Metrics;
import org.springframework.data.geo.Point;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import tools.Config;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;

@RestController
@RequestMapping("/topic")
public class TopicController extends BaseController {

	@Autowired
	private TopicService topicService;

	@Autowired
	private PostService postService;
	
	@Autowired
	private UserService userservice;
	
	

	/**
	 * 创建主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "create", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer create(HttpServletRequest request,Topic topic, String tagName, String isGeoOpen) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String image = request.getParameter("image");
			System.out.println("image========" + image);
			Topic topicResult = topicService.createTopic(currentUser, topic,tagName, isGeoOpen,image);
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200,topicResult, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 创建主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "createPc", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer createPc(HttpServletRequest request,Topic topic, String tagName, String isGeoOpen) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			Topic topicResult = topicService.createTopicPc(currentUser, topic,tagName, isGeoOpen);
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200,topicResult, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 根据群组id或者课程Id查询话题列表
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("one/source")
	public @ResponseBody ResponseContainer findByGroupId(HttpServletRequest request, Topic topic, QueryModelMul dm) {
		try {
		String token = request.getParameter("token");	
		User currentUser = this.getCurrentUser(token);
		String groupId = request.getParameter("sourceId");
		String courseId = request.getParameter("courseId");
		String appKey = request.getParameter("appKey");
		List<String> sort = new ArrayList<String>();
		sort.add("displayOrder");
		sort.add("displayTime");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		Page<Topic> topicResult = topicService.findTopicByGroupIdOrCourseId(groupId,appKey, courseId,pageable);
		ReponseDataTools.getClientReponseData(getReponseData(), topicResult);
		this.getReponseData().setResult(topicService.toJSONHelper(topicResult.getContent(),currentUser));
		return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} 
		catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询主题详情
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("one")
	public @ResponseBody ResponseContainer findOneTopic(HttpServletRequest request) {
		String topicId = request.getParameter("topicId");
		String token = request.getParameter("token");
		String sourceId = request.getParameter("sourceId");
		try {
			User currentUser = this.getCurrentUser(token);
			TopicResponse tpoicRes = topicService.topicDetails(currentUser.getId(), topicId, sourceId);
			return addResponse(Config.STATUS_200, Config.MSG_200, tpoicRes,	Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}

	}

	/**
	 * 
	 * @Title: getOne
	 * @Description: 通过topId取主题
	 * @param topicId
	 * @param token
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getOneById")
	public ResponseContainer getOne(String topicId, String token) {
		try {
			User user = this.getCurrentUser(token);
			TopicResponse res = topicService.topicDetail(user.getId(), topicId);
			return addResponse(Config.STATUS_200, Config.MSG_200, res,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}

	}
	
	/**
	 * 
	 * @Title: getOne
	 * @Description: 通过topId取主题
	 * @param topicId
	 * @param token
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getOneByIdPc")
	public ResponseContainer getOnePc(String topicId, String token) {
		try {
			User user = this.getCurrentUser(token);
			JSONObject res = topicService.topicDetailPc(user.getId(), topicId);
			return addResponse(Config.STATUS_200, Config.MSG_200, res, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 主题赞
	 * 
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/{id}/like")
	public @ResponseBody ResponseContainer like(@PathVariable("id") String id,HttpServletRequest request) {
		String token = request.getParameter("token");
		try {
			User currentUser = this.getCurrentUser(token);
			Topic topic = topicService.topicAddParise(currentUser, id);
			return addResponse(Config.STATUS_200, Config.MSG_200, topic,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 主题赞
	 * 
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/praiseTopicPc")
	public @ResponseBody ResponseContainer praiseTopicPc(HttpServletRequest request) {
		String token = request.getParameter("token");
		String id = request.getParameter("id");
		try {
			User currentUser = this.getCurrentUser(token);
			Topic topic = topicService.topicAddParisePc(currentUser, id);
			return addResponse(Config.STATUS_200, Config.MSG_200, topic,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 收藏主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/favTopicPc")
	public @ResponseBody ResponseContainer favTopicPc(HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String topicId = request.getParameter("id");
			topicService.favTopic(topicId, currentUser.getId());
			return addResponse(Config.STATUS_200, Config.MSG_FAV_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 主题不赞
	 * 
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/{id}/unlike")
	public @ResponseBody ResponseContainer unlike(@PathVariable("id") String id, HttpServletRequest request) {
		String token = request.getParameter("token");
		try {
			User currentUser = this.getCurrentUser(token);
			Topic topic = topicService.topicAddUnParise(currentUser, id);
			return addResponse(Config.STATUS_200, Config.MSG_200, topic,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 主题分享
	 * 
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/{id}/share")
	public @ResponseBody ResponseContainer share(@PathVariable("id") String id,HttpServletRequest request) {
		String token = request.getParameter("token");
		String toAddr = request.getParameter("toAddr");
		String appkey = request.getParameter("appKey");
		String toType = request.getParameter("toType");
		try {
			User currentUser = this.getCurrentUser(token);
			Topic topic = topicService.topicAddShare(currentUser, id, toAddr,appkey, toType);
			return addResponse(Config.STATUS_200, Config.MSG_200, topic,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询所有主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("all")
	public @ResponseBody ResponseContainer findAll(HttpServletRequest request,Topic topic, QueryModelMul dm) {
		// 根据请求参数封装一个分页信息对象
		try {
		List<String> sort = new ArrayList<String>();
		//sort.add("weightSort");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		Page<Topic> topicResult = topicService.findAlTopic(pageable);
		ReponseDataTools.getClientReponseData(getReponseData(), topicResult);
		this.getReponseData().setResult(topicService.toResponses(topicResult.getContent()));
		return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 按照名称或者描述搜索主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("search")
	public @ResponseBody ResponseContainer search(HttpServletRequest request,Topic topic, QueryModelMul dm) {
		// 根据请求参数封装一个分页信息对象
		List<String> sort = new ArrayList<String>();
		//sort.add("weightSort");
		sort.add("replyCount");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);

		Page<Topic> topicResult;
		try {
			String keywords = request.getParameter("keywords");
			topicResult = topicService.search(keywords, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), topicResult);
			this.getReponseData().setResult(topicService.toResponses(topicResult.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 按照名称或者描述搜索主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("searchInGroup")
	public @ResponseBody ResponseContainer searchByGroupId(HttpServletRequest request,String groupId,Topic topic, QueryModelMul dm) {
		// 根据请求参数封装一个分页信息对象
		List<String> sort = new ArrayList<String>();
		sort.add("weightSort");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);

		Page<Topic> topicResult;
		try {
			String keywords = request.getParameter("keywords");
			topicResult = topicService.searchByGroupId(groupId, keywords, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), topicResult);
			this.getReponseData().setResult(topicService.toResponses(topicResult.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 创建话题表，用于保存地理坐标二维数组
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/createtable")
	public void createTable() {
		try {
			topicService.creatTable();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 查询附近得话题
	 * 
	 * @param dm
	 * @param request
	 * @return
	 */
	@RequestMapping("nearTopic")
	public ResponseContainer findNearTopic(QueryModel dm,HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String lat = request.getParameter("lat"); // 维度
			String lng = request.getParameter("lng");// 精度
			Point p = null;
			Distance dis = null;
			if (null != lat && null != lng) {
				p = new Point(Double.parseDouble(lng), Double.parseDouble(lat));
				dis = new Distance(10, Metrics.KILOMETERS);
			}
			List<TopicResponse> topic = topicService.findAllNearTopic(currentUser.getId(), p, dis);
			long topicCount = topicService.topicCount();
			TopicNearResponse tnr = new TopicNearResponse(topic, topicCount);
			this.getReponseData().setResult(tnr);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}

	}

	/**
	 * 
	 * @Title: setTopicBarCode
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("setTopicBarCode")
	@ResponseBody
	public ResponseContainer setTopicBarCode(String topicId, String url) {
		try {
			topicService.setTopicBarCode(topicId, url);
			return addResponse(Config.STATUS_200, Config.MSG_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}
	}
    
	/**
	 * 
	 * @Title: getGroupTop10Topics
	 * @Description: 获取群空间top10话题
	 * @param request
	 * @param groupId
	 * @param dm
	 * @param appKey
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getGroupTop10Topics")
	public @ResponseBody ResponseContainer getGroupTop10Topics(HttpServletRequest request, String groupId, QueryModel dm,
			String appKey) {
		// 根据请求参数封装一个分页信息对象
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		try {
			Page<Topic> topics = topicService.findByGroupId(groupId, pageable,appKey);
			List<JSONObject> res = topicService.shoutPageTopicForGroupSpace(topics);
			getReponseData().setResult(res);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}

	}
	
	/**
	 * 
	 * @Title: myCreatedTopic
	 * @Description: 我创建的话题
	 * @param topicId
	 * @param url
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("myCreatedTopic")
	public @ResponseBody ResponseContainer myCreatedTopic(QueryModel dm,HttpServletRequest request){
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			//根据请求参数封装一个分页信息对象
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<Topic> topics = topicService.myCreatedTopic(currentUser.getId(),pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), topics);
			if(getReponseData().getTotal_rows()==0){
				getReponseData().setResult(null);
			}
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(), Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @Title: myCreatedTopic
	 * @Description: 我创建的话题
	 * @param topicId
	 * @param url
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("myCreatedTopicById")
	public @ResponseBody ResponseContainer myCreatedTopicById(String userId,QueryModel dm,HttpServletRequest request){
		try {
			User currentUser = userservice.findOne(userId);
			//根据请求参数封装一个分页信息对象
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<Topic> topics = topicService.myCreatedTopic(currentUser.getId(),pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), topics);
			if(getReponseData().getTotal_rows()==0){
				getReponseData().setResult(null);
			}
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(), Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	@RequestMapping("getGroupTopicPc")
	public @ResponseBody ResponseContainer getGroupTopic(String groupId,String keyWords,QueryModel dm){
		
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		try {
			//Map<String, Object>resref=topicService.getGroupTopPc(groupId, pageable);
			if(StringUtil.isBlank(keyWords)){
				keyWords="";
			}
			Map<String, Object>resref=topicService.getGroupTopPc(groupId, keyWords, pageable);
		    @SuppressWarnings("unchecked")
			Page<Topic> topics=(Page<Topic>) resref.get("topics");
			ReponseDataTools.getClientReponseData(getReponseData(), topics);
			getReponseData().setResult(resref.get("objs"));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @Title: getGroupTopic
	 * @Description: 根据关键字搜索话题列表
	 * @param groupId
	 * @param dm
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getSearchGroupTopPc")
	public @ResponseBody ResponseContainer getSearchGroupTopPc(String keyWords,QueryModel dm){
		
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		try {
			Map<String, Object>resref=topicService.getSearchGroupTopPc(keyWords, pageable);
		    @SuppressWarnings("unchecked")
			Page<Topic> topics=(Page<Topic>) resref.get("topics");
			ReponseDataTools.getClientReponseData(getReponseData(), topics);
			getReponseData().setResult(resref.get("objs"));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
//	/**
//	 * 
//	 * @Title: getSearchGroupTopByTagPc
//	 * @Description: 根据标签搜索话题列表
//	 * @param groupId
//	 * @param dm
//	 * @return ResponseContainer
//	 * @throws
//	 */
//	@SuppressWarnings("unchecked")
//	@RequestMapping("getSearchGroupTopByTagPc")
//	public @ResponseBody ResponseContainer getSearchGroupTopByTagPc(String tagName,QueryModel dm){
//		Pageable pageable = PageRequestTools.pageRequesMake(dm);
//		try {
//			Map<String, Object> topics=topicService.getSearchGroupTopByTagPc(tagName, pageable);
//			ReponseDataTools.getClientReponseData(getReponseData(), (Page<Topic>)topics.get("page"));
//			getReponseData().setResult(topics.get("result"));
//			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(), Config.RESP_MODE_10, "");
//		} catch (XueWenServiceException e) {
//			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
//		} catch (Exception e) {
//			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
//		}
//	}
	@RequestMapping(value = "/delete")
	public @ResponseBody ResponseContainer delete(String token,HttpServletRequest request) {
		try {
			User user = getCurrentUser(token);
			String topicIds = request.getParameter("topicIds");
			return addResponse(Config.STATUS_200, Config.MSG_DELETE_200, topicService.deleteByIds(topicIds), Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 话题置顶
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/display")
	public @ResponseBody ResponseContainer display(HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String topicId = request.getParameter("topicId");
			return addResponse(Config.STATUS_200, Config.MSG_DISPALY_200, topicService.display(topicId,currentUser), Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 话题取消置顶
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/nodisplay")
	public @ResponseBody ResponseContainer nodisplay(HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String topicId = request.getParameter("topicId");
			return addResponse(Config.STATUS_200, Config.MSG_NODISPALY_200, topicService.nodisplay(topicId,currentUser), Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @auther shenb
	 * @Description: 话题修改
	 * @param request
	 * @param topic
	 * @param image
	 * @return ResponseContainer
	 * @Date:2015年4月23日
	 * @throws
	 */
	@RequestMapping(value = "/modifyTopic")
	public @ResponseBody ResponseContainer modifyTopic(HttpServletRequest request,Topic topic,String image) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			topicService.modifyTopic(topic,currentUser,image);
			return addResponse(Config.STATUS_200, Config.MSG_200,true, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	
	
}
