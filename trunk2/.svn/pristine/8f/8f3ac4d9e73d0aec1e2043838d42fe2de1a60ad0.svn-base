package operation.controller.course;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;
import operation.BaseController;
import operation.exception.XueWenServiceException;
import operation.pojo.course.NewGroupCourse;
import operation.pojo.pub.QueryModel;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.user.User;
import operation.service.course.NewGroupCourseService;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import tools.Config;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;

/**
 * 最新的群组课程controller
 * @author hjn
 *
 */
@RestController
@RequestMapping("/newGroupCourse")
public class NewGroupCourseController extends BaseController{
	private static final Logger logger=Logger.getLogger(NewGroupCourseController.class);

	@Autowired
	private NewGroupCourseService newGroupCourseService;
	
	public NewGroupCourseController(){
		super();
	}
	
	/**
	 * 从课程池中将课程分享到小组课堂
	 * @author hjn
	 * @param request
	 * @return
	 */
	@RequestMapping("/shareToMyGroup")
	public @ResponseBody ResponseContainer shareToMyGroup(HttpServletRequest request) {
		try {
			String groupId = request.getParameter("groupId");
			String courseId = request.getParameter("courseId");
			String token = request.getParameter("token");
			String appKey = request.getParameter("appKey");
			User currentUser = this.getCurrentUser(token);
			NewGroupCourse ngc=newGroupCourseService.share(groupId, courseId,currentUser.getId(),appKey);
			return addResponse(Config.STATUS_200, Config.MSG_SHARESUCESS_200, newGroupCourseService.formateGroupCourse(ngc),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，从课程池中将课程分享到小组课堂失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，从课程池中将课程分享到小组课堂失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 从课程池中将课程分享到小组课堂
	 * @author hjn
	 * @param request
	 * @return
	 */
	@RequestMapping("/shareListToMyGroup")
	public @ResponseBody ResponseContainer shareListToMyGroup(HttpServletRequest request) {
		try {
			String groupId = request.getParameter("groupId");
			String courseIds = request.getParameter("courseIds");
			String token = request.getParameter("token");
			String appKey = request.getParameter("appKey");
			User currentUser = this.getCurrentUser(token);
			List<NewGroupCourse> ngcs=newGroupCourseService.shareList(groupId, courseIds,currentUser.getId(),appKey);
			return addResponse(Config.STATUS_200, Config.MSG_SHARESUCESS_200, newGroupCourseService.formateGroupCourseList(ngcs),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，从课程池中将课程分享到小组课堂失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，从课程池中将课程分享到小组课堂失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 分页获取小组课堂列表
	 * @author hjn
	 * @param request
	 * @return
	 */
	@RequestMapping("/groupCourses")
	public @ResponseBody ResponseContainer groupCourses(HttpServletRequest request,QueryModel dm) {
		try {
			String groupId = request.getParameter("groupId");
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<NewGroupCourse> newGroupCourses=newGroupCourseService.findOpenPageGroupCourseByGroupId(groupId, pageable);
			ReponseDataTools.getClientReponseData(rsData, newGroupCourses);
			this.rsData.setResult(newGroupCourseService.formateGroupCourseList(newGroupCourses.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，分页获取小组课堂列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，分页获取小组课堂列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 分页获取小组课堂列表
	 * @author hjn
	 * @param request
	 * @return
	 */
	@RequestMapping("/indexGroupCourses")
	public @ResponseBody ResponseContainer indexGroupCourses(HttpServletRequest request,QueryModelMul dm) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			List<String> sort = new ArrayList<String>();
			sort.add("studyCount");
			sort.add("ctime");
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<NewGroupCourse> newGroupCourses=newGroupCourseService.findOpenPageGroupCourse(pageable);
			ReponseDataTools.getClientReponseData(rsData, newGroupCourses);
			this.rsData.setResult(newGroupCourseService.formateGroupCourseList(newGroupCourses.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，分页获取小组课堂列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，分页获取小组课堂列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 群组管理员删除群组课程
	 * @author hjn
	 * @param request
	 * @return
	 */
	@RequestMapping("/deleteGroupCourses")
	public @ResponseBody ResponseContainer deleteGroupCourses(HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			String groupId = request.getParameter("groupId");
			String groupCourseId = request.getParameter("groupCourseId");
			User currentUser = this.getCurrentUser(token);
			newGroupCourseService.deleteGroupCourseList(groupId, groupCourseId,currentUser.getId());
			return addResponse(Config.STATUS_200, Config.MSG_DELETE_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，群组管理员删除群组课程失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，群组管理员删除群组课程失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 群组课程搜索
	 * @author hjn
	 * @param request
	 * @return
	 */
	@RequestMapping("/search")
	public @ResponseBody ResponseContainer search(HttpServletRequest request,QueryModel dm) {
		try {
			String token = request.getParameter("token");
			String keywords = request.getParameter("keywords");
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<NewGroupCourse> newGroupCourses=newGroupCourseService.search(keywords,pageable);
			ReponseDataTools.getClientReponseData(rsData, newGroupCourses);
			this.rsData.setResult(newGroupCourseService.formateGroupCourseList(newGroupCourses.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，群组课程搜索失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，群组课程搜索失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * Jack Tang
	 * 
	 * @Title: getOneByCourse
	 * @Description: 通过一个课程id推荐一个群
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("/getOneByCourse")
	public @ResponseBody ResponseContainer getOneByCourse(String courseId) {
		try {
			JSONObject res = newGroupCourseService.findOneByCourseId(courseId);
			return addResponse(Config.STATUS_200, Config.MSG_200, res,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}
	}
	
}
