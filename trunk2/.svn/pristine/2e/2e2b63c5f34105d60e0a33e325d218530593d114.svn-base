package operation.service.drycargo;


import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sf.json.JSONObject;
import operation.exception.XueWenServiceException;
import operation.pojo.drycargo.Drycargo;
//import operation.pojo.drycargo.DrycargoBean;
import operation.pojo.drycargo.DrycargoResponse;
import operation.pojo.file.FileStoreInfo;
import operation.pojo.tags.UserTagBean;
import operation.pojo.user.User;
import operation.pojo.user.UserShort;
//import operation.repo.drycargo.DrycargoBeanRepository;
import operation.repo.drycargo.DrycargoRepository;
import operation.repo.drycargo.DrycargoTemplate;
import operation.repo.user.UserRepository;
import operation.service.fav.FavService;
import operation.service.file.MyFileService;
import operation.service.group.GroupService;
import operation.service.praise.PraiseService;
import operation.service.praise.UnPraiseService;
import operation.service.share.ShareService;
import operation.service.tags.TagService;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import tools.Config;
import tools.JSON2ObjUtil;
import tools.StringUtil;

import com.google.common.collect.Lists;


@Service
@Component
public class DrycargoService {
	private static final Logger logger = Logger.getLogger(DrycargoService.class);
	
	@Autowired
	public DrycargoRepository drycargoRepository;
	
//	@Autowired
//	private DrycargoBeanRepository drycargoBeanRepository;
	
	@Autowired
	public MyFileService myFileService;
	
	@Autowired
	private UserRepository userRepo;
	
	@Autowired
	public GroupService groupService;
	
	@Autowired
	private TagService tagService;
	
	@Autowired 
	private DrycargoTemplate drycargoTemplate;
	
//	@Autowired
//	public DrycargoBeanService drycargoBeanService;
	
	@Autowired
	public PraiseService praiseService;
	@Autowired
	public UnPraiseService unPraiseService;
	
	@Autowired
	public UserDrycargoService  userDrycargoService;
	
	@Autowired
	public FavService favService;
	@Autowired
	public ShareService shareService;
	@Value("${tag.service.url}")
	private String tagServiceUrl;	
	
	
	public DrycargoService(){
		super();
	}
	
	/**
	 * 存储干货
	 * @param user
	 * @param drycargo
	 * @param picUrl
	 * @return
	 * @throws XueWenServiceException
	 */
//	public Drycargo createDrycargo(User user,Drycargo drycargo,String tagName)throws XueWenServiceException{
//		long time=System.currentTimeMillis();
//		//增加处理
//		DrycargoBean db = drycargoBeanService.createDrycargo(user, drycargo,time);
//		//drycargo.setFileUrl(picUrl);
//		//显示使用
//		UserShort us=new UserShort();
//		us.setUserId(user.getId());
//		us.setUserName(user.getUserName());
//		List<UserShort> list=new ArrayList<UserShort>();
//		list.add(us);
//		drycargo.setSharePerList(list);
//		//查询使用
//		List<Object> listId =new ArrayList<Object>();
//		listId.add(user.getId());
//		drycargo.setShareids(listId);
//			
//		drycargo.setCtime(time);
//		Map<String,Long> whoView  = new HashMap<String,Long>();
//		whoView.put(user.getId(), System.currentTimeMillis());
//		drycargo.setWhoView(whoView);
//		drycargo.setDrycargoId(db.getId());
//		drycargo =  drycargoRepository.save(drycargo);
//		if(!StringUtil.isBlank(tagName)){
//			tagName=JSON2ObjUtil.getArrayFromString(tagName);
//		}
//		tagService.tagForObj(user, tagName, "6", drycargo.getId());
//		return drycargo;
//	}

	/***
	 * 上传干货提取的文件
	 * @param file
	 * @return
	 * @throws XueWenServiceException
	 */
	public String uploadDryCargo(MultipartFile file) throws XueWenServiceException{
		
			if (null != file && !file.isEmpty()) {
				String suffile=String.valueOf(System.currentTimeMillis());  //文件基础路径后缀（划分多文件目录，防止一个目录下有多个目录）
				String fileLocal=getDryCargoPicLocal(suffile);
				String fileUrl=getDryCargoPicUrl(suffile);
				FileStoreInfo fif=myFileService.uploadFile(file, fileLocal,fileUrl);
				if(fif !=null){
					return fif.getFileUrl();
				}
			}
			return null;
	}
	
	/**
	 * 得到干货文件服务器存储地址
	 * @return
	 * @throws XueWenServiceException
	 */
	private   String getDryCargoPicLocal(String suffix)throws XueWenServiceException{
		String str=myFileService.idSpilt(suffix, 5);
		return Config.DRYCARGOFILELOCAL+str;
	}
	
	/**
	 * 得到干货文件的网络访问URL
	 * @return
	 * @throws XueWenServiceException
	 */
	private   String getDryCargoPicUrl(String suffix)throws XueWenServiceException{
		String str=myFileService.idSpilt(suffix, 5);
		return Config.DRYCARGOFILEURL+str;
	}
	
	/**
	 * 查询某一群下得干货
	 * @param keywords
	 * @param pageable
	 * @return
	 */
	public Page<Drycargo> all(String keywords, int dryFlag,Pageable pageable) throws XueWenServiceException{
		// TODO Auto-generated method stub
		Page<Drycargo>  dryCargo = drycargoRepository.findByGroupAndDryFlag(keywords,dryFlag,pageable);
		return dryCargo;
	}
	
	/**
	 * 查询某一群下得干货Pc
	 * @param keywords
	 * @param pageable
	 * @return
	 */
//	public Map<String, Object> allPc(String groupId, Pageable pageable) throws XueWenServiceException{
//		// TODO Auto-generated method stub
//		Page<Drycargo>  dryCargo = drycargoRepository.findByGroup(groupId,pageable);
////		if(dryCargo.getTotalElements() >= 0 ){
////			List<Drycargo> dryCargoList = dryCargo.getContent();
////			
////			for(Drycargo dry:dryCargoList){
////				if(dry.getSharePerList()!=null){
////				for(UserShort temp:dry.getSharePerList()){
////					User user=userRepo.findOne(temp.getUserId());//TODO 会存在性能问题 上缓存之后优化
////					if(user!=null){
////						temp.setUserName(user.getNickName());
////					}
////				}
////				}
////				Set<String> tagName = tagService.getTagsByItemIdItemType(dry.getId(), "6");
////				dry.setDrycargoTagName(tagName);
////			}
////		}
//		List<DrycargoBean> list=new ArrayList<DrycargoBean>();
//		for (Drycargo drycargo2 : dryCargo.getContent()) {
//			DrycargoBean drycargoBean=new DrycargoBean();
//			drycargoBean=drycargoBeanRepository.findOne((String) drycargo2.getDrycargoId());
//			list.add(drycargoBean);
//		}
//		Map<String, Object> reMap=new HashMap<String, Object>();
//		reMap.put("page", dryCargo);
//		reMap.put("result", list);
//		return reMap;
//	}
	
	/**
	 * 查询某一群下得干货
	 * @param keywords
	 * @param pageable
	 * @return
	 */
	public Page<Drycargo> searchByDryFlag(String keywords,int dryFlag, Pageable pageable) throws XueWenServiceException{
		Page<Drycargo>  dryCargo = null;
		if(StringUtil.isBlank(keywords)){
			 dryCargo = drycargoRepository.findByDryFlag(dryFlag,pageable);
		}
		else{
			keywords =".*?(?i)"+keywords+".*";
			dryCargo = drycargoRepository.findByDryFlagAndMessageRegex(dryFlag,keywords,pageable);
		}
		return dryCargo;
	}
		
	
	/**
	 * 发现干货（只查询6个，根据我所在的群组ID集合，过滤出本人不在的群组）
	 * @param userId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Drycargo> findAll(int dryFlag,Pageable pageable)throws XueWenServiceException {
		Page<Drycargo>  drycargo = drycargoRepository.findByDryFlag(dryFlag,pageable);
		return drycargo;
	}
	/**
	 * 发现更多干货
	 * @param pageable
	 * @return
	 */
	public Page<Drycargo> findAllDrycargo(Pageable pageable) throws XueWenServiceException{
		Page<Drycargo>  drycargo = drycargoRepository.findAll(pageable);
		return drycargo;
	}
	
	public UserTagBean createUserTag(User user,Drycargo dry,String tagName){
		UserTagBean utb = new UserTagBean();
		utb.setUserId(user.getId());
		utb.setUserName(user.getUserName());
		utb.setItemId(dry.getId());
		utb.setItemType("6");
		utb.setCtime(String.valueOf(System.currentTimeMillis()));
		utb.setTagName(tagName);
		return utb;
		
	}
	/**
	 * 获得某一人干货分享的数量
	 * @param userId
	 * @return
	 */
	public long getDryCount(String userId,int dryFlag){
		return drycargoTemplate.getCountsByDryFlagAndShareidsIn(Lists.newArrayList(userId),dryFlag);
	}
	
	
	/**
	 * 获得某一人分享的干货
	 * @param userId
	 * @return
	 */
	public long getDryByUser(String userId){
		return drycargoTemplate.getCountsByShareidsIn(Lists.newArrayList(userId));
	}
	/**
	 * 获得某一群的干货数量
	 * @param groupId
	 * @return
	 */
	public int getDryCountByGroup(String groupId,int dryFlag){
		return drycargoRepository.countByGroupAndDryFlag(groupId,dryFlag);
	}
	
	/** 
	* @author yangquanliang
	* @Description: 通过url获取干货是否存储
	* @param @param url
	* @param @return
	* @return int
	* @throws 
	*/ 
	public List<Drycargo> getDryByUrl(String url)
	{
		return drycargoRepository.findOneByUrl(url);
	}
	
	/** 
	* 
	* @Description: 查询个人分享的干货
	* @param @param url
	* @param @return
	*  
	* @throws 
	*/ 
//	public Page<Drycargo> getDrysByUser(String id,Pageable page)
//	{
//		return drycargoRepository.findByShareids(id, page);
//	}
	
	
	
	/** 
	* @author xurui
	* @Description: 删除干货
	* @param @param dry
	* @param @return
	* @return Drycargo
	* @throws 
	*/ 
	public boolean deleteDrycargo(String dryid)
	{
		try {
			drycargoRepository.delete(dryid);
			return true;
		} catch (Exception e) {
			// TODO: handle exception
			return false;
		}
		
		
	}
	
	
	

	/** 
	* @author yangquanliang
	* @Description: 更新或保存逻辑
	* @param @param dry
	* @param @return
	* @return Drycargo
	* @throws 
	*/ 
	public Drycargo saveDrycargo(Drycargo dry)
	{
		return drycargoRepository.save(dry);
	}
	
	/** 
	* @author yangquanliang
	* @Description: 通过url获取干货是否存储
	* @param @param url
	* @param @return
	* @return int
	* @throws 
	*/ 
	public Drycargo getDryByUrlAndGroup(String url,String group) throws XueWenServiceException
	{
		return drycargoRepository.findOneByUrlAndGroup(url,group);
	}
	/**
	 * 创建干货
	 * @param user
	 * @param drycargo
	 * @param tagName
	 * @param drycargoId
	 * @return
	 * @throws XueWenServiceException
	 */
	public Drycargo uploadDry(User user,Drycargo drycargo,String tagName) throws XueWenServiceException {
		long time = System.currentTimeMillis();
		try {
			drycargo.setUrl(URLDecoder.decode(drycargo.getUrl(), "UTF-8"));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		Drycargo dry = getDryByUrlAndGroup(drycargo.getUrl(),drycargo.getGroup().toString());
		if(dry!=null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_DRYCAROGEXIT_201,null);
		}else{
			drycargo.setAuthorId(user.getId());
			drycargo.setAuthorLogoUrl(user.getLogoURL());
			drycargo.setAuthorName(user.getNickName());
			drycargo.setCtime(time);
			drycargo =  drycargoRepository.save(drycargo);
			if(tagName!=null){
				RestTemplate restTemplate=new RestTemplate();
				restTemplate.getForObject(tagServiceUrl+"tag/createTagBatch?domain="+"yxtapp"+"&itemId="+drycargo.getId()+"&userId="+user.getId()+"&userName="+user.getNickName()+"&itemType="+6+"&tagNames="+tagName, String.class);
			}
			return drycargo;
		}
		
//		if(dry==null){
//			UserShort us=new UserShort();
//			us.setUserId(user.getId());
//			us.setUserName(user.getUserName());
//			List<UserShort> list=new ArrayList<UserShort>();
//			list.add(us);
//			drycargo.setSharePerList(list);
//			//查询使用
//			List<Object> listId =new ArrayList<Object>();
//			listId.add(user.getId());
//			drycargo.setShareids(listId);
//			drycargo.setCtime(time);
//			Map<String,Long> whoView  = new HashMap<String,Long>();
//			whoView.put(user.getId(), System.currentTimeMillis());
//			drycargo.setDrycargoId(drycargoId);
//			drycargo =  drycargoRepository.save(drycargo);
//
//			if(tagName!=null){
//			RestTemplate restTemplate=new RestTemplate();
//			restTemplate.getForObject(tagServiceUrl+"tag/createTagBatch?domain="+"yxtapp"+"&itemId="+drycargo.getId()+"&userId="+user.getId()+"&userName="+user.getNickName()+"&itemType="+6+"&tagNames="+tagName, String.class);
//			}
//			}
//		
//		
//		return drycargo;
	}
	/**
	 * 判断干货是否存在
	 * @param user
	 * @param drycargo
	 * @param tagName
	 * @param drycargoId
	 * @return
	 * @throws XueWenServiceException
	 */
	public boolean isDrycargoExist(Drycargo drycargo) throws XueWenServiceException {
		Drycargo dry = getDryByUrlAndGroup(drycargo.getUrl(),drycargo.getGroup().toString());
		if(dry!=null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_DRYCAROGEXIT_201,null);
		}
		return true;
	}
	/**
	 * 干货赞
	 * @param user
	 * @param dryCargoId
	 * @param groupId
	 * @return
	 * @throws XueWenServiceException
	 */
	public Drycargo dryCargoAddParise(User user,String dryCargoId,String groupId)throws XueWenServiceException{
			Drycargo dry = findOneByDrycargoId(dryCargoId,groupId);
			if(dry==null){
				throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
			}
			praiseService.addPraise(user,Config.YXTDOMAIN,"yxtapp",dryCargoId,Config.TYPE_DRYCARGO_GROUP);
			dry.setLikesCount(dry.getLikesCount()+1);
			return saveDrycargo(dry);//保存小组干货赞数量
	}
	
	/**
	 * 干货赞
	 * @param user
	 * @param dryCargoId
	 * @param groupId
	 * @return
	 * @throws XueWenServiceException
	 */
//	public DrycargoBean dryCargoAddParisePc(User user,String dryCargoId,String groupId)throws XueWenServiceException{
//		if(StringUtil.isBlank(dryCargoId)){
//			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
//		}
//		DrycargoBean drycargoBean = drycargoBeanService.oneDry(dryCargoId);
//		if(drycargoBean == null){
//			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
//		}
//		praiseService.addPraiseTip(Config.YXTDOMAIN, Config.APPKEY_PC,drycargoBean.getId(),Config.TYPE_DRYCARGO_GROUP,user.getId());
//		drycargoBean.setLikesCount(drycargoBean.getLikesCount()+1);
//		return drycargoBeanRepository.save(drycargoBean);
//	}
	
	/**
	 * 干货不赞
	 * @param user
	 * @param dryCargoId
	 * @param groupId
	 * @return
	 * @throws XueWenServiceException
	 */
	public Drycargo dryCargoAddUnParise(User user,String dryCargoId,String groupId)throws XueWenServiceException{
		//从小组里对干货进行点不赞
		Drycargo dry = findOneByDrycargoId(dryCargoId,groupId);
		if(dry==null){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
		}
		unPraiseService.addUnPraiseNotCheck(Config.YXTDOMAIN, "yxtapp", dryCargoId, Config.TYPE_DRYCARGO_GROUP, user.getId());
		dry.setUnLikeCount(dry.getUnLikeCount()+1);
		return saveDrycargo(dry);//保存小组干货不赞数量
		
	}
	
	public Drycargo findOneById(String dryCargoId){
		return drycargoRepository.findOneById(dryCargoId);
	}
	
	public Drycargo findOneByDrycargoId(String dryCargoId,String groupId){
		return drycargoRepository.findByIdAndGroup(dryCargoId,groupId);
	}
	/**
	 * 分享干货
	 * @param fromGroupId
	 * @param dryCargoId
	 * @param toGroupId
	 * @param currentUser
	 * @throws XueWenServiceException
	 */
	public void shareDryCargo(String fromGroupId, String dryCargoId,String toGroupId, User currentUser,String appkey,String toType,String toAddr) throws XueWenServiceException{
//		if (StringUtil.isBlank(fromGroupId) && !StringUtil.isBlank(toGroupId)) {
//			// 1.其他位置->小组课堂
//			this.shareDryToGroupClass(toGroupId, dryCargoId,currentUser,appkey,toType,toAddr);
//		} else if (!StringUtil.isBlank(fromGroupId)) {
//			// 2.小组课堂-->小组课堂 3.小组课堂-->其他位置
//			this.shareDrycargoToOthers(fromGroupId, toGroupId,dryCargoId, currentUser,appkey,toType,toAddr);
//		}
		this.shareDrycargoToOthers(fromGroupId, toGroupId,dryCargoId, currentUser,appkey,toType,toAddr);

	}

	
	public void shareDryCargos(String fromGroupId, String dryCargoId,String toGroupId, User currentUser,String appkey,String toType,String toAddr) throws XueWenServiceException{
		if (StringUtil.isBlank(fromGroupId) && !StringUtil.isBlank(toGroupId)) {
			// 1.其他位置->小组课堂
	//		this.shareDryToGroupClass(toGroupId, dryCargoId,currentUser,appkey,toType,toAddr);
		} else if (!StringUtil.isBlank(fromGroupId)) {
			// 2.小组课堂-->小组课堂 3.小组课堂-->其他位置
			this.shareDrycargoToOthers(fromGroupId, toGroupId,dryCargoId, currentUser,appkey,toType,toAddr);
		}
//		}else {
//			// 4.其他--->其他
//			drycargoBeanService.countOperation(currentUser.getId(), dryCargoId);
//		}
	}
	/**
	 * 小组课堂分享到其他地方
	 * @param fromGroupId
	 * @param toGroupId
	 * @param dryCargoId
	 * @param currentUser
	 */
	private void shareDrycargoToOthers(String fromGroupId, String toGroupId,String dryCargoId, User currentUser,String appkey,String toType,String toAddr) throws XueWenServiceException{
		Drycargo dry=drycargoRepository.findByIdAndGroup(dryCargoId, fromGroupId);
		if(dry==null){
			throw new XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}
		//将干货分享到目标小组课堂
		if(!StringUtil.isBlank(toGroupId)){
			shareDryToGroupClass(toGroupId, dry,currentUser,appkey,toType,toAddr);
		}else{
			shareService.addShare(currentUser.getId(), Config.YXTDOMAIN, appkey, dry.getId(), Config.TYPE_DRYCARGO_GROUP, toType, toAddr);
			dry.setShareCount(dry.getShareCount()+1);
			drycargoRepository.save(dry);
		}
		
	}

	/**
	 * 分享课程到小组课堂
	 * @param groupId
	 * @param courseId
	 * @throws XueWenServiceException
	 */
	public void shareDryToGroupClass(String group,Drycargo drycargo,User user,String appkey,String toType,String toAddr)throws XueWenServiceException{
		Drycargo dry=drycargoRepository.findByIdAndGroup(drycargo.getId(), group);
		long time=System.currentTimeMillis();
		if(dry==null){
			//此干货第一次分享
			dry=new Drycargo(group,user.getId());
			//DrycargoBean db = drycargoBeanService.findOneById(dryCargoId);
			dry.setFileUrl(drycargo.getFileUrl());
			dry.setMessage(drycargo.getMessage());
			dry.setDescription(drycargo.getDescription());
			dry.setUrl(drycargo.getUrl());
			dry.setAuthorId(user.getId());
			dry.setAuthorLogoUrl(user.getLogoURL());
			dry.setAuthorName(user.getNickName());
			List<String> whoImport = new ArrayList<String>();
			whoImport.add(user.getId().toString());
			dry.setWhoImport(whoImport);
			dry.setImportCount(1);
			
		}else{
			//此干货已经被分享
			List<String> whoImport=dry.getWhoImport();
			//Set<String> users=whoImport.keySet();
			if(whoImport.contains(user.getId())){
				//此干货已经被此人分享，则更新时间
				dry.setUtime(time);
			}else{
				//此干货未被此人分享，则加入导入者列表
				whoImport.add(user.getId());
				dry.setWhoImport(whoImport);
				dry.setImportCount(dry.getImportCount()+1);
				dry.setUtime(time);
				
			}
		}
		//drycargoBeanService.countOperation(user.getId(), dryCargoId,appkey,toType,toAddr);
		dry = drycargoRepository.save(dry);
		shareService.addShare(user.getId(), Config.YXTDOMAIN, appkey, dry.getId(), Config.TYPE_DRYCARGO_GROUP, toType, toAddr);
		
		
		
	}
	/**
	 * 
	 * @Title: shareDryCargosToGroup
	 * @Description: 批量分享群干货
	 * @param group
	 * @param drycargoIds
	 * @param user
	 * @param appkey
	 * @param toType
	 * @param toAddr
	 * @throws XueWenServiceException void
	 * @throws
	 */
	public void shareDryCargosToGroup(String group,String drycargoIds,User user,String appkey,String toType,String toAddr) throws XueWenServiceException{
		if(StringUtil.isBlank(drycargoIds)){
			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
		}
		String[] ids=drycargoIds.split(",");
		for (String drycargoId : ids) {
		//	shareDryToGroupClass(group, drycargoId, user, appkey, toType, toAddr);
		}
	}
	/**
	 * 计算主楼回复数
	 * @param id  群干货id
	 */
	public void saveReplyCount(String id,String groupId) throws XueWenServiceException{
		Drycargo drycargo = drycargoRepository.findOneById(id);
		if(drycargo==null){
			throw new XueWenServiceException(Config.STATUS_201,
					Config.MSG_NODATA_201, null);
		}
		drycargo.setReplyCount(drycargo.getReplyCount()+1);
		drycargoRepository.save(drycargo);
	}
	
	/**
	 * 查询干货详情(从小组课堂)
	 * @param user
	 * @param dryCargoId
	 * @return
	 * @throws XueWenServiceException
	 */
	public DrycargoResponse dryDetail(User user,String dryCargoId,String groupId) throws XueWenServiceException {
		Drycargo db =  drycargoRepository.findByIdAndGroup(dryCargoId, groupId);
		if(db==null){
			throw new XueWenServiceException(Config.STATUS_201,Config.MSG_201, null);
		}
		long time = System.currentTimeMillis();
		//增加浏览量
		db.setUtime(time);
		db.setViewCount(db.getViewCount()+1);
		DrycargoResponse  dbr = new DrycargoResponse(db);
		//设置赞标示
		dbr.setLike(praiseService.isUserPraise(user.getId(),Config.YXTDOMAIN, dryCargoId, Config.TYPE_DRYCARGO_GROUP) ? true: false);
		//设置踩标示
		dbr.setUnlike(unPraiseService.isUserUnPraise(user.getId(),Config.YXTDOMAIN, dryCargoId, Config.TYPE_DRYCARGO_GROUP) ? true: false);
		//设置收藏标示
		dbr.setIsFav(favService.isUserFav(user.getId(), Config.YXTDOMAIN, dryCargoId, Config.TYPE_DRYCARGO_GROUP)? 1: 0);
	//	DrycargoBean drycargoBean = drycargoBeanService.findOneById(dryCargoId);
		//drycargoBean.setViewCount(drycargoBean.getViewCount()+1);
		//drycargoBeanService.saveDrycargo(drycargoBean);
		RestTemplate restTemplate=new RestTemplate();
		String tag = restTemplate.getForObject(tagServiceUrl+"tag/getTagsByIdAndType?domain="+"yxtapp"+"&itemId="+db.getId()+"&itemType="+6, String.class);
		JSONObject objj=JSONObject.fromObject(tag);
		JSONObject obss=objj.getJSONObject("data");
		net.sf.json.JSONArray childs= obss.getJSONArray("result"); 
		dbr.setDrycargoTagName(childs);
		//判断该用户是否有回复权限（此人是否为该群）
		dbr.setAuthority(groupService.findMember(db.getGroup().toString(),user.getId())?true:false);
		drycargoRepository.save(db);
		return dbr;
	}
	/**
	 * 收藏干货
	 * @param fromGroupId
	 * @param dryCargoId
	 * @param currentUser
	 */
	public void favDrycargo(String fromGroupId, String dryCargoId,User currentUser,String appkey,int dryFlag) throws XueWenServiceException {
//		if (StringUtil.isBlank(fromGroupId)) {
//			// 其他位置干货收藏
//			userDrycargoService.addFav(dryCargoId, currentUser.getId(),fromGroupId,appkey);
//		} else {
			// 小组课堂干货收藏
			this.favCourse(fromGroupId, dryCargoId, currentUser,appkey,dryFlag);
		//}
	}
	/**
	 * 收藏干货Pc
	 * @param fromGroupId
	 * @param dryCargoId
	 * @param currentUser
	 */
//	public void favDrycargoPc(String fromGroupId, String dryCargoId,User currentUser,String appkey) throws XueWenServiceException {
//		if(StringUtil.isBlank(dryCargoId)){
//			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
//		}
//		DrycargoBean drycargoBean = drycargoBeanService.oneDry(dryCargoId);
//		if(drycargoBean == null){
//			throw new XueWenServiceException(Config.STATUS_201, Config.MSG_201,null);
//		}
//		favService.addFavPc(Config.YXTDOMAIN, Config.APPKEY_PC,drycargoBean.getId(),Config.TYPE_DRYCARGO_GROUP,currentUser.getId());
//		drycargoBean.setFavCount(drycargoBean.getFavCount()+1);
//		drycargoBeanRepository.save(drycargoBean);
//			//this.favCoursePc(fromGroupId, dryCargoId, currentUser,appkey);
//	}
	/**
	 * 
	 * @Title: getCountsByGroupId
	 * @Description:获取群组下的干货
	 * @param groupId
	 * @return long
	 * @throws
	 */
	public long getCountsByGroupId(String groupId){
		return drycargoTemplate.getCountsByGroupId(groupId);
	}
	/**
	 * 收藏小组课堂课程到用户收藏列表
	 * @param groupCoursId
	 * @param user
	 * @throws XueWenServiceException
	 */
	public void favCourse(String fromGroupId,String dryCargoId,User user,String appkey,int dryFlag)throws XueWenServiceException{
		Drycargo db = drycargoRepository.findByIdAndGroup(dryCargoId, fromGroupId);
		if(db==null){
			throw new XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
		}else{
//			Map<String,Long> whoFav=db.getWhoFav();
//			if(whoFav == null){
//				whoFav=new HashMap<String, Long>();
//			}
//			Set<String> users=whoFav.keySet();
//			if(users == null || users.size()==0 || !users.contains(user.getId())){
//				//此干货未被此用户收藏
//				long time=System.currentTimeMillis();
//				whoFav.put(user.getId(), time);
//				db.setWhoFav(whoFav);
//				db.setFavCount(db.getFavCount()+1);
//				db.setUtime(time);
				//加入用户干货收藏列表
				userDrycargoService.addFavByDryFlag(db.getId(),user.getId(),fromGroupId,appkey,dryFlag);
				//drycargoRepository.save(db);
				//favService.addFavNotCheck(Config.YXTDOMAIN, appkey, db.getId(), Config.TYPE_DRYCARGO_GROUP, user.getId());
		}
//			}else{
//				throw new XueWenServiceException(Config.STATUS_201,
//						Config.MSG_FAVDAY_201, null);
//			}
			
		}
	
	/**
	 * 收藏小组课堂课程到用户收藏列表
	 * @param groupCoursId
	 * @param user
	 * @throws XueWenServiceException
	 */
//	public void favCoursePc(String fromGroupId,String dryCargoBeanId,User user,String appkey)throws XueWenServiceException{
//		DrycargoBean db = drycargoBeanRepository.findOne(dryCargoBeanId);
//		if(db==null){
//			throw new XueWenServiceException(Config.STATUS_201,Config.MSG_201,null);
//		}else{
//			Map<String,Long> whoFav=db.getWhoFav();
//			if(whoFav == null){
//				whoFav=new HashMap<String, Long>();
//			}
//			Set<String> users=whoFav.keySet();
//			if(users == null || users.size()==0 || !users.contains(user.getId())){
//				//此干货未被此用户收藏
//				long time=System.currentTimeMillis();
//				whoFav.put(user.getId(), time);
//				db.setWhoFav(whoFav);
//				db.setFavCount(db.getFavCount()+1);
//				db.setUtime(time);
//				//加入用户干货收藏列表
////				userDrycargoService.addFav(db.getId(),user.getId(),fromGroupId,appkey);
//				drycargoBeanRepository.save(db);
//				favService.addFavPc(Config.YXTDOMAIN, appkey, db.getId(), Config.TYPE_DRYCARGO_GROUP, user.getId());
//			}else{
//				throw new XueWenServiceException(Config.STATUS_201,
//						Config.MSG_FAVDAY_201, null);
//			}
//			
//		}
//	}
	/**
	 * 处理干货对象转换成客户端使用
	 * @param drycargo
	 * @return
	 * @throws XueWenServiceException
	 */
	public List<DrycargoResponse> toResponeses(List<Drycargo> drycargo,String userId) throws XueWenServiceException{
		List<DrycargoResponse> uprs = new ArrayList<DrycargoResponse>();
		if(drycargo==null || drycargo.size()<=0){
		}else{
			for(int i = 0; i < drycargo.size(); i++){
				uprs.add(toResponse(drycargo.get(i),userId));
			}
		}
		return uprs;
		
	}
	/**
	 * 处理干货对象转换成客户端使用
	 * @param Drycargo
	 * @return
	 * @throws XueWenServiceException
	 */
	public DrycargoResponse toResponse(Drycargo Drycargo,String userId)throws XueWenServiceException{
		if (Drycargo == null) {
			throw new XueWenServiceException(Config.STATUS_201,
					Config.MSG_NODATA_201, null);
		}
//		List<UserShort> us = new ArrayList<UserShort>();
//		for(UserShort temp:Drycargo.getSharePerList()){
//			User user=userRepo.findOne(temp.getUserId());
//			if(user!=null){
//				temp.setUserName(user.getNickName());
//				us.add(temp);
//			}
//			Drycargo.setSharePerList(us);
//		}
		
		DrycargoResponse upr = new DrycargoResponse(Drycargo);
		RestTemplate restTemplate=new RestTemplate();
		String tag = restTemplate.getForObject(tagServiceUrl+"tag/getTagsByIdAndType?domain="+"yxtapp"+"&itemId="+Drycargo.getId()+"&itemType="+6, String.class);
		JSONObject objj=JSONObject.fromObject(tag);
		JSONObject obss=objj.getJSONObject("data");
		net.sf.json.JSONArray childs= obss.getJSONArray("result"); 
		upr.setDrycargoTagName(childs);
		//设置赞标示
		upr.setLike(praiseService.isUserPraise(userId,Config.YXTDOMAIN, Drycargo.getId(), Config.TYPE_DRYCARGO_GROUP) ? true: false);
		//设置踩标示
		//upr.setUnlike(unPraiseService.isUserUnPraise(user.getId(),Config.YXTDOMAIN, dryCargoId, Config.TYPE_DRYCARGO_GROUP) ? true: false);
		//设置收藏标示
		upr.setIsFav(favService.isUserFav(userId, Config.YXTDOMAIN, Drycargo.getId(), Config.TYPE_DRYCARGO_GROUP)? 1: 0);
		return upr;
	}
	/**
	 * 获得某一用户创建的干货
	 * @param userId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Drycargo> getUserCreateDrycargoByDryFlag(String userId,int dryFlag,Pageable pageable) throws XueWenServiceException{
		Page<Drycargo>  dryCargo = drycargoRepository.findByAuthorIdAndDryFlag(userId,dryFlag,pageable);
		return dryCargo;
	}
	/**
	 * 解散群得时候同时将该群下的干货删除
	 * @param groupId
	 * @throws XueWenServiceException 
	 */
	public void deleDryCargoByGroupId(String groupId) throws XueWenServiceException{
		drycargoTemplate.deleteByGroupId(groupId);
	}
	/**
	 * 查询某一群下得干货
	 * @param keywords
	 * @param pageable
	 * @return
	 */
	public Page<Drycargo> search(String keywords, Pageable pageable) throws XueWenServiceException{
		Page<Drycargo>  dryCargo = null;
		if(StringUtil.isBlank(keywords)){
			 dryCargo = drycargoRepository.findAll(pageable);
		}
		else{
			keywords =".*?(?i)"+keywords+".*";
			dryCargo = drycargoRepository.findByMessageRegex(keywords,pageable);
		}
		return dryCargo;
	}
	/**
	 * 获得某一用户创建的干货
	 * @param userId
	 * @param pageable
	 * @return
	 * @throws XueWenServiceException
	 */
	public Page<Drycargo> getUserCreateDrycargo(String userId,Pageable pageable) throws XueWenServiceException{
		Page<Drycargo>  dryCargo = drycargoRepository.findByAuthorId(userId,pageable);
		return dryCargo;
	}
	
	/**
	 * 计算收藏次数次数
	 * @param userId
	 * @param dryCargoId
	 * @throws XueWenServiceException
	 */
	public void countOperationFav(String userId, String dryCargoId,String appkey)
			throws XueWenServiceException {
		Drycargo db = findOneById(dryCargoId);
		if (db == null) {
			throw new XueWenServiceException(Config.STATUS_201,
					Config.MSG_NODATA_201, null);
		} else {
//			Map<String, Long> whoFav = db.getWhoFav();
//			if (whoFav == null) {
//				whoFav = new LinkedHashMap<String, Long>();
//			}
//			if (!whoFav.containsKey(userId)) {
//				long time = System.currentTimeMillis();
//				whoFav.put(userId, time);
//				db.setWhoFav(whoFav);
				db.setFavCount(db.getFavCount() + 1);
				drycargoRepository.save(db);
				favService.addFavNotCheck(Config.YXTDOMAIN, appkey, db.getId(), Config.TYPE_DRYCARGO_GROUP, userId);
				
		//	}
		}
	}
}
