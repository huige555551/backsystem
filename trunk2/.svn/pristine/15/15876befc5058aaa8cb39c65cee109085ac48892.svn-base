package operation.service.user;

import java.util.HashMap;
import java.util.List;

import net.sf.json.JSONObject;
import operation.exception.XueWenServiceException;
import operation.pojo.group.XueWenGroup;
import operation.pojo.log.UserLoginLog;
import operation.pojo.user.OpenFireUser;
import operation.pojo.user.ResponsePcUser;
import operation.pojo.user.User;
import operation.pojo.user.UserName;
import operation.repo.group.GroupRepository;
import operation.repo.user.UserRepository;
import operation.repo.user.UserTemplate;
import operation.service.group.GroupService;
import operation.service.log.UserLoginLogService;
import operation.service.openfire.OpenFireUserService;
import operation.service.tags.TagService;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import tools.Config;
import tools.MD5Util;
import tools.StringUtil;
import tools.YXTJSONHelper;
@Service
@Component
@EnableScheduling
/**
 * 
* @ClassName: UserPcService
* @Description: pc端的数据瘦身
* @author shenb
* @date 2014年12月17日 下午2:26:52
*
 */
public class UserPcService {
	private static final Logger logger=Logger.getLogger(UserPcService.class);
	@Autowired
	public UserRepository userRepo;
	@Autowired
	public UserTemplate userTemplate;
	
	@Autowired
	public UserLoginLogService userLoginLogService;
	
	@Autowired
	private TagService tagService;
	
	@Autowired
	public UserNumService userNumService;
	
	@Autowired
	private GroupService groupService;
	
	@Autowired
	private GroupRepository groupRepository;
	@Autowired
	private UserNameService userNameService;
	@Autowired
	private UserService userService;
	@Autowired
	private OpenFireUserService openFireUserService;
	
	//系统参数
	@Value("${image.default.path}")
	private String imagDefaultPath;
	@Value("${image.default.url}")
	private String imagDefaultUrl;
	

	/**
	 * 用户登录pc
	 * 
	 * @param user
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public JSONObject loginPc(User user) throws XueWenServiceException {
		// 通过用户名查询该用户
		logger.info("======================查询用户");
		User one = userRepo.findOneByUserNameAndPassWord(user.getUserName(),
				user.getPassWord());
		if (one != null) {
			logger.info("==================用户查询成功=========");
			Config.map.remove(one.getToken());
			long time = System.currentTimeMillis();
			one.setLogintime(time);
			one.setExpireTime(time + 86400000 * 365);
			one.setToken(MD5Util.MD5(one.getUdid() + one.getId()
					+ String.valueOf(one.getLogintime())));
			if (user.getUdid()==null) {
					
			} else {
				one.setUdid(user.getUdid());
			}
			logger.info("==================更新用户信息========="+one.getToken()+"===="+one.getUdid());
			one=userRepo.save(one);
			logger.info("==================更新用户信息成功,放入数据后=========token："+one.getToken()+"-===udid:"+one.getUdid());
			Config.map.put(one.getToken(), one);
			logger.info("==================登陆成功后，将登陆用户写入登陆日志表");
			UserLoginLog ull = new UserLoginLog();
			ull.setLoginTime(time);
			ull.setUserId(one.getId());
			userLoginLogService.saveUserLoginLog(ull);
			
		} else {
			throw new XueWenServiceException(Config.STATUS_404, Config.MSG_404,
					null);
		}
		String[] includeKey = {"id","userName","token","udid","nickName","logoURL","tag","email","phoneNumber","intro","area","job"};
		return YXTJSONHelper.getInObjectAttrJsonObject(one, new HashMap<String, Object>(), includeKey);
	}
	
	/**
	 * 
	 * @Title: registPc
	 * @Description: 注册
	 * @param user
	 * @return
	 * @throws XueWenServiceException User
	 * @throws
	 */
	public User registPc(User user) throws XueWenServiceException {
		if (!userTemplate.isExiseByUserName(user.getUserName())) {
			long time=System.currentTimeMillis();
			user.setCtime(time);// 获取系统时间戳
			user.setUtime(time);
			/**
			 *注册用户时需要将用户写入openfire，否则用户无法使用APP聊天 
			 */
			//20140911增加创建用户时，增加用户号
			String userNumber = userNumService.getGroupNum();
			user.setUserNumber(Long.parseLong(userNumber));	
			//随机获取用户名
			List<UserName> userName =  userNameService.getUserName();
			UserName un = userName.get(StringUtil.getOneInt(userName.size()));
			user.setNickName(un.getName());
			//随机获取用户头像
			String userLogoUrl = userService.userLogoUrl(this.imagDefaultPath);
			user.setLogoURL(userLogoUrl);
			user.setPhoneNumber(user.getUserName());
			// 注册成功后，将注册用户信息同步到openFire服务端
			OpenFireUser ofu = userService.getOpenFireUser(user);
			user.setOpenFireUser(ofu);
			//创建openfire用户
			OpenFireUser openFireUser = openFireUserService.create(ofu);
			openFireUser.setServerList(ofu.getServerList());
			user.setOpenFireUser(openFireUser);
			user=userRepo.save(user);
			//如果为邀请客户，需要将该用户加入到邀请群中，并修改邀请对象 操作为已操作
			return user;
		} else {
			throw new XueWenServiceException(Config.STATUS_400, Config.MSG_400,
					null);
		}
	}
	/**
	 * 根据用户ID查询用户信息pc
	 * 
	 * @return
	 */
	public ResponsePcUser findUserPc(String id) throws XueWenServiceException {
		User userResult = userRepo.findOneById(id);
		if (null != userResult) {
			return new ResponsePcUser(userResult.getId(), userResult.getUserName(), userResult.getToken(), userResult.getUdid(), userResult.getNickName(), userResult.getLogoURL(), userResult.getTag(), userResult.getEmail(), userResult.getPhoneNumber(), userResult.getIntro());
		} else {
			throw new XueWenServiceException(Config.STATUS_404, Config.MSG_404,
					null);
		}
	}
	/**
	 * 
	 * @Title: registByGroupId
	 * @Description: 与群组关联注册
	 * @param user
	 * @param groupId
	 * @return
	 * @throws XueWenServiceException User
	 * @throws
	 */
	public User registByGroupId(User user,String groupNumber) throws XueWenServiceException {
		XueWenGroup group=groupRepository.findOneByGroupNumber(groupNumber);
		user=this.registPc(user);
		//将注册后的用户添加到群组
		groupService.join(group, user.getId());
		logger.info("==================加入群组成功=========");
		return user;
	}
}
