package operation.controller.oss;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;
import operation.OssController;
import operation.exception.XueWenServiceException;
import operation.pojo.group.XueWenGroup;
import operation.pojo.pub.QueryModel;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.topics.Images;
import operation.pojo.topics.Post;
import operation.pojo.topics.SubPost;
import operation.pojo.topics.Topic;
import operation.pojo.user.User;
import operation.service.group.GroupService;
import operation.service.topics.PostService;
import operation.service.topics.TopicService;
import operation.service.user.UserService;
import operation.service.util.ObjCopyPropsService;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import tools.Config;
import tools.JSON2ObjUtil;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;

@RestController
@RequestMapping("/oss/topic")
@Configuration
public class OssTopicController extends OssController {

	@Autowired
	private TopicService topicService;
	@Autowired
	public GroupService groupService;
	
	@Autowired
	public UserService userService;
	@Autowired
	private PostService postService;
	
	@Autowired
	private MongoTemplate mongoTemplate;
	
	@Autowired
	public ObjCopyPropsService objCopyPropsService;

	public OssTopicController() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * 话题删除
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/delete")
	public @ResponseBody ResponseContainer delete(HttpServletRequest request) {
		try {
			String topicid = request.getParameter("topicid");
			topicService.deleteById(topicid);
			return addResponse(Config.STATUS_200, Config.MSG_DELETE_200, true, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	
	
	/**
	 * 删除主楼回复
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/deletePost")
	public @ResponseBody ResponseContainer deletePost(HttpServletRequest request) {
		try {
			String topicid = request.getParameter("topicid");
			String postid = request.getParameter("postid");
			postService.deletePostByPostId(topicid,postid);
			return addResponse(Config.STATUS_200, Config.MSG_DELETE_200, true, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 删除副楼回复
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/deleteSubPost")
	public @ResponseBody ResponseContainer deleteSubPost(HttpServletRequest request) {
		try {
			String postid = request.getParameter("postid");
			String subpostid = request.getParameter("subpostid");
			 
				//有subpostid
				postService.deleteSubPostBySubPostId(subpostid,postid);
			 
			 
			
			return addResponse(Config.STATUS_200, Config.MSG_DELETE_200, true, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	
	
	
	/**
	 * 查询所有主楼回复与副楼回复  未分页
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/searchAllPostAndSubPost")
	public @ResponseBody ResponseContainer searchAllPostAndSubPost(HttpServletRequest request) {
		try {
			// String topicid = request.getParameter("topicid");
			
			
			String topicid = request.getParameter("topicid");
			List<Post> PostList = postService.getAllTopicPost(topicid);
			 
			List l = new ArrayList();
			
			// 课程下所有副楼回复
			for (Post post : PostList) {
				Map m=new HashMap();
				List<SubPost> subPostList = postService.getAllSubPost(post.getPostId());
				 
				m.put("post", post);
				m.put("number", subPostList.size());
				m.put("subpost", subPostList);
				m.put("images", post.getImages());
				l.add(m);
			}

			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, l, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}


	/**
	 * 查询所有主楼回复  未分页
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/searchAllPost")
	public @ResponseBody ResponseContainer searchAllSubPost(HttpServletRequest request) {
		try {
			// String topicid = request.getParameter("topicid");
			
			
			String topicid = request.getParameter("topicid");
			List<Post> PostList = postService.getAllTopicPost(topicid);
			 
			 

			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, PostList, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询所有副楼回复   未分页
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/searchAllSubPost")
	public @ResponseBody ResponseContainer searchAllPost(HttpServletRequest request) {
		try {
			String postid = request.getParameter("postid");

			List<SubPost> subPostList = postService.getAllSubPost(postid);

			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, subPostList, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
	
	
	/**
	 * 查询主楼回复信息
	 * @param dm
	 * @param request
	 * @return
	 */
	@RequestMapping("findPost")
	public ResponseContainer findPost(QueryModel dm,HttpServletRequest request){
		try {
            String topicId = request.getParameter("topicId");
             
			//根据请求参数封装一个分页信息对象
            dm.setMode("AES");
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<Post> postList = postService.getTopicPost(topicId, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), postList);
			this.getReponseData().setResult(postList.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),
					Config.RESP_MODE_10, "");
			 
		}catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	/**
	 * 查询主楼回复信息
	 * @param dm
	 * @param request
	 * @return
	 */
	@RequestMapping("findTop3Post")
	public ResponseContainer findTop3Post(HttpServletRequest request){
		try {
            String topicId = request.getParameter("topicId");
            QueryModel dm=new QueryModel();
			dm.setN(0);
			dm.setS(3);
			dm.setSort("likesCount");
			dm.setMode("DESC");
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<Post> postList = postService.getTopicPost(topicId, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), postList);
			this.getReponseData().setResult(postList.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),
					Config.RESP_MODE_10, "");
			 
		}catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	
	/**
	 * 查询主楼回复信息
	 * @param dm
	 * @param request
	 * @return
	 */
	@RequestMapping("findSubPost")
	public ResponseContainer findSubPost(QueryModel dm,
			HttpServletRequest request) {
		try {

			String postId = request.getParameter("postId");
			// 根据请求参数封装一个分页信息对象
			dm.setMode("AES");
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<SubPost> subPostList = postService
					.getSubPost(postId, pageable);
			ReponseDataTools
					.getClientReponseData(getReponseData(), subPostList);
			this.getReponseData().setResult(subPostList.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200,
					getReponseData(), Config.RESP_MODE_10, "");

		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	
	/**
	 * 查询副楼回复信息
	 * @param dm
	 * @param request
	 * @return
	 */
	@RequestMapping("findSubPostPc")
	public ResponseContainer findSubPostPc(QueryModel dm,HttpServletRequest request,String postId){
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		try {
		Page<SubPost> posts=postService.getSubPost(postId, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), posts);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(), Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), null, Config.RESP_MODE_10, "");
		}

//		try {
//            String postId = request.getParameter("postId");
//            dm.setSort("ctime");
//			//根据请求参数封装一个分页信息对象
//            dm.setMode("DESC");
//            //第一页情况          
//            	Post post=postService.findOneById(postId);            
//				List<SubPost> subPosts= post.getSubPosts();				
//				if(subPosts==null){
//					subPosts=new ArrayList<SubPost>();
//				}
//				int total=subPosts.size();				
//				Pageable pageable = PageRequestTools.pageRequesMake(dm);
//				//纠正第一页
//				if(dm.getN()==0){
//					if(subPosts.size()>dm.getS()){
//						Page<SubPost> resPage=new PageImpl<SubPost>(subPosts);
//						ReponseDataTools.getClientReponseData(getReponseData(), resPage);
//					}
//					else{
//						//dm.setS(dm.getS()-subPosts.size());
//						Page<SubPost> subPostList = postService.getSubPost(postId, pageable);
//						long ss=subPostList.getTotalElements();
//						if(subPostList.getContent().size()+subPosts.size()>dm.getS()){
//							int s=subPosts.size();
//							for (int i=0 ;i<dm.getS()-s;i++) {
//								subPosts.add(subPostList.getContent().get(i));
//							}
//						}
//						else{
//							subPosts.addAll(subPostList.getContent());
//						}
//						Page<SubPost> resPage=new PageImpl<SubPost>(subPosts);
//						ReponseDataTools.getClientReponseData(getReponseData(), resPage);
//						getReponseData().setTotal_rows(ss+total);
//					}
//				}
//				else{
//						Page<SubPost> subPostList = postService.getSubPost(postId, pageable);
//						ReponseDataTools.getClientReponseData(getReponseData(), subPostList);
//
//				}           			
//			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
//		}catch (XueWenServiceException e) {
//			e.printStackTrace();
//			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
//		} catch (Exception e){
//			e.printStackTrace();
//			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
//		}
	}
	
	
	/**
	 * 根据群组id或者课程Id查询话题列表
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="findByGroupId")
	public @ResponseBody ResponseContainer findByGroupId(HttpServletRequest request,QueryModel dm) {
		//根据请求参数封装一个分页信息对象
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		// 通过房间id获取话题列表
		String groupId = request.getParameter("sourceId");
		String appKey = request.getParameter("appKey");
		Page<Topic> topicResult;
		try {
			topicResult = topicService.findTopicByGroupIdOrCourseId(groupId,appKey,null, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), topicResult);
			this.getReponseData().setResult(topicService.toResponses(topicResult.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	
	/**
	 * 创建主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="create", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer create(HttpServletRequest request,Topic topic,String  tagName,String isGeoOpen) {
		try {
			String uid = request.getParameter("uid");
			String image = request.getParameter("image");
			User currentUser = userService.findUser(uid);
			Topic topicResult = topicService.createTopic(currentUser,topic,tagName,isGeoOpen, image);
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, topicResult,Config.RESP_MODE_10, "");
		}catch (XueWenServiceException e) {
//			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}catch (Exception e) {
//			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 更新主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="updateTopicByGroup", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer updateTopicByGroup(HttpServletRequest request,Topic topic) {
		try {
			
			String topicId = request.getParameter("topicId");
			String groupid = request.getParameter("groupid");
			String title = request.getParameter("title");
			String content = request.getParameter("content");
			String picUrl = request.getParameter("picUrl");	
			String tagName = request.getParameter("tagName");	
			Topic topicResult =topicService.findOneById(topicId);
			
			if(groupid==null){
				topicResult = (Topic) objCopyPropsService.copyPropertiesInclude(topic, topicResult, new String[] { "title","content","picUrl","categoryId","childCategoryId","tagNames"});
			}
			else{
				//关联群组
				XueWenGroup rg = groupService.findGroup(groupid);
				topic.setSourceId(rg.getId());
				topic.setSourceName(rg.getGroupName());
				topicResult = (Topic) objCopyPropsService.copyPropertiesInclude(topic, topicResult, new String[] { "sourceId","sourceName"});
			}
			
			
			topicService.updateTopic(topicResult);
			//Topic topicResult = topicService.createTopic(currentUser,topic,tagName,isGeoOpen);
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, topicResult,Config.RESP_MODE_10, "");
		}catch (XueWenServiceException e) {
//			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}catch (Exception e) {
//			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 课程Id查询话题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("one")
	public @ResponseBody ResponseContainer one(HttpServletRequest request, Topic topic,QueryModel dm) {
		//根据请求参数封装一个分页信息对象
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		// 通过房间id获取话题列表
		String topicid = request.getParameter("topicid");
		 
		Topic topicResult;
		try {
			topicResult = topicService.findOneById(topicid);
			if(topicResult==null){
				 topicResult = new Topic();
			}
			this.getReponseData().setResult(topicResult);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	 
	
	/**
	 * 按照名称或者描述搜索主题 包括没有关联课程的
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("search")
	public @ResponseBody ResponseContainer searchAll(HttpServletRequest request, Topic topic,QueryModelMul dm) {
		//根据请求参数封装一个分页信息对象
		List<String> sort = new ArrayList<String>();
		//sort.add("displayOrder");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		
		Page<Topic> topicResult;
		try {
			String keyword = request.getParameter("keyword");
//			User currentUser = this.getCurrentUser(token);
			topicResult = topicService.searchAll(keyword,pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), topicResult);
			this.getReponseData().setResult(topicService.toResponses(topicResult.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 
	 * @Title: getGroupTopic
	 * @Description: 根据关键字搜索话题列表
	 * @param groupId
	 * @param dm
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getSearchGroupTopPc")
	public @ResponseBody ResponseContainer getSearchGroupTopPc(String keyWords,QueryModel dm){
		
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		try {
			Map<String, Object>resref=topicService.getSearchGroupTopPc(keyWords, pageable);
		    @SuppressWarnings("unchecked")
			Page<Topic> topics=(Page<Topic>) resref.get("topics");
	    	ReponseDataTools.getClientReponseData(getReponseData(), topics);
	    	getReponseData().setResult(resref.get("objs"));
	    	if(getReponseData().getTotal_rows()==0){
				getReponseData().setResult(null);
			}
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	
//	/**
//	 * 
//	 * @Title: getSearchGroupTopByTagPc
//	 * @Description: 根据标签搜索话题列表
//	 * @param groupId
//	 * @param dm
//	 * @return ResponseContainer
//	 * @throws
//	 */
//	@SuppressWarnings("unchecked")
//	@RequestMapping("getSearchGroupTopByTagPc")
//	public @ResponseBody ResponseContainer getSearchGroupTopByTagPc(String tagName,QueryModel dm){
//		Pageable pageable = PageRequestTools.pageRequesMake(dm);
//		try {
//			Map<String, Object> topics=topicService.getSearchGroupTopByTagPc(tagName, pageable);
//			ReponseDataTools.getClientReponseData(getReponseData(), (Page<Topic>)topics.get("page"));
//			getReponseData().setResult(topics.get("result"));
//			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(), Config.RESP_MODE_10, "");
//		} catch (XueWenServiceException e) {
//			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
//		} catch (Exception e) {
//			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
//		}
//	}
	/**
	 * 
	 * @Title: getGroupTopic
	 * @Description: 获取群话题列表
	 * @param groupId
	 * @param dm
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getGroupTopicPc")
	public @ResponseBody ResponseContainer getGroupTopic(String groupId,QueryModel dm){
		
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		try {
			Map<String, Object>resref=topicService.getGroupTopPc(groupId, pageable);
		    @SuppressWarnings("unchecked")
			Page<Topic> topics=(Page<Topic>) resref.get("topics");
			ReponseDataTools.getClientReponseData(getReponseData(), topics);
			
			getReponseData().setResult(topicService.toResponses(topics.getContent()));
			if(getReponseData().getTotal_rows()==0){
				getReponseData().setResult(null);
			}
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @Title: getOne
	 * @Description: 通过topId取主题
	 * @param topicId
	 * @param token
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getOneByIdPc")
	public ResponseContainer getOnePc(String topicId,String token) {
	   try {
		   User user = token==null?null:getCurrentUser(token);
		   String userId=user==null?null:user.getId();
			JSONObject res = topicService.topicDetailPc(userId, topicId);
			return addResponse(Config.STATUS_200, Config.MSG_200, res,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @Title: getGroupTop10Topics
	 * @Description: 获取群空间top10话题
	 * @param request
	 * @param groupId
	 * @param dm
	 * @param appKey
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getGroupTop10Topics")
	public @ResponseBody ResponseContainer getGroupTop10Topics(
			HttpServletRequest request, String groupId, QueryModel dm,
			String appKey) {
		// 根据请求参数封装一个分页信息对象
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		try {
			Page<Topic> topics = topicService.findByGroupId(groupId, pageable,
					appKey);
			List<JSONObject> res = topicService
					.shoutPageTopicForGroupSpace(topics);			
			ReponseDataTools.getClientReponseData(getReponseData(), topics);
			getReponseData().setResult(res);
			if(getReponseData().getTotal_rows()==0){
				getReponseData().setResult(null);
			}
			
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 回复主楼
	 * @param request
	 * @param file
	 * @return
	 */
	@RequestMapping(value="replyTopic",method = RequestMethod.POST)
	public @ResponseBody ResponseContainer replyTopic(HttpServletRequest request,Post post) {
		String uid = request.getParameter("uid");
		try {
			User currentUser = userService.findUser(uid);
			String imgJson = request.getParameter("imgJson");
			if(!StringUtils.isEmpty(imgJson)){
				List<Images> imageList = JSON2ObjUtil.getDTOList(imgJson, Images.class);
				post.setImages(imageList);
			}
			Post postResult = postService.replyTopic(currentUser,post,"");
			return addResponse(Config.STATUS_200, Config.MSG_200, postResult,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}	
	}
	
	
	/**
	 * 回复付楼
	 * @param request
	 * @param file
	 * @return
	 */
	@RequestMapping(value="replyPost",method = RequestMethod.POST)
	public @ResponseBody ResponseContainer replyPost(HttpServletRequest request,SubPost subPost) {
		String uid = request.getParameter("uid");
		try {
			User currentUser = userService.findUser(uid);
			SubPost subPostResult = postService.replyPost(currentUser,subPost);
			return addResponse(Config.STATUS_200, Config.MSG_200, subPostResult,
					Config.RESP_MODE_10, "");
		}catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}	
	}
	/**
	 * 根据群组id或者课程Id查询话题列表
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("one/source")
	public @ResponseBody ResponseContainer findByGroupId(
			HttpServletRequest request, Topic topic, QueryModel dm) {
		// 根据请求参数封装一个分页信息对象
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		// 通过房间id获取话题列表
		String groupId = request.getParameter("sourceId");
		String courseId = request.getParameter("courseId");
		String appKey = request.getParameter("appKey");
		Page<Topic> topicResult;
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			topicResult = topicService.findTopicByGroupIdOrCourseId(groupId,
					appKey, courseId, pageable);
			if (topicResult.getTotalElements() == 0) {
				getReponseData().setCurr_page(topicResult.getNumber());
				int curr_rows = topicResult.getNumber() * topicResult.getSize();
				if (curr_rows > topicResult.getTotalElements()) {
					curr_rows = new Long(topicResult.getTotalElements())
							.intValue();
					getReponseData().setCurr_rows(curr_rows);
				} else {
					getReponseData().setCurr_rows(curr_rows);
				}
			} else {
				getReponseData().setCurr_page(topicResult.getNumber() + 1);
				int curr_rows = (topicResult.getNumber() + 1)
						* topicResult.getSize();
				if (curr_rows > topicResult.getTotalElements()) {
					curr_rows = new Long(topicResult.getTotalElements())
							.intValue();
					getReponseData().setCurr_rows(curr_rows);
				} else {
					getReponseData().setCurr_rows(curr_rows);
				}
			}
			getReponseData().setTotal_rows(topicResult.getTotalElements());
			getReponseData().setPage_rows(topicResult.getTotalPages());
			this.getReponseData().setResult(topicService.toResponses(topicResult
					.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 将话题title为空的补充值
	 * @param request
	 * @return
	 */
	@RequestMapping("title")
	public @ResponseBody ResponseContainer title(HttpServletRequest request){
		topicService.getTopics();
		return null;
	}
	/**
	 * 
	 * 给主题默认增加分类
	 * @param id
	 * @return
	 */
	@RequestMapping("/addTopicCategory")
	public @ResponseBody ResponseContainer addTopicCategory(String id, HttpServletRequest request) {
		try {
			topicService.addCategoryForTopic();
			return addResponse(Config.STATUS_200, Config.MSG_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
		//	logger.error("==========业务错误，根据群组ID查询群信息,不包含成员列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
		//	logger.error("==========未知错误，根据群组ID查询群信息,不包含成员列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 按照名称或者描述搜索主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("searchInGroup")
	public @ResponseBody ResponseContainer searchByGroupId(HttpServletRequest request,String groupId,Topic topic, QueryModelMul dm) {
		// 根据请求参数封装一个分页信息对象
		List<String> sort = new ArrayList<String>();
		sort.add("displayOrder");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);

		Page<Topic> topicResult;
		try {
			String keywords = request.getParameter("keywords");
			topicResult = topicService.searchByGroupId(groupId, keywords, pageable);
			ReponseDataTools.getClientReponseData(getReponseData(), topicResult);
			this.getReponseData().setResult(topicService.toResponses(topicResult.getContent()));
			if(getReponseData().getTotal_rows()==0){
				getReponseData().setResult(null);
			}
			return addPageResponse(Config.STATUS_200, Config.MSG_200, getReponseData(),Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 
	 * 修改主题图片结构
	 * @param id
	 * @return
	 */
	@RequestMapping("/updateTopicPicUrl")
	public @ResponseBody ResponseContainer updateTopicPicUrl(String id, HttpServletRequest request) {
		try {
			topicService.updateImage();
			return addResponse(Config.STATUS_200, Config.MSG_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
		//	logger.error("==========业务错误，根据群组ID查询群信息,不包含成员列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
		//	logger.error("==========未知错误，根据群组ID查询群信息,不包含成员列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 话题审核
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("checkTopic")
	public @ResponseBody ResponseContainer checkTopic(HttpServletRequest request) {
		// 根据请求参数封装一个分页信息对象
		 

		Topic topicResult;
		try {
			String tid = request.getParameter("tid");
			String checked = request.getParameter("checked");
			boolean b=Boolean.parseBoolean(checked);
			topicResult=topicService.findByGroupId(tid);
			topicResult.setReview(b);
			topicService.savetopic(topicResult);
			return addResponse(Config.STATUS_200, Config.MSG_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	
	
}
