package operation.controller.topics;


import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import operation.BaseController;
import operation.exception.XueWenServiceException;
import operation.pojo.pub.QueryModel;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.topics.Topic;
import operation.pojo.topics.TopicNearResponse;
import operation.pojo.topics.TopicResponse;
import operation.pojo.user.User;
import operation.service.topics.PostService;
import operation.service.topics.TopicService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.geo.Distance;
import org.springframework.data.geo.Metrics;
import org.springframework.data.geo.Point;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import tools.Config;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;


@RestController
@RequestMapping("/topic")
public class TopicController extends BaseController{
	
	@Autowired
	private TopicService topicService;
	
	@Autowired
	private PostService postService;
	/**
	 * 创建主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="create", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer create(HttpServletRequest request,Topic topic,String  tagName,String isGeoOpen) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			Topic topicResult = topicService.createTopic(currentUser,topic,tagName,isGeoOpen);
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, topicResult,Config.RESP_MODE_10, "");
		}catch (XueWenServiceException e) {
//			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		}catch (Exception e) {
//			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 根据群组id或者课程Id查询话题列表
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("one/source")
	public @ResponseBody ResponseContainer findByGroupId(HttpServletRequest request, Topic topic,QueryModel dm) {
		//根据请求参数封装一个分页信息对象
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		// 通过房间id获取话题列表
		String groupId = request.getParameter("sourceId");
		String courseId = request.getParameter("courseId");
		String appKey = request.getParameter("appKey");
		Page<Topic> topicResult;
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			topicResult = topicService.findTopicByGroupIdOrCourseId(groupId,appKey,courseId, pageable);
			if (topicResult.getTotalElements() == 0) {
				rsData.setCurr_page(topicResult.getNumber());
				int curr_rows=topicResult.getNumber()*topicResult.getSize();
				if(curr_rows>topicResult.getTotalElements()){
					curr_rows=new Long(topicResult.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(topicResult.getNumber() + 1);
				int curr_rows=(topicResult.getNumber()+1)*topicResult.getSize();
				if(curr_rows>topicResult.getTotalElements()){
					curr_rows=new Long(topicResult.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(topicResult.getTotalElements());
			rsData.setPage_rows(topicResult.getTotalPages());
			this.rsData.setResult(topicService.toResponses(topicResult.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 查询主题详情
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("one")
	public @ResponseBody ResponseContainer findOneTopic(HttpServletRequest request) {
		String topicId = request.getParameter("topicId");
		String token = request.getParameter("token");
		String sourceId = request.getParameter("sourceId");
		User currentUser = this.getCurrentUser(token);
		try {
			TopicResponse tpoicRes = topicService.topicDetails(currentUser.getId(), topicId,sourceId);
			return addResponse(Config.STATUS_200, Config.MSG_200, tpoicRes,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}
		
	}
	
	/**
	 * 
	 * @Title: getOne
	 * @Description: 通过topId取主题
	 * @param topicId
	 * @param token
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("getOneById")
	public ResponseContainer getOne(String topicId,String token){
		User user = this.getCurrentUser(token);
		
		try {
			TopicResponse res=topicService.topicDetail(user.getId(),topicId);
			return addResponse(Config.STATUS_200, Config.MSG_200, res,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}

		

		
	}
	
	
	/**
	 * 主题赞
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/{id}/like")
	public @ResponseBody ResponseContainer like(@PathVariable("id") String id,
			HttpServletRequest request) {
		String token = request.getParameter("token");
		try {
			User currentUser = this.getCurrentUser(token);
			Topic topic = topicService.topicAddParise(currentUser,id);
			return addResponse(Config.STATUS_200, Config.MSG_200, topic,
					Config.RESP_MODE_10, "");
			}
			catch (XueWenServiceException e) {
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,
						Config.RESP_MODE_10, "");
			} catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,
						Config.RESP_MODE_10, "");
			}	
	}
	
	/**
	 * 主题不赞
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/{id}/unlike")
	public @ResponseBody ResponseContainer unlike(@PathVariable("id") String id,
			HttpServletRequest request) {
		String token = request.getParameter("token");
		try {
			User currentUser = this.getCurrentUser(token);
			Topic topic = topicService.topicAddUnParise(currentUser,id);
			return addResponse(Config.STATUS_200, Config.MSG_200, topic,
					Config.RESP_MODE_10, "");
			}
			catch (XueWenServiceException e) {
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,
						Config.RESP_MODE_10, "");
			} catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,
						Config.RESP_MODE_10, "");
			}	
	}
	/**
	 * 主题分享
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("/{id}/share")
	public @ResponseBody ResponseContainer share(@PathVariable("id") String id,
			HttpServletRequest request) {
		String token = request.getParameter("token");
		String toAddr=request.getParameter("toAddr");
		String appkey = request.getParameter("appKey");
		String toType = request.getParameter("toType");
		
		try {
			User currentUser = this.getCurrentUser(token);
			Topic topic = topicService.topicAddShare(currentUser, id, toAddr,appkey,toType);
			return addResponse(Config.STATUS_200, Config.MSG_200, topic,
					Config.RESP_MODE_10, "");
			}
			catch (XueWenServiceException e) {
				e.printStackTrace();
				return addResponse(e.getCode(), e.getMessage(), false,
						Config.RESP_MODE_10, "");
			} catch (Exception e) {
				e.printStackTrace();
				return addResponse(Config.STATUS_505, Config.MSG_505, false,
						Config.RESP_MODE_10, "");
			}	
	}
	
	/**
	 * 查询所有主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("all")
	public @ResponseBody ResponseContainer findAll(HttpServletRequest request, Topic topic,QueryModelMul dm) {
		//根据请求参数封装一个分页信息对象
		List<String> sort = new ArrayList<String>();
		sort.add("displayOrder");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		
		Page<Topic> topicResult;
		try {
//			String token = request.getParameter("token");
//			User currentUser = this.getCurrentUser(token);
			topicResult = topicService.all(pageable);
			ReponseDataTools.getClientReponseData(rsData, topicResult);
			if (topicResult.getTotalElements() == 0) {
				rsData.setCurr_page(topicResult.getNumber());
				int curr_rows=topicResult.getNumber()*topicResult.getSize();
				if(curr_rows>topicResult.getTotalElements()){
					curr_rows=new Long(topicResult.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(topicResult.getNumber() + 1);
				int curr_rows=(topicResult.getNumber()+1)*topicResult.getSize();
				if(curr_rows>topicResult.getTotalElements()){
					curr_rows=new Long(topicResult.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(topicResult.getTotalElements());
			rsData.setPage_rows(topicResult.getTotalPages());
			this.rsData.setResult(topicService.toResponses(topicResult.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 按照名称或者描述搜索主题
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("search")
	public @ResponseBody ResponseContainer search(HttpServletRequest request, Topic topic,QueryModelMul dm) {
		//根据请求参数封装一个分页信息对象
		List<String> sort = new ArrayList<String>();
		sort.add("displayOrder");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		
		Page<Topic> topicResult;
		try {
			String keywords = request.getParameter("keywords");
//			User currentUser = this.getCurrentUser(token);
			topicResult = topicService.search(keywords,pageable);
			ReponseDataTools.getClientReponseData(rsData, topicResult);
			this.rsData.setResult(topicService.toResponses(topicResult.getContent()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	
	
	
	/**
	 * 创建话题表，用于保存地理坐标二维数组
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/createtable")
	public  void createTable(){
		try {
			topicService.creatTable();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	/**
	 * 查询附近得话题
	 * @param dm
	 * @param request
	 * @return
	 */
	@RequestMapping("nearTopic")
	public ResponseContainer findNearTopic(QueryModel dm,HttpServletRequest request){
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String lat = request.getParameter("lat"); //维度
			String lng = request.getParameter("lng");//精度
			Point p = null;
			Distance dis = null;
			if(null!=lat && null!= lng){
			 p = new Point(Double.parseDouble(lng),Double.parseDouble(lat));
			 dis = new Distance(10,Metrics.KILOMETERS);
			}
			List<TopicResponse> topic = topicService.findAllNearTopic(currentUser.getId(),p,dis);
			long topicCount = topicService.topicCount();
			TopicNearResponse tnr = new TopicNearResponse(topic,topicCount);
			this.rsData.setResult(tnr);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
			
	}	
	
	/**
	 * 
	 * @Title: setTopicBarCode
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("setTopicBarCode")
	@ResponseBody
	public ResponseContainer setTopicBarCode(String topicId,String url){
		try {
			topicService.setTopicBarCode(topicId, url);
			return addResponse(Config.STATUS_200, Config.MSG_200, true,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}
	}
	
}
