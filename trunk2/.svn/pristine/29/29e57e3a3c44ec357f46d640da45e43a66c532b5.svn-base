package operation.controller.group;

import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import operation.BaseController;
import operation.exception.XueWenServiceException;
import operation.pojo.group.MyAllGroup;
import operation.pojo.group.ResponseGroup;
import operation.pojo.group.ResponseNearGroup;
import operation.pojo.group.XueWenGroup;
import operation.pojo.pub.QueryModel;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.user.ResponsePcUser;
import operation.pojo.user.User;
import operation.pojo.user.UserMoreMessage;
import operation.service.course.CourseService;
import operation.service.course.UserGroupCourseService;
import operation.service.drycargo.DrycargoService;
import operation.service.group.GroupNumService;
import operation.service.group.GroupNumberCreateService;
import operation.service.group.GroupPcService;
import operation.service.group.GroupService;
import operation.service.group.MyGroupService;
import operation.service.openfire.OpenFireGroupService;
import operation.service.queue.QueueService;
import operation.service.user.UserPcService;
import operation.service.user.UserService;
import operation.service.vo.SearchGroupVoService;
import operation.vo.SearchGroupVo;

import org.apache.log4j.Logger;
import org.jivesoftware.smack.util.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.geo.Distance;
import org.springframework.data.geo.Metrics;
import org.springframework.data.geo.Point;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import tools.Config;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;
import tools.StringUtil;

@RestController
@RequestMapping("/group")
@Configuration
/**
 * 群组controller，用户接受客户端请求的数据，
 * 与service层交互，并将数据反馈给客户端
 * @author nes
 *
 */
public class GroupController extends BaseController {
	private static final Logger logger=Logger.getLogger(GroupController.class);
	
	@Inject Environment env;
	@Autowired
	public GroupService groupService;
	@Autowired
	public GroupPcService groupPcService;
	@Autowired
	public UserService userService;
	@Autowired
	public UserPcService userPcService;
	@Autowired
	public OpenFireGroupService openFireGroupService;
	@Autowired
	public GroupNumberCreateService groupNumberCreateService;
	
	@Autowired
	public GroupNumService groupNumService;
	
	@Autowired
	public QueueService queueService;
	
	@Autowired
	public MyGroupService myGroupService;
	
	@Autowired
	public DrycargoService drycargoService;
	
	@Autowired
	public CourseService courseService;
	
	@Autowired
	public UserGroupCourseService userGroupCourseService;
	
	@Autowired
	private SearchGroupVoService searchVoService;

	public GroupController() {
		super();
	}
    
	
	/**
	 * 创建群组表，用于保存地理坐标二维数组
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/createtable")
	public  void createTable(){
		try {
			groupService.creatTable();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	/**
	 * 创建群组Pc时，获取推荐的标签
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/groupRecTagPc", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer getGroupRecTagPc(HttpServletRequest request) {
		try {
			logger.info("=============Pc开始创建群组==============");
			String groupName = request.getParameter("groupName");
			String intro = request.getParameter("intro");
			List<String> list = groupPcService.getGroupRecTagPc(groupName,intro,10,3);
			return addResponse(Config.STATUS_200, Config.MSG_200,list, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			logger.error("==========业务错误，Pc创建群失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			logger.error("==========未知错误，Pc创建群失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 创建群组Pc
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/createPc", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer createPc(HttpServletRequest request,XueWenGroup group) {
		try {
			logger.info("=============Pc开始创建群组==============");
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String tagName = request.getParameter("tagName");
			XueWenGroup groupCreate = groupPcService.createGroupPc(group,currentUser,tagName);
			groupCreate=groupService.addResponseGroup(groupCreate);
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200,groupCreate, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			logger.error("==========业务错误，Pc创建群失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			logger.error("==========未知错误，Pc创建群失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 更新群组信息
	 * 
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/updatePc", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer updateGroup(HttpServletRequest request,XueWenGroup group) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String tagName = request.getParameter("tagName");
			XueWenGroup rg = groupPcService.updateGroupPc(group,currentUser,tagName);
			searchVoService.updateByGroup(group, tagName);
			
//			if (null != file && !file.isEmpty()) {
//				rg = groupService.upLoadLogo(file, rg);
//			}
			return addResponse(Config.STATUS_200, Config.MSG_UPDATE_200,groupService.changGroupToResponseGroup(rg,currentUser.getId()),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("===========业务错误，更新群组信息==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，更新群组信息==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 创建群组
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer create(HttpServletRequest request,XueWenGroup group) {
		try {
			logger.info("=============开始创建群组==============");
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String lat = request.getParameter("lat"); //维度
			String lng = request.getParameter("lng");//精度
			String tagName = request.getParameter("tagName");
			logger.info("获得群组标签==================="+tagName);
			String isGeoOpen = request.getParameter("isGeoOpen");//是否显示地理坐标
			XueWenGroup groupCreate = groupService.createGroup(group,currentUser,tagName,lat,lng,isGeoOpen);
			groupCreate=groupService.addResponseGroup(groupCreate);
			//2015.1.14 加 groupVo Bean tangli
			searchVoService.create(groupCreate);
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200,groupCreate, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			logger.error("==========业务错误，创建群失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			logger.error("==========未知错误，创建群失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 根据群组ID查询群信息,不包含成员列表
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/one/{id}")
	public @ResponseBody ResponseContainer findGroup(
			@PathVariable("id") String id, HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			XueWenGroup group = groupService.findGroup(id, currentUser.getId());
			return addResponse(Config.STATUS_200, Config.MSG_200, group,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，根据群组ID查询群信息,不包含成员列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，根据群组ID查询群信息,不包含成员列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 根据群组ID查询群信息,不包含成员列表
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/onePc/{id}")
	public @ResponseBody ResponseContainer findGroupPc(
			@PathVariable("id") String id, HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			return addResponse(Config.STATUS_200, Config.MSG_200, groupPcService.findGroup(id,currentUser.getId()),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，根据群组ID查询群信息,不包含成员列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，根据群组ID查询群信息,不包含成员列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 根据群组ID查询群成员列表
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/one/{id}/member")
	public @ResponseBody ResponseContainer findGroupMmber(
			@PathVariable("id") String id, HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			XueWenGroup group = groupService.findGroupMmber(id, currentUser.getId());
			return addResponse(Config.STATUS_200, Config.MSG_200, group,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("==========业务错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("==========未知错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 根据群组ID查询群成员列表
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/one/{id}/memberPc")
	public @ResponseBody ResponseContainer findGroupMmberPage(
			@PathVariable("id") String id, String userName, HttpServletRequest request) {
		try {
			//根据请求参数封装一个分页信息对象
			List<ResponsePcUser> users = groupService.findPcGroupMmbers(id,userName);
			return addResponse(Config.STATUS_200, Config.MSG_200, users,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			logger.error("==========业务错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			logger.error("==========未知错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询所有群组支持翻页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/all")
	public @ResponseBody ResponseContainer findAllGroup(QueryModel dm,
			HttpServletRequest request) {
		try {

			//根据请求参数封装一个分页信息对象
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
				
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			Page<XueWenGroup> group = groupService.all(pageable,currentUser.getId());
								
			if (group.getTotalElements() == 0) {
				rsData.setCurr_page(group.getNumber());			
					rsData.setCurr_rows(0);				
			} else {
				rsData.setCurr_page(group.getNumber() + 1);
				int curr_rows=(group.getNumber()+1)*group.getSize();
				if(curr_rows>group.getTotalElements()){
					curr_rows=new Long(group.getTotalElements()).intValue();					
				}
				rsData.setCurr_rows(curr_rows);
			}
						
			rsData.setTotal_rows(group.getTotalElements());
			rsData.setPage_rows(group.getTotalPages());
			
			this.rsData.setResult(groupService
					.changeGroupsToResponseGroup(group.getContent(),currentUser.getId()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，查询所有群组支持翻页==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，查询所有群组支持翻页==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}

	}
	/**
	 * 根据关键字查询所有群组支持翻页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/findGroupByKeywords")
	public @ResponseBody ResponseContainer findGroupByKeywords(QueryModel dm,
			HttpServletRequest request) {
		try {
			dm.setSort("groupMemberNumber");
			//根据请求参数封装一个分页信息对象
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			String keywords=request.getParameter("keywords");
			Page<SearchGroupVo> group = searchVoService.findVoByKeywords(keywords, pageable);
			if (group.getTotalElements() == 0) {
				rsData.setCurr_page(group.getNumber());			
					rsData.setCurr_rows(0);				
			} else {
				rsData.setCurr_page(group.getNumber() + 1);
				int curr_rows=(group.getNumber()+1)*group.getSize();
				if(curr_rows>group.getTotalElements()){
					curr_rows=new Long(group.getTotalElements()).intValue();					
				}
				rsData.setCurr_rows(curr_rows);
			}
			rsData.setTotal_rows(group.getTotalElements());
			rsData.setPage_rows(group.getTotalPages());
			this.rsData.setResult(group.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，查询所有群组支持翻页==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，查询所有群组支持翻页==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}

	}
	/**
	 * 查询所有群组不支持翻页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/all/sort")
	public @ResponseBody ResponseContainer findAllSortGroup(
			HttpServletRequest request) {
		try {
			String sort = request.getParameter("sort");
			String mode = request.getParameter("mode");	
			if (StringUtil.isEmpty(sort)) {
				sort = "ctime";
			}
			if (StringUtil.isEmpty(mode)) {
				mode = "DESC";
			}
			Direction d = Direction.DESC;
			if(mode.equalsIgnoreCase("ASC")){
				d = Direction.ASC;
			}
			Sort st = new Sort(d,sort);
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);

			List<XueWenGroup> group = groupService.all(st, currentUser.getId());
			this.rsData.setResult(groupService
					.changeGroupsToResponseGroup(group,currentUser.getId()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，查询所有群组不支持翻页==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，查询所有群组不支持翻页==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 更新群组信息
	 * 
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "{id}/update", method = RequestMethod.POST)
	public @ResponseBody ResponseContainer updateGroup(@PathVariable("id") String id, HttpServletRequest request,XueWenGroup group) {
		try {
			
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String lat=request.getParameter("lat");
			String lng=request.getParameter("lng");
			String tagName = request.getParameter("tagName");
			logger.info("更改群标签====================="+tagName);
			String isGeoOpen = request.getParameter("isGeoOpen");//是否显示地理坐标
			XueWenGroup rg = groupService.updateGroup(group,id,currentUser,tagName,lat,lng,isGeoOpen);
			//更新Vo
			searchVoService.updateByGroup(group, tagName);
			return addResponse(Config.STATUS_200, Config.MSG_UPDATE_200,groupService.changGroupToResponseGroup(rg,currentUser.getId()),
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("===========业务错误，更新群组信息==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，更新群组信息==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 解散群
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/{id}/delete")
	public @ResponseBody ResponseContainer delete(
			@PathVariable("id") String id, HttpServletRequest request) {
		// String userId = request.getParameter("userId");
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			boolean result = groupService.deleteById(id, currentUser.getId());
//			searchVoService.delete(id);
			return addResponse(Config.STATUS_200, Config.MSG_DELETE_200,
					result, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("===========业务错误，解散群==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，解散群==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}

	}

	/**
	 * 加入群
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/{id}/join")
	public @ResponseBody ResponseContainer join(@PathVariable("id") String id,
			HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String passWord = request.getParameter("passWord");
			boolean result = groupService.join(id, currentUser.getId(),
					passWord);
			
			return addResponse(Config.STATUS_200, Config.MSG_JOIN_200, result,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("===========业务错误，加入群==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，加入群==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}

	}

	/**
	 * 退出群
	 * 
	 * @param groupId
	 * @return
	 */
	@RequestMapping("/{id}/quit")
	public @ResponseBody ResponseContainer quit(@PathVariable("id") String id,
			HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			boolean result = groupService.quit(id, currentUser.getId());
			return addResponse(Config.STATUS_200, Config.MSG_OUT_200, result,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，退出群==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，退出群==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}

	}
	
	/**
	 * 管理员将成员踢出群
	 * 
	 * @param groupId
	 * @return
	 */
	@RequestMapping("/{id}/{userId}/kick")
	public @ResponseBody ResponseContainer kick(@PathVariable("id") String id,@PathVariable("userId") String kickuserId,
			HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			boolean result = groupService.kick(id, kickuserId,currentUser.getId());
			if(result){
				return addResponse(Config.STATUS_200, Config.KICK_OUT_200, result,
						Config.RESP_MODE_10, "");
			}else{
				return addResponse(Config.STATUS_201, "踢出失败", result,
						Config.RESP_MODE_10, "");
			}
			
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，管理员将成员踢出群==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，管理员将成员踢出群==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}

	}

	/**
	 * 将群员提升为管理员
	 * 或将管理员降为普通成员
	 * @param id
	 * @return
	 */
	@RequestMapping("/{groupId}/{userId}/{type}/change")
	public @ResponseBody ResponseContainer changeToAdmin(
			@PathVariable("groupId") String groupId, @PathVariable("userId") String userId, 
			@PathVariable("type") String type, HttpServletRequest request) {
		try{
		//String userId = request.getParameter("userId");
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		boolean result = groupService.chang(groupId, userId,currentUser,type);
		return addResponse(Config.STATUS_200, Config.MSG_TOADMIN_200, result,
				Config.RESP_MODE_10, "");
		}
		catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，将成员提升为管理员==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，将成员提升为管理员==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 模糊查询
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("search")
	public @ResponseBody ResponseContainer some(HttpServletRequest request) {
		String groupName = request.getParameter("keyword");
		if(groupName == null){
			groupName = "";
		}
		try {
		if(!StringUtil.isEmpty(groupName)){
			groupName = URLDecoder.decode(groupName,"UTF-8").toString();
		}
		String pageNumber = request.getParameter("n");
		String pageSize = request.getParameter("s");
		String sort = request.getParameter("sort");
		String mode = request.getParameter("mode");		
		if (StringUtil.isEmpty(sort)) {
			sort = "ctime";
		}
		if (StringUtil.isEmpty(mode)) {
			mode = "DESC";
		}
		Direction d = Direction.DESC;
		if(mode.equalsIgnoreCase("ASC")){
			d = Direction.ASC;
		}
		Sort st = new Sort(d,sort);
		Pageable pageable = null;
		if (!StringUtils.isNullOrEmpty(pageNumber)
				&& !StringUtils.isNullOrEmpty(pageSize)) {
			pageable = new PageRequest(Integer.parseInt(pageNumber),
					Integer.parseInt(pageSize),st);
		} else {
			pageable = new PageRequest(Integer.parseInt("0"),
					Integer.parseInt("10"),st);
		}
		
		String lat = request.getParameter("lat"); //维度
		String lng = request.getParameter("lng");//精度
		Point p = null;
		Distance dis = null;
		
		if(null!=lat && null!= lng){
		 p = new Point(Double.parseDouble(lng),Double.parseDouble(lat));
		 dis = new Distance(1d);
		
		}
		
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		
			Page<XueWenGroup> group = groupService.findAllByGroupNameRegexOrIntroRegexAndIdNotIn(groupName,currentUser.getId(),p,dis,pageable);
			if (group.getTotalElements() == 0) {
				rsData.setCurr_page(group.getNumber());
				int curr_rows=group.getNumber()*group.getSize();
				if(curr_rows>group.getTotalElements()){
					curr_rows=new Long(group.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			} else {
				rsData.setCurr_page(group.getNumber() + 1);
				int curr_rows=(group.getNumber()+1)*group.getSize();
				if(curr_rows>group.getTotalElements()){
					curr_rows=new Long(group.getTotalElements()).intValue();
					rsData.setCurr_rows(curr_rows);
				}else{
					rsData.setCurr_rows(curr_rows);
				}
			}
			rsData.setTotal_rows(group.getTotalElements());
			rsData.setPage_rows(group.getTotalPages());
			this.rsData.setResult(groupService
					.changeGroupsToResponseGroup1(group.getContent(),currentUser.getId()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，模糊查询==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，模糊查询==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}

	}

	/**
	 * 通过用户id查询群组
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/myGroup")
	public @ResponseBody ResponseContainer getMyGroup(HttpServletRequest request) {
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		String userId = request.getParameter("userId");
		try {
			List<XueWenGroup> group = groupService.findMyGroup(userId);
			this.rsData.setResult(groupService.changeGroupsToResponseGroup1(group,userId));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，通过用户ID查找群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，通过用户ID查找群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * PC通过用户id查询群组
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/myPcGroup")
	public @ResponseBody ResponseContainer myPcGroup(HttpServletRequest request) {
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		try {
			List<XueWenGroup> group = groupService.findMyGroup(currentUser.getId());
			
			this.rsData.setResult(groupService.changeGroupsToPcResponseGroup(group,currentUser.getId()));
			
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，通过用户ID查找群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，通过用户ID查找群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @Title: myPcGroupTop3
	 * @Description: 获取用户前3个群组
	 * @param request
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("/myPcGroupTop3")
	public @ResponseBody ResponseContainer myPcGroupTop3(HttpServletRequest request) {
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		List<JSONObject> objs=groupService.getMyGroupTop3(currentUser.getId());
		return addResponse(Config.STATUS_200, Config.MSG_TOADMIN_200, objs,
				Config.RESP_MODE_10, "");
		
	}
	
	/**
	 * 通过用户id查询我加入的群组
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/my/joined")
	public @ResponseBody ResponseContainer getPcJoinedGroup(HttpServletRequest request) {
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		try {
			List<XueWenGroup> group = groupService.findMyJoinedGroup(currentUser.getId());
			
			this.rsData.setResult(groupService.changeGroupsToPcResponseGroup(group,currentUser.getId()));
			
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，通过用户ID查找群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，通过用户ID查找群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 通过用户id查询我加入的群组 分页
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/getMyJoinedGroup")
	public @ResponseBody ResponseContainer getMyJoinedGroup(HttpServletRequest request,QueryModel dm) {
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		try {
			List<XueWenGroup> group = groupService.findMyJoinedGroup(currentUser.getId());
			
			this.rsData.setResult(groupService.changeGroupsToPcResponseGroup(group,currentUser.getId()));
			
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，通过用户ID查找群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，通过用户ID查找群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 通过用户id查询我创建的群组
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/my/created")
	public @ResponseBody ResponseContainer getPcCreatedGroup(HttpServletRequest request) {
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		try {
			List<XueWenGroup> group = groupService.findMyCreatedGroup(currentUser.getId());
			
			this.rsData.setResult(groupService.changeGroupsToPcResponseGroup(group,currentUser.getId()));
			
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，通过用户ID查找群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，通过用户ID查找群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 我创建的群组带分页
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/getMyCreateGroups")
	public @ResponseBody ResponseContainer getCreatedGroup(HttpServletRequest request,QueryModel dm) {
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		Pageable pageable=PageRequestTools.pageRequesMake(dm);
		try {
			Page<XueWenGroup> groups = groupService.findMyGreateGroup(currentUser.getId(), pageable);
			ReponseDataTools.getClientReponseData(rsData, groups);
			JSONArray groupres=groupService.shutForPc(groups);
			rsData.setResult(groupres);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		}  catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，通过用户ID查找群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 用户请求加入群组
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/apply")
	public @ResponseBody ResponseContainer apply(HttpServletRequest request) {
		String groupId = request.getParameter("groupId");
		String password = request.getParameter("password");
		String future=request.getParameter("future");
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		Map<String,String> extra=new HashMap<String, String>();
		if(StringUtil.isBlank(future)){
			future="1";
		}
		extra.put("type","1000");
		extra.put("future", future);
		try {
			groupService.applyToGroup(groupId,password,currentUser,extra,future);
			XueWenGroup group = groupService.findGroup(groupId, currentUser.getId());
			return addResponse(Config.STATUS_200, Config.MSG_JOIN_200, group,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，用户请求加入群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，用户请求加入群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 管理员同意用户加入群组
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/agree")
	public @ResponseBody ResponseContainer agree(HttpServletRequest request) {
		try {
			String groupId = request.getParameter("groupId");
			String userId = request.getParameter("userId");
			String token = request.getParameter("token");
			String messageGroupId=request.getParameter("messageGroupId");
			String future=request.getParameter("future");
			Map<String,String> extra=new HashMap<String, String>();
			extra.put("type","1001");
			extra.put("future",future);
			User currentUser = this.getCurrentUser(token);
			groupService.agree(groupId,messageGroupId,userId,currentUser,extra,future);
			return addResponse(Config.STATUS_200, Config.MSG_JOIN_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，管理员同意加入群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，管理员同意加入群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 管理员拒绝用户加入群组
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/unagree")
	public @ResponseBody ResponseContainer unagree(HttpServletRequest request) {
		try {
			String groupId = request.getParameter("groupId");
			String userId = request.getParameter("userId");
			String token = request.getParameter("token");
			String future=request.getParameter("future");
			String messageGroupId=request.getParameter("messageGroupId");
			User currentUser = this.getCurrentUser(token);
			Map<String,String> extra=new HashMap<String, String>();
			extra.put("type","1002");
			extra.put("future",future);
			groupService.unagree(groupId,messageGroupId,userId,currentUser,extra,future);
			return addResponse(Config.STATUS_200, Config.MSG_UNJOIN_200, true,Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 查询附近的群
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("nearGroup")
	public @ResponseBody ResponseContainer findAllNearGroup(
			HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String lat = request.getParameter("lat"); //维度
			String lng = request.getParameter("lng");//精度
			Point p = null;
			Distance dis = null;
			if(null!=lat && null!= lng){
			 p = new Point(Double.parseDouble(lng),Double.parseDouble(lat));
			 dis = new Distance(10,Metrics.KILOMETERS);
			}

			List<ResponseGroup> group = groupService.findAllNearGroup(currentUser.getId(),p,dis);
			long groupCount = groupService.groupCount(currentUser.getId());
			ResponseNearGroup rng = new ResponseNearGroup(group,groupCount);
			this.rsData.setResult(rng);
			//this.rsData.setResult(groupService.changeGroupsToResponseGroup(group,currentUser.getId()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，查询所有群组不支持翻页==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，查询所有群组不支持翻页==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 查询推荐的群
	 * 
	 * @param request
	 * @return
	 */
//	@RequestMapping("recommend")
//	public @ResponseBody ResponseContainer Recommend(HttpServletRequest request){
//		String token = request.getParameter("token");
//		User currentUser = this.getCurrentUser(token);
//		String pageNumber = request.getParameter("n");
//		String pageSize = request.getParameter("s");
//		String sort = request.getParameter("sort");
//		String mode = request.getParameter("mode");		
//		if (StringUtil.isEmpty(sort)) {
//			sort = "ctime";
//		}
//		if (StringUtil.isEmpty(mode)) {
//			mode = "DESC";
//		}
//		Direction d = Direction.DESC;
//		if(mode.equalsIgnoreCase("ASC")){
//			d = Direction.ASC;
//		}
//		Sort st = new Sort(d,sort);
//		try{
//			Page<XueWenGroup> group = groupService.findAllGroupRecommend(currentUser,pageNumber, pageSize,st);
//			if (group.getTotalElements() == 0) {
//				rsData.setCurr_page(group.getNumber());
//				int curr_rows=group.getNumber()*group.getSize();
//				if(curr_rows>group.getTotalElements()){
//					curr_rows=new Long(group.getTotalElements()).intValue();
//					rsData.setCurr_rows(curr_rows);
//				}else{
//					rsData.setCurr_rows(curr_rows);
//				}
//			} else {
//				rsData.setCurr_page(group.getNumber() + 1);
//				int curr_rows=(group.getNumber()+1)*group.getSize();
//				if(curr_rows>group.getTotalElements()){
//					curr_rows=new Long(group.getTotalElements()).intValue();
//					rsData.setCurr_rows(curr_rows);
//				}else{
//					rsData.setCurr_rows(curr_rows);
//				}
//			}
//			rsData.setTotal_rows(group.getTotalElements());
//			rsData.setPage_rows(group.getTotalPages());
//			this.rsData.setResult(groupService
//					.changeGroupsToResponseGroup(group.getContent(),currentUser.getId()));
//			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
//					Config.RESP_MODE_10, "");
//		} catch (XueWenServiceException e) {
//			e.printStackTrace();
//			logger.error("===========业务错误，推荐群查询==========="+e);
//			return addResponse(e.getCode(), e.getMessage(), false,
//					Config.RESP_MODE_10, "");
//		} catch (Exception e) {
//			e.printStackTrace();
//			logger.error("===========未知错误，推荐群查询==========="+e);
//			return addResponse(Config.STATUS_505, Config.MSG_505, false,
//					Config.RESP_MODE_10, "");
//		}
//	
//	}
	
	/**
	 * 查询值得加入的群
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("worthGroups")
	public @ResponseBody ResponseContainer worthGroups(HttpServletRequest request){
		try{
			String num = request.getParameter("num");
			List<JSONObject> group = groupPcService.worthGroups(Integer.valueOf(num));
			return addResponse(Config.STATUS_200, Config.MSG_200, group, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			logger.error("===========未知错误，查询值得加入的群==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	
	}
	
	/**
	 * 获取一个人加入群的数量
	 * @param request
	 * @return
	 */
	@RequestMapping("/groupCount")
	public @ResponseBody ResponseContainer groupCount(HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			String userId = request.getParameter("userId");
			List<XueWenGroup> myGroup = myGroupService.myGroups(userId);
			int count = 0;
			if(myGroup != null ){
				count = myGroup.size();
			}
			long dryCount = drycargoService.getDryCount(userId);
			int courseCount = userGroupCourseService.getStudyedCountByUser(userId);
			UserMoreMessage umm = new UserMoreMessage(count,dryCount,courseCount);
			return addResponse(Config.STATUS_200, Config.MSG_200, umm,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 通过用户id查询群组
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/myAllGroup")
	public @ResponseBody ResponseContainer myAllGroup(HttpServletRequest request) {
		String token = request.getParameter("token");
		User currentUser = this.getCurrentUser(token);
		try {
			List<XueWenGroup> owner = groupService.findMyCreatedGroup(currentUser.getId());
			List<ResponseGroup>  ownerResponse = null;
			if(owner!=null && owner.size()>0){
			ownerResponse = groupService.changeGroupsToResponseGroup1(owner,currentUser.getId());
			}
			
			List<XueWenGroup> admin = groupService.findMyAdminGroup(currentUser.getId());
			List<ResponseGroup>  adminResponse = null;
			if(admin!=null && admin.size()>0){
				
			adminResponse = groupService.changeGroupsToResponseGroup1(admin,currentUser.getId());
			}
			
			List<XueWenGroup> member = groupService.findMyMemberGroup(currentUser.getId());
			List<ResponseGroup>  memberResponse = null;
			if(member!=null && member.size()>0){
			memberResponse = groupService.changeGroupsToResponseGroup1(member,currentUser.getId());
			}
			
			MyAllGroup myGroup = new MyAllGroup(ownerResponse,adminResponse,memberResponse);
			
			this.rsData.setResult(myGroup);
//			
//			List<XueWenGroup> group = groupService.findMyGroup(
//					currentUser.getId());
//			
//			this.rsData.setResult(groupService
//					.changeGroupsToResponseGroup(group,currentUser.getId()));
			
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，通过用户ID查找群组==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，通过用户ID查找群组==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 批量添加群组用户
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value="registGroupUser", method=RequestMethod.POST)
	public @ResponseBody ResponseContainer registGroupUserPc(HttpServletRequest request,String users,String groupId,String md5) {
		try {
			groupService.registGroupUser(users, groupId, md5);
			return addResponse(Config.STATUS_200,Config.MSG_200,Config.MSG_JOIN_200,Config.RESP_MODE_10,"");
		} catch (XueWenServiceException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return addResponse(e.getCode(),e.getMessage(),false,Config.RESP_MODE_10,"");
		} catch (Exception e){
			e.printStackTrace();
			return addResponse(Config.STATUS_505,Config.MSG_505,false,Config.RESP_MODE_10,"");
		}
	}
	
	/**
	 * 根据群组ID查询群成员列表分页
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/one/{id}/memberPcPage")
	public @ResponseBody ResponseContainer findMemberPcPage(QueryModel dm,
			@PathVariable("id") String id, String userName,HttpServletRequest request) {
		try {
			//根据请求参数封装一个分页信息对象
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<User> pageUser = groupService.memberPcPage(userName,id,pageable);
			ReponseDataTools.getClientReponseData(rsData, pageUser);
			rsData.setResult(groupService.toResponsePcUser(pageUser.getContent()));
			return addPageResponse(Config.STATUS_200,Config.MSG_200,rsData,Config.RESP_MODE_10,"");
		} catch (XueWenServiceException e) {
			logger.error("==========业务错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			logger.error("==========未知错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 查询所有群组支持翻页
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/recommend")
	public @ResponseBody ResponseContainer Recommend(QueryModelMul dm,
			HttpServletRequest request) {
		try {
			String token = request.getParameter("token");
			User currentUser = this.getCurrentUser(token);
			List<String> sort = new ArrayList<String>();
			sort.add("temperature");
			sort.add("ctime");
			dm.setSort(sort);
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			Page<XueWenGroup> group = groupService.recommend(pageable,currentUser.getId());
			ReponseDataTools.getClientReponseData(rsData, group);
			this.rsData.setResult(groupService.changeGroupsToResponseGroup1(group.getContent(),currentUser.getId()));
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		}catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}	
	}
	
	/**
	 * 
	 * @Title: isGroupMember
	 * @Description: 判断是否是群成员
	 * @param gId
	 * @param uId
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("isGroupMember")
	public @ResponseBody ResponseContainer isGroupMember(String gId,String token){
		User user=getCurrentUser(token);
		boolean ismember=groupPcService.isGroupMember(gId, user.getId());
		return addResponse(Config.STATUS_200, Config.MSG_200, ismember, Config.RESP_MODE_10, "");
		
	}
	/**
	 * @Title: 根据群组ID查询出群组的Id，群组名称，群组头像，群组成员数量，群组课程数量
	 * @author hjn
	 * @Description: 判断是否是群成员
	 * @param gId
	 * @param uId
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("groupSimpleInfo")
	public @ResponseBody ResponseContainer groupSimpleInfo(HttpServletRequest request){
		try {
			String token=request.getParameter("token");
			User user=this.getCurrentUser(token);
			String groupId=request.getParameter("groupId");
			Object obj=groupService.findByIdRspGroupNanemAndMemberCountAndCourseCount(groupId,user.getId());
			return addResponse(Config.STATUS_200,Config.MSG_200,obj,Config.RESP_MODE_10,"");
		} catch (XueWenServiceException e) {
			logger.error("==========业务错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			logger.error("==========未知错误，根据群组ID查询群成员列表失败============"+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
		
	}
	/**
	 * 
	 * @Title: getGroupNewMembers
	 * @Description: 取群活跃成员（最新成员）
	 * @param groupId
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping(value="getGroupNewMembers")
	public @ResponseBody ResponseContainer getGroupNewMembers(String groupId){
		  try {
			List<JSONObject> users=groupService.getGroupfreshMember(groupId);
			return addResponse(Config.STATUS_200,Config.MSG_200,users,Config.RESP_MODE_10,"");

		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @Title: findMyMemberGroup
	 * @Description: 通过用户ID查询自己为成员小组（不包含创建者跟管理员）
	 * @param request
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("/findMyMemberGroup")
	public @ResponseBody ResponseContainer findMyMemberGroup(HttpServletRequest request) {
		try {
			User user = this.getCurrentUser(request.getParameter("token"));
			List<XueWenGroup> xue = groupService.findMyMemberGroup(user.getId());
			String[] includeKey = {"id","groupName","logoUrl"};
			List<JSONObject> jsonObjects = groupService.toResponse(xue, includeKey);
			return addResponse(Config.STATUS_200, Config.MSG_200, jsonObjects,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 
	 * @Title: findMyMemberGroup
	 * @Description: 通过用户ID查询自己为成员小组（不包含创建者跟管理员）分页
	 * @param request
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("/findMyMemberPageGroups")
	public @ResponseBody ResponseContainer findMyMemberPageGroup(HttpServletRequest request,QueryModel dm) {
		try {
			Pageable pageable=PageRequestTools.pageRequesMake(dm);
			User user = this.getCurrentUser(request.getParameter("token"));
			Page<XueWenGroup> groups = groupService.findMyMemberGroup(user.getId(),pageable);
			ReponseDataTools.getClientReponseData(rsData, groups);
			String[] includeKey = {"id","groupName","logoUrl"};
			List<JSONObject> jsonObjects = groupService.toResponse(groups.getContent(), includeKey);
			rsData.setResult(jsonObjects);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @Title: findMyAdminGroups
	 * @Description: 通过用户ID查询自己为管理员的小组（不包含成员）
	 * @param request
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("/findMyAdminGroups")
	public @ResponseBody ResponseContainer findMyAdminGroups(HttpServletRequest request) {
		try {
			User user = this.getCurrentUser(request.getParameter("token"));
			List<XueWenGroup> xue = groupService.findMyAdminGroups(user.getId());
			String[] includeKey = {"id","groupName","logoUrl"};
			List<JSONObject> jsonObjects = groupService.toResponse(xue, includeKey);
			return addResponse(Config.STATUS_200, Config.MSG_200, jsonObjects,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	
	
	/**
	 * 
	 * @Title: findMyAdminGroups
	 * @Description: 通过用户ID查询自己为管理员的小组（不包含成员） 带分页
	 * @param request
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("/findMyAdminPageGroups")
	public @ResponseBody ResponseContainer findMyAdminPageGroups(HttpServletRequest request,QueryModel dm) {
		try {
			User user = this.getCurrentUser(request.getParameter("token"));
			Pageable pageable=PageRequestTools.pageRequesMake(dm);
			Page<XueWenGroup> groups = groupService.findMyAdminPageGroups(user.getId(),pageable);
			ReponseDataTools.getClientReponseData(rsData, groups);
			String[] includeKey = {"id","groupName","logoUrl"};
			List<JSONObject> jsonObjects = groupService.toResponse(groups.getContent(), includeKey);
			rsData.setResult(jsonObjects);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 
	 * @Title: findGroupsByTag
	 * @Description: 通过用户ID查询自己为管理员的小组（不包含成员）
	 * @param request
	 * @return ResponseContainer
	 * @throws
	 */
//	@RequestMapping("/findGroupsByTag")
//	public @ResponseBody ResponseContainer findGroupsByTag(HttpServletRequest request,Pageable pageable) {
//		try {
////			User user = this.getCurrentUser(request.getParameter("token"));
//			String tagName=request.getParameter("tagName");
//			return addResponse(Config.STATUS_200, Config.MSG_200, groupPcService.findGroupsByTag(tagName),Config.RESP_MODE_10, "");
//		} catch (Exception e) {
//			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
//		}
//	}
	
	@RequestMapping("/findGroupsByTag")
	public @ResponseBody ResponseContainer findGroupsByTag(QueryModel dm,
			HttpServletRequest request) {
		try {

			//根据请求参数封装一个分页信息对象
			dm.setSort("topicNumber");
			dm.setMode("DESC");
			Pageable pageable = PageRequestTools.pageRequesMake(dm);
			String tagName=request.getParameter("tagName");
			Page<SearchGroupVo> group = searchVoService.findVosByTag(tagName, pageable);
			if (group.getTotalElements() == 0) {
				rsData.setCurr_page(group.getNumber());			
					rsData.setCurr_rows(0);				
			} else {
				rsData.setCurr_page(group.getNumber() + 1);
				int curr_rows=(group.getNumber()+1)*group.getSize();
				if(curr_rows>group.getTotalElements()){
					curr_rows=new Long(group.getTotalElements()).intValue();					
				}
				rsData.setCurr_rows(curr_rows);
			}
			rsData.setTotal_rows(group.getTotalElements());
			rsData.setPage_rows(group.getTotalPages());
			this.rsData.setResult(group.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			logger.error("===========业务错误，查询所有群组支持翻页==========="+e);
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("===========未知错误，查询所有群组支持翻页==========="+e);
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}

	}
	/**
	 * 
	 * @Title: getTagByType
	 * @Description: 查找学习小组的热门标签
	 * @param request
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("/getTagByType")
	public @ResponseBody ResponseContainer getTagByType(HttpServletRequest request) {
		try {
			return addResponse(Config.STATUS_200, Config.MSG_200, searchVoService.getTagByType(),Config.RESP_MODE_10, "");
		}catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
	@RequestMapping("/change")
	public @ResponseBody ResponseContainer chage(HttpServletRequest request) {
		try {
			groupPcService.chage();
			return addResponse(Config.STATUS_200, Config.MSG_200, true,Config.RESP_MODE_10, "");
		}catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false,Config.RESP_MODE_10, "");
		}
	}
}
