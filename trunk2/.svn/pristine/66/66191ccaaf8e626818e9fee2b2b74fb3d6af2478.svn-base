package operation.controller.oss;

import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;
import operation.OssController;
import operation.exception.XueWenServiceException;
import operation.pojo.drycargo.Drycargo;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.user.User;
import operation.service.drycargo.DrycargoBeanService;
import operation.service.drycargo.DrycargoService;
import operation.service.user.UserService;

import org.jsoup.helper.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import operation.OssController;
import operation.exception.XueWenServiceException;
import operation.pojo.drycargo.Drycargo;
import operation.pojo.drycargo.DrycargoBean;
import operation.pojo.drycargo.DrycargoResponse;
import operation.pojo.pub.QueryModel;
import operation.pojo.pub.QueryModelMul;
import operation.pojo.user.User;
import operation.service.drycargo.DrycargoBeanService;
import operation.service.drycargo.DrycargoService;
import operation.service.user.UserService;
import tools.Config;
import tools.PageRequestTools;
import tools.ReponseDataTools;
import tools.ResponseContainer;

@RestController
@RequestMapping("/oss/dry")
@Configuration
public class OssDryController extends OssController {

	@Autowired
	public DrycargoService drycargoService;

	@Autowired
	public UserService userService;

	@Autowired
	public DrycargoBeanService drycargoBeanService;

	public OssDryController() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * 查询干货详情（从小组课堂查看干货详情）
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/getOneDry")
	public @ResponseBody ResponseContainer getOneDry(HttpServletRequest request) throws XueWenServiceException {
		try {
			String dryCargoId = request.getParameter("dryid");
			Drycargo db = drycargoService.findOneById(dryCargoId);

			return addResponse(Config.STATUS_200, Config.MSG_200, db, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 存储干货
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/updateOne")
	public @ResponseBody ResponseContainer updateOne(HttpServletRequest request) throws XueWenServiceException {
		try {
			String dryCargoId = request.getParameter("dryid");
			String fileUrl = request.getParameter("fileUrl");
			String groupid = request.getParameter("groupid");
			if (fileUrl != null) {
				fileUrl = URLDecoder.decode(fileUrl, "utf-8");
			}

			String message = request.getParameter("message");

			Drycargo db = drycargoService.findOneById(dryCargoId);

			if (groupid != null) {

				db.setGroup(groupid);
			} else {
				db.setFileUrl(fileUrl);
				db.setMessage(message);
			}

			drycargoService.saveDrycargo(db);

			return addResponse(Config.STATUS_200, Config.MSG_200, true, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 根据群组查询干货列表Pc
	 * 
	 * @param request
	 * @param dm
	 * @return
	 */
	@RequestMapping("findDryByGroup")
	public @ResponseBody ResponseContainer findDryByGroup(HttpServletRequest request, QueryModelMul dm) {
		// 根据请求参数封装一个分页信息对象
		// dm.setSort("c");
		List<String> sort = new ArrayList<String>();
		// sort.add("weightSort");
		// sort.add("viewCount");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		Page<Drycargo> dryCargoResult;
		try {
			String groupId = request.getParameter("groupId");
			dryCargoResult = drycargoService.allPc(groupId, pageable);
			ReponseDataTools.getClientReponseData(rsData, dryCargoResult);
			this.rsData.setResult(dryCargoResult.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 查询干货列表 包括没有关联群组的
	 * 
	 * @param request
	 * @param dm
	 * @return
	 */
	@RequestMapping("searchDrys")
	public @ResponseBody ResponseContainer searchDrys(HttpServletRequest request, QueryModelMul dm) {
		// 根据请求参数封装一个分页信息对象
		// dm.setSort("c");
		List<String> sort = new ArrayList<String>();
		// sort.add("weightSort");
		// sort.add("viewCount");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		Page<Drycargo> dryCargoResult;
		try {
			String keywords = request.getParameter("keywords");
			dryCargoResult = drycargoService.search(keywords, pageable);
			ReponseDataTools.getClientReponseData(rsData, dryCargoResult);
			this.rsData.setResult(dryCargoResult.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 创建干货
	 * 
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping("uploadDrycargo")
	public @ResponseBody ResponseContainer uploadDrycargo(HttpServletRequest request, Drycargo drycargo) {
		try {
			String id = request.getParameter("id");
			User currentUser = userService.findUser(id);
			String tagName = request.getParameter("tagName");
			// 非空校验
			if (StringUtil.isBlank(drycargo.getUrl()) || currentUser == null) {
				return addResponse(Config.STATUS_500, Config.MSG_500, false, Config.RESP_MODE_10, "");
			}
			// 干货增加回复流程
			Drycargo db = drycargoBeanService.uploadDry(currentUser, drycargo, tagName);
			return addResponse(Config.STATUS_200, Config.MSG_200, db, Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false, Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}

	/**
	 * 删除
	 * 
	 * @param request
	 * @return
	 * @throws
	 * @throws IOException
	 */
	@RequestMapping(value = "/deleteDry")
	public @ResponseBody ResponseContainer create(HttpServletRequest request) {
		try {
			String dryCargoId = request.getParameter("dryCargoId");
			return addResponse(Config.STATUS_200, Config.MSG_CREATE_200, drycargoService.deleteDrycargo(dryCargoId), Config.RESP_MODE_10, "");
		} catch (Exception e) {
			return addResponse(Config.STATUS_505, Config.MSG_505, false, Config.RESP_MODE_10, "");
		}
	}
	/**
	 * 
	 * @Title: searchDry
	 * @Description:干货搜索
	 * @param keywords
	 * @param dm
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("searchDry")
	public @ResponseBody ResponseContainer searchDry(String keywords,QueryModel dm){
		Pageable pageable= PageRequestTools.pageRequesMake(dm);
		 try {
			Page<DrycargoBean> drys= drycargoBeanService.searchByKeyWordsAndTagNamesLike(keywords, pageable);
			ReponseDataTools.getClientReponseData(rsData, drys);
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		}
		
	}
//	@RequestMapping("tagserch")
//	public @ResponseBody ResponseContainer searchByTag(String tagName,QueryModel dm){
//		Pageable pageable=PageRequestTools.pageRequesMake(dm);		
//		try {
//			drycargoBeanService.serchByTag(tagName,pageable);
//			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
//					Config.RESP_MODE_10, "");
//		} catch (XueWenServiceException e) {
//			e.printStackTrace();
//			return addResponse(e.getCode(), e.getMessage(), false,
//					Config.RESP_MODE_10, "");
//		}
//	}
	
	/**
	 * 根据群组查询干货列表Pc
	 * 
	 * @param request
	 * @param dm
	 * @return
	 */
	@RequestMapping("allPc")
	public @ResponseBody ResponseContainer allPc(HttpServletRequest request,QueryModelMul dm) {
		// 根据请求参数封装一个分页信息对象
		// dm.setSort("c");
		List<String> sort = new ArrayList<String>();
//		sort.add("weightSort");
//		sort.add("viewCount");
		sort.add("ctime");
		dm.setSort(sort);
		Pageable pageable = PageRequestTools.pageRequesMake(dm);
		Page<Drycargo> dryCargoResult;
		try {
			String groupId = request.getParameter("groupId");
			dryCargoResult = drycargoService.allPc(groupId, pageable);
			ReponseDataTools.getClientReponseData(rsData, dryCargoResult);
			this.rsData.setResult(dryCargoResult.getContent());
			return addPageResponse(Config.STATUS_200, Config.MSG_200, rsData,
					Config.RESP_MODE_10, "");
		} catch (XueWenServiceException e) {
			e.printStackTrace();
			return addResponse(e.getCode(), e.getMessage(), false,
					Config.RESP_MODE_10, "");
		} catch (Exception e) {
			e.printStackTrace();
			return addResponse(Config.STATUS_505, Config.MSG_505, false,
					Config.RESP_MODE_10, "");
		}
	}
	
	/**
	 * 
	 * @Title: getTop10
	 * @Description: 获取top10干货
	 * @return ResponseContainer
	 * @throws
	 */
	@RequestMapping("gettop10")
	public @ResponseBody ResponseContainer getTop10(){	  
		List<JSONObject> drys=drycargoBeanService.getTop10();
		return addResponse(Config.STATUS_200, Config.MSG_200, drys, Config.RESP_MODE_10, "");
	}  

}
