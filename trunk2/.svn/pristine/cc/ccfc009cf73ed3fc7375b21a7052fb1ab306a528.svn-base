package operation.repo.course;



import java.util.List;

import operation.pojo.course.NewCourse;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;

public interface NewCourseRepository extends  MongoRepository<NewCourse,String> {
		List<NewCourse> findBySourceId(String sourceId);
		
		List<NewCourse> findByChaptersIn(String id);

		Page<NewCourse> findByTitleRegexOrIntroRegex(String keywords,String keywords2, Pageable pageable);

		//List<NewCourse> findByIdIn(List<Object> courseIds);
		List<NewCourse> findByIdIn(List<String> courseIds);
		
		@Query("{'shareCount':{$gt:?0},'$or':[{'title':{'$regex':?1}},{'tagNames':{'$regex':?1}},{'intro':{'$regex':?1}}]}")
		Page<NewCourse> findByShareCountGreaterThanAndTitleLikeOrIntroLikeOrTagNamesLike(int i,String keyWords,Pageable pageable);

		Page<NewCourse> findByIdIn(List<Object> courseIds, Pageable pageable);

		Page<NewCourse> findByIdNotIn(String courseId, Pageable pageable);
		
		Page<NewCourse> findByIdNotIn(List<Object> courseIds, Pageable pageable);
		
		@Query(fields = "{'title' : 1 }")
		List<NewCourse> findListByTitleRegexOrIntroRegex(String keywords,String keywords2);

		Page<NewCourse> findByShareCountGreaterThan(int i, Pageable pageable);

}
